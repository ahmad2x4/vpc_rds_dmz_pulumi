"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Client VPN endpoint for OpenVPN clients. For more information on usage, please see the
 * [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2clientvpn.Endpoint("example", {
 *     authenticationOptions: {
 *         rootCertificateChainArn: aws_acm_certificate_root_cert.arn,
 *         type: "certificate-authentication",
 *     },
 *     clientCidrBlock: "10.0.0.0/16",
 *     connectionLogOptions: {
 *         cloudwatchLogGroup: aws_cloudwatch_log_group_lg.name,
 *         cloudwatchLogStream: aws_cloudwatch_log_stream_ls.name,
 *         enabled: true,
 *     },
 *     description: "clientvpn-example",
 *     serverCertificateArn: aws_acm_certificate_cert.arn,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ec2_client_vpn_endpoint.html.markdown.
 */
class Endpoint extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["authenticationOptions"] = state ? state.authenticationOptions : undefined;
            inputs["clientCidrBlock"] = state ? state.clientCidrBlock : undefined;
            inputs["connectionLogOptions"] = state ? state.connectionLogOptions : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["dnsServers"] = state ? state.dnsServers : undefined;
            inputs["serverCertificateArn"] = state ? state.serverCertificateArn : undefined;
            inputs["splitTunnel"] = state ? state.splitTunnel : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["transportProtocol"] = state ? state.transportProtocol : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.authenticationOptions === undefined) {
                throw new Error("Missing required property 'authenticationOptions'");
            }
            if (!args || args.clientCidrBlock === undefined) {
                throw new Error("Missing required property 'clientCidrBlock'");
            }
            if (!args || args.connectionLogOptions === undefined) {
                throw new Error("Missing required property 'connectionLogOptions'");
            }
            if (!args || args.serverCertificateArn === undefined) {
                throw new Error("Missing required property 'serverCertificateArn'");
            }
            inputs["authenticationOptions"] = args ? args.authenticationOptions : undefined;
            inputs["clientCidrBlock"] = args ? args.clientCidrBlock : undefined;
            inputs["connectionLogOptions"] = args ? args.connectionLogOptions : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsServers"] = args ? args.dnsServers : undefined;
            inputs["serverCertificateArn"] = args ? args.serverCertificateArn : undefined;
            inputs["splitTunnel"] = args ? args.splitTunnel : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["transportProtocol"] = args ? args.transportProtocol : undefined;
            inputs["dnsName"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Endpoint.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Endpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }
}
exports.Endpoint = Endpoint;
/** @internal */
Endpoint.__pulumiType = 'aws:ec2clientvpn/endpoint:Endpoint';
//# sourceMappingURL=endpoint.js.map