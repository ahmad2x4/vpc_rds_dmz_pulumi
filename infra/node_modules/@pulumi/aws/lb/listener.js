"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Load Balancer Listener resource.
 *
 * > **Note:** `aws.alb.Listener` is known as `aws.lb.Listener`. The functionality is identical.
 *
 * ## Example Usage
 *
 * ### Forward Action
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEnd", {});
 * const frontEndTargetGroup = new aws.lb.TargetGroup("frontEnd", {});
 * const frontEndListener = new aws.lb.Listener("frontEnd", {
 *     certificateArn: "arn:aws:iam::187416307283:server-certificate/test_cert_rab3wuqwgja25ct3n4jdj2tzu4",
 *     defaultActions: [{
 *         targetGroupArn: frontEndTargetGroup.arn,
 *         type: "forward",
 *     }],
 *     loadBalancerArn: frontEndLoadBalancer.arn,
 *     port: 443,
 *     protocol: "HTTPS",
 *     sslPolicy: "ELBSecurityPolicy-2016-08",
 * });
 * ```
 *
 * ### Redirect Action
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEnd", {});
 * const frontEndListener = new aws.lb.Listener("frontEnd", {
 *     defaultActions: [{
 *         redirect: {
 *             port: "443",
 *             protocol: "HTTPS",
 *             statusCode: "HTTP_301",
 *         },
 *         type: "redirect",
 *     }],
 *     loadBalancerArn: frontEndLoadBalancer.arn,
 *     port: 80,
 *     protocol: "HTTP",
 * });
 * ```
 *
 * ### Fixed-response Action
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEnd", {});
 * const frontEndListener = new aws.lb.Listener("frontEnd", {
 *     defaultActions: [{
 *         fixedResponse: {
 *             contentType: "text/plain",
 *             messageBody: "Fixed response content",
 *             statusCode: "200",
 *         },
 *         type: "fixed-response",
 *     }],
 *     loadBalancerArn: frontEndLoadBalancer.arn,
 *     port: 80,
 *     protocol: "HTTP",
 * });
 * ```
 *
 * ### Authenticate-cognito Action
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEnd", {});
 * const frontEndTargetGroup = new aws.lb.TargetGroup("frontEnd", {});
 * const pool = new aws.cognito.UserPool("pool", {});
 * const client = new aws.cognito.UserPoolClient("client", {});
 * const domain = new aws.cognito.UserPoolDomain("domain", {});
 * const frontEndListener = new aws.lb.Listener("frontEnd", {
 *     defaultActions: [
 *         {
 *             authenticateCognito: {
 *                 userPoolArn: pool.arn,
 *                 userPoolClientId: client.id,
 *                 userPoolDomain: domain.domain,
 *             },
 *             type: "authenticate-cognito",
 *         },
 *         {
 *             targetGroupArn: frontEndTargetGroup.arn,
 *             type: "forward",
 *         },
 *     ],
 *     loadBalancerArn: frontEndLoadBalancer.arn,
 *     port: 80,
 *     protocol: "HTTP",
 * });
 * ```
 *
 * ### Authenticate-oidc Action
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const frontEndLoadBalancer = new aws.lb.LoadBalancer("frontEnd", {});
 * const frontEndTargetGroup = new aws.lb.TargetGroup("frontEnd", {});
 * const frontEndListener = new aws.lb.Listener("frontEnd", {
 *     defaultActions: [
 *         {
 *             authenticateOidc: {
 *                 authorizationEndpoint: "https://example.com/authorization_endpoint",
 *                 clientId: "clientId",
 *                 clientSecret: "clientSecret",
 *                 issuer: "https://example.com",
 *                 tokenEndpoint: "https://example.com/token_endpoint",
 *                 userInfoEndpoint: "https://example.com/user_info_endpoint",
 *             },
 *             type: "authenticate-oidc",
 *         },
 *         {
 *             targetGroupArn: frontEndTargetGroup.arn,
 *             type: "forward",
 *         },
 *     ],
 *     loadBalancerArn: frontEndLoadBalancer.arn,
 *     port: 80,
 *     protocol: "HTTP",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lb_listener.html.markdown.
 */
class Listener extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["certificateArn"] = state ? state.certificateArn : undefined;
            inputs["defaultActions"] = state ? state.defaultActions : undefined;
            inputs["loadBalancerArn"] = state ? state.loadBalancerArn : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["sslPolicy"] = state ? state.sslPolicy : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.defaultActions === undefined) {
                throw new Error("Missing required property 'defaultActions'");
            }
            if (!args || args.loadBalancerArn === undefined) {
                throw new Error("Missing required property 'loadBalancerArn'");
            }
            if (!args || args.port === undefined) {
                throw new Error("Missing required property 'port'");
            }
            inputs["certificateArn"] = args ? args.certificateArn : undefined;
            inputs["defaultActions"] = args ? args.defaultActions : undefined;
            inputs["loadBalancerArn"] = args ? args.loadBalancerArn : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["sslPolicy"] = args ? args.sslPolicy : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "aws:elasticloadbalancingv2/listener:Listener" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Listener.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Listener(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }
}
exports.Listener = Listener;
/** @internal */
Listener.__pulumiType = 'aws:lb/listener:Listener';
//# sourceMappingURL=listener.js.map