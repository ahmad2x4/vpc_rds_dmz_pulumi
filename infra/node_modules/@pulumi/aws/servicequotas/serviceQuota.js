"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an individual Service Quota.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicequotas.ServiceQuota("example", {
 *     quotaCode: "L-F678F1CE",
 *     serviceCode: "vpc",
 *     value: 75,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/servicequotas_service_quota.html.markdown.
 */
class ServiceQuota extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["adjustable"] = state ? state.adjustable : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["defaultValue"] = state ? state.defaultValue : undefined;
            inputs["quotaCode"] = state ? state.quotaCode : undefined;
            inputs["quotaName"] = state ? state.quotaName : undefined;
            inputs["requestId"] = state ? state.requestId : undefined;
            inputs["requestStatus"] = state ? state.requestStatus : undefined;
            inputs["serviceCode"] = state ? state.serviceCode : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.quotaCode === undefined) {
                throw new Error("Missing required property 'quotaCode'");
            }
            if (!args || args.serviceCode === undefined) {
                throw new Error("Missing required property 'serviceCode'");
            }
            if (!args || args.value === undefined) {
                throw new Error("Missing required property 'value'");
            }
            inputs["quotaCode"] = args ? args.quotaCode : undefined;
            inputs["serviceCode"] = args ? args.serviceCode : undefined;
            inputs["value"] = args ? args.value : undefined;
            inputs["adjustable"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["defaultValue"] = undefined /*out*/;
            inputs["quotaName"] = undefined /*out*/;
            inputs["requestId"] = undefined /*out*/;
            inputs["requestStatus"] = undefined /*out*/;
            inputs["serviceName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ServiceQuota.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ServiceQuota resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ServiceQuota(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ServiceQuota.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceQuota.__pulumiType;
    }
}
exports.ServiceQuota = ServiceQuota;
/** @internal */
ServiceQuota.__pulumiType = 'aws:servicequotas/serviceQuota:ServiceQuota';
//# sourceMappingURL=serviceQuota.js.map