"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a MediaStore Container Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const currentRegion = aws.getRegion();
 * const currentCallerIdentity = aws.getCallerIdentity();
 * const exampleContainer = new aws.mediastore.Container("example", {});
 * const exampleContainerPolicy = new aws.mediastore.ContainerPolicy("example", {
 *     containerName: exampleContainer.name,
 *     policy: pulumi.interpolate`{
 * 	"Version": "2012-10-17",
 * 	"Statement": [{
 * 		"Sid": "MediaStoreFullAccess",
 * 		"Action": [ "mediastore:*" ],
 * 		"Principal": {"AWS" : "arn:aws:iam::${currentCallerIdentity.accountId}:root"},
 * 		"Effect": "Allow",
 * 		"Resource": "arn:aws:mediastore:${currentCallerIdentity.accountId}:${currentRegion.name!}:container/${exampleContainer.name}/*",
 * 		"Condition": {
 * 			"Bool": { "aws:SecureTransport": "true" }
 * 		}
 * 	}]
 * }
 * `,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/media_store_container_policy.html.markdown.
 */
class ContainerPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["containerName"] = state ? state.containerName : undefined;
            inputs["policy"] = state ? state.policy : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.containerName === undefined) {
                throw new Error("Missing required property 'containerName'");
            }
            if (!args || args.policy === undefined) {
                throw new Error("Missing required property 'policy'");
            }
            inputs["containerName"] = args ? args.containerName : undefined;
            inputs["policy"] = args ? args.policy : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ContainerPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ContainerPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ContainerPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ContainerPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerPolicy.__pulumiType;
    }
}
exports.ContainerPolicy = ContainerPolicy;
/** @internal */
ContainerPolicy.__pulumiType = 'aws:mediastore/containerPolicy:ContainerPolicy';
//# sourceMappingURL=containerPolicy.js.map