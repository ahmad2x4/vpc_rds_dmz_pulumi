"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages status (recording / stopped) of an AWS Config Configuration Recorder.
 *
 * > **Note:** Starting Configuration Recorder requires a [Delivery Channel](https://www.terraform.io/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.Bucket("b", {});
 * const fooDeliveryChannel = new aws.cfg.DeliveryChannel("foo", {
 *     s3BucketName: bucket.bucket,
 * });
 * const role = new aws.iam.Role("r", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const fooRecorder = new aws.cfg.Recorder("foo", {
 *     roleArn: role.arn,
 * });
 * const fooRecorderStatus = new aws.cfg.RecorderStatus("foo", {
 *     isEnabled: true,
 * }, {dependsOn: [fooDeliveryChannel]});
 * const rolePolicyAttachment = new aws.iam.RolePolicyAttachment("a", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSConfigRole",
 *     role: role.name,
 * });
 * const rolePolicy = new aws.iam.RolePolicy("p", {
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "s3:*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${bucket.arn}",
 *         "${bucket.arn}/*"
 *       ]
 *     }
 *   ]
 * }
 * `,
 *     role: role.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_configuration_recorder_status.html.markdown.
 */
class RecorderStatus extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["isEnabled"] = state ? state.isEnabled : undefined;
            inputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.isEnabled === undefined) {
                throw new Error("Missing required property 'isEnabled'");
            }
            inputs["isEnabled"] = args ? args.isEnabled : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RecorderStatus.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RecorderStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new RecorderStatus(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RecorderStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RecorderStatus.__pulumiType;
    }
}
exports.RecorderStatus = RecorderStatus;
/** @internal */
RecorderStatus.__pulumiType = 'aws:cfg/recorderStatus:RecorderStatus';
//# sourceMappingURL=recorderStatus.js.map