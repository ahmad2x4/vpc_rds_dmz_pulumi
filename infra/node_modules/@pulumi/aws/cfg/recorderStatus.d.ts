import * as pulumi from "@pulumi/pulumi";
/**
 * Manages status (recording / stopped) of an AWS Config Configuration Recorder.
 *
 * > **Note:** Starting Configuration Recorder requires a [Delivery Channel](https://www.terraform.io/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.Bucket("b", {});
 * const fooDeliveryChannel = new aws.cfg.DeliveryChannel("foo", {
 *     s3BucketName: bucket.bucket,
 * });
 * const role = new aws.iam.Role("r", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const fooRecorder = new aws.cfg.Recorder("foo", {
 *     roleArn: role.arn,
 * });
 * const fooRecorderStatus = new aws.cfg.RecorderStatus("foo", {
 *     isEnabled: true,
 * }, {dependsOn: [fooDeliveryChannel]});
 * const rolePolicyAttachment = new aws.iam.RolePolicyAttachment("a", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSConfigRole",
 *     role: role.name,
 * });
 * const rolePolicy = new aws.iam.RolePolicy("p", {
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "s3:*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "${bucket.arn}",
 *         "${bucket.arn}/*"
 *       ]
 *     }
 *   ]
 * }
 * `,
 *     role: role.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_configuration_recorder_status.html.markdown.
 */
export declare class RecorderStatus extends pulumi.CustomResource {
    /**
     * Get an existing RecorderStatus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecorderStatusState, opts?: pulumi.CustomResourceOptions): RecorderStatus;
    /**
     * Returns true if the given object is an instance of RecorderStatus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RecorderStatus;
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    readonly isEnabled: pulumi.Output<boolean>;
    /**
     * The name of the recorder
     */
    readonly name: pulumi.Output<string>;
    /**
     * Create a RecorderStatus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecorderStatusArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RecorderStatus resources.
 */
export interface RecorderStatusState {
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    readonly isEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the recorder
     */
    readonly name?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a RecorderStatus resource.
 */
export interface RecorderStatusArgs {
    /**
     * Whether the configuration recorder should be enabled or disabled.
     */
    readonly isEnabled: pulumi.Input<boolean>;
    /**
     * The name of the recorder
     */
    readonly name?: pulumi.Input<string>;
}
