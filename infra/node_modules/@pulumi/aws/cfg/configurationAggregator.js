"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Config Configuration Aggregator
 *
 * ## Example Usage
 *
 * ### Account Based Aggregation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const account = new aws.cfg.ConfigurationAggregator("account", {
 *     accountAggregationSource: {
 *         accountIds: ["123456789012"],
 *         regions: ["us-west-2"],
 *     },
 * });
 * ```
 *
 * ### Organization Based Aggregation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const organizationRole = new aws.iam.Role("organization", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "config.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `,
 * });
 * const organizationRolePolicyAttachment = new aws.iam.RolePolicyAttachment("organization", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSConfigRoleForOrganizations",
 *     role: organizationRole.name,
 * });
 * const organizationConfigurationAggregator = new aws.cfg.ConfigurationAggregator("organization", {
 *     organizationAggregationSource: {
 *         allRegions: true,
 *         roleArn: organizationRole.arn,
 *     },
 * }, {dependsOn: [organizationRolePolicyAttachment]});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_configuration_aggregator.html.markdown.
 */
class ConfigurationAggregator extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accountAggregationSource"] = state ? state.accountAggregationSource : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["organizationAggregationSource"] = state ? state.organizationAggregationSource : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            inputs["accountAggregationSource"] = args ? args.accountAggregationSource : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["organizationAggregationSource"] = args ? args.organizationAggregationSource : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ConfigurationAggregator.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ConfigurationAggregator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ConfigurationAggregator(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConfigurationAggregator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationAggregator.__pulumiType;
    }
}
exports.ConfigurationAggregator = ConfigurationAggregator;
/** @internal */
ConfigurationAggregator.__pulumiType = 'aws:cfg/configurationAggregator:ConfigurationAggregator';
//# sourceMappingURL=configurationAggregator.js.map