"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an SSM Maintenance Window Target resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const window = new aws.ssm.MaintenanceWindow("window", {
 *     cutoff: 1,
 *     duration: 3,
 *     schedule: "cron(0 16 ? * TUE *)",
 * });
 * const target1 = new aws.ssm.MaintenanceWindowTarget("target1", {
 *     description: "This is a maintenance window target",
 *     resourceType: "INSTANCE",
 *     targets: [{
 *         key: "tag:Name",
 *         values: ["acceptanceTest"],
 *     }],
 *     windowId: window.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_maintenance_window_target.html.markdown.
 */
class MaintenanceWindowTarget extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ownerInformation"] = state ? state.ownerInformation : undefined;
            inputs["resourceType"] = state ? state.resourceType : undefined;
            inputs["targets"] = state ? state.targets : undefined;
            inputs["windowId"] = state ? state.windowId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.resourceType === undefined) {
                throw new Error("Missing required property 'resourceType'");
            }
            if (!args || args.targets === undefined) {
                throw new Error("Missing required property 'targets'");
            }
            if (!args || args.windowId === undefined) {
                throw new Error("Missing required property 'windowId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ownerInformation"] = args ? args.ownerInformation : undefined;
            inputs["resourceType"] = args ? args.resourceType : undefined;
            inputs["targets"] = args ? args.targets : undefined;
            inputs["windowId"] = args ? args.windowId : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MaintenanceWindowTarget.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing MaintenanceWindowTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new MaintenanceWindowTarget(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MaintenanceWindowTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaintenanceWindowTarget.__pulumiType;
    }
}
exports.MaintenanceWindowTarget = MaintenanceWindowTarget;
/** @internal */
MaintenanceWindowTarget.__pulumiType = 'aws:ssm/maintenanceWindowTarget:MaintenanceWindowTarget';
//# sourceMappingURL=maintenanceWindowTarget.js.map