"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Gamelift Fleet resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.gamelift.Fleet("example", {
 *     buildId: aws_gamelift_build_example.id,
 *     ec2InstanceType: "t2.micro",
 *     fleetType: "ON_DEMAND",
 *     runtimeConfiguration: {
 *         serverProcesses: [{
 *             concurrentExecutions: 1,
 *             launchPath: "C:\\game\\GomokuServer.exe",
 *         }],
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/gamelift_fleet.html.markdown.
 */
class Fleet extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["buildId"] = state ? state.buildId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["ec2InboundPermissions"] = state ? state.ec2InboundPermissions : undefined;
            inputs["ec2InstanceType"] = state ? state.ec2InstanceType : undefined;
            inputs["fleetType"] = state ? state.fleetType : undefined;
            inputs["instanceRoleArn"] = state ? state.instanceRoleArn : undefined;
            inputs["logPaths"] = state ? state.logPaths : undefined;
            inputs["metricGroups"] = state ? state.metricGroups : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["newGameSessionProtectionPolicy"] = state ? state.newGameSessionProtectionPolicy : undefined;
            inputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            inputs["resourceCreationLimitPolicy"] = state ? state.resourceCreationLimitPolicy : undefined;
            inputs["runtimeConfiguration"] = state ? state.runtimeConfiguration : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.buildId === undefined) {
                throw new Error("Missing required property 'buildId'");
            }
            if (!args || args.ec2InstanceType === undefined) {
                throw new Error("Missing required property 'ec2InstanceType'");
            }
            inputs["buildId"] = args ? args.buildId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["ec2InboundPermissions"] = args ? args.ec2InboundPermissions : undefined;
            inputs["ec2InstanceType"] = args ? args.ec2InstanceType : undefined;
            inputs["fleetType"] = args ? args.fleetType : undefined;
            inputs["instanceRoleArn"] = args ? args.instanceRoleArn : undefined;
            inputs["metricGroups"] = args ? args.metricGroups : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["newGameSessionProtectionPolicy"] = args ? args.newGameSessionProtectionPolicy : undefined;
            inputs["resourceCreationLimitPolicy"] = args ? args.resourceCreationLimitPolicy : undefined;
            inputs["runtimeConfiguration"] = args ? args.runtimeConfiguration : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["logPaths"] = undefined /*out*/;
            inputs["operatingSystem"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Fleet.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Fleet(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }
}
exports.Fleet = Fleet;
/** @internal */
Fleet.__pulumiType = 'aws:gamelift/fleet:Fleet';
//# sourceMappingURL=fleet.js.map