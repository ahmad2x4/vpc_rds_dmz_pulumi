import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides an Gamelift Build resource.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/gamelift_build.html.markdown.
 */
export declare class Build extends pulumi.CustomResource {
    /**
     * Get an existing Build resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BuildState, opts?: pulumi.CustomResourceOptions): Build;
    /**
     * Returns true if the given object is an instance of Build.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Build;
    /**
     * Gamelift Build ARN.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Name of the build
     */
    readonly name: pulumi.Output<string>;
    /**
     * Operating system that the game server binaries are built to run on. e.g. `WINDOWS_2012` or `AMAZON_LINUX`.
     */
    readonly operatingSystem: pulumi.Output<string>;
    /**
     * Information indicating where your game build files are stored. See below.
     */
    readonly storageLocation: pulumi.Output<outputs.gamelift.BuildStorageLocation>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Version that is associated with this build.
     */
    readonly version: pulumi.Output<string | undefined>;
    /**
     * Create a Build resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BuildArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Build resources.
 */
export interface BuildState {
    /**
     * Gamelift Build ARN.
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * Name of the build
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Operating system that the game server binaries are built to run on. e.g. `WINDOWS_2012` or `AMAZON_LINUX`.
     */
    readonly operatingSystem?: pulumi.Input<string>;
    /**
     * Information indicating where your game build files are stored. See below.
     */
    readonly storageLocation?: pulumi.Input<inputs.gamelift.BuildStorageLocation>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Version that is associated with this build.
     */
    readonly version?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Build resource.
 */
export interface BuildArgs {
    /**
     * Name of the build
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Operating system that the game server binaries are built to run on. e.g. `WINDOWS_2012` or `AMAZON_LINUX`.
     */
    readonly operatingSystem: pulumi.Input<string>;
    /**
     * Information indicating where your game build files are stored. See below.
     */
    readonly storageLocation: pulumi.Input<inputs.gamelift.BuildStorageLocation>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Version that is associated with this build.
     */
    readonly version?: pulumi.Input<string>;
}
