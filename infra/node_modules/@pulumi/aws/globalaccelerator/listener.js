"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Global Accelerator listener.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleAccelerator = new aws.globalaccelerator.Accelerator("example", {
 *     attributes: {
 *         flowLogsEnabled: true,
 *         flowLogsS3Bucket: "example-bucket",
 *         flowLogsS3Prefix: "flow-logs/",
 *     },
 *     enabled: true,
 *     ipAddressType: "IPV4",
 * });
 * const exampleListener = new aws.globalaccelerator.Listener("example", {
 *     acceleratorArn: exampleAccelerator.id,
 *     clientAffinity: "SOURCE_IP",
 *     portRanges: [{
 *         fromPort: 80,
 *         toPort: 80,
 *     }],
 *     protocol: "TCP",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/globalaccelerator_listener.html.markdown.
 */
class Listener extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["acceleratorArn"] = state ? state.acceleratorArn : undefined;
            inputs["clientAffinity"] = state ? state.clientAffinity : undefined;
            inputs["portRanges"] = state ? state.portRanges : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.acceleratorArn === undefined) {
                throw new Error("Missing required property 'acceleratorArn'");
            }
            if (!args || args.portRanges === undefined) {
                throw new Error("Missing required property 'portRanges'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            inputs["acceleratorArn"] = args ? args.acceleratorArn : undefined;
            inputs["clientAffinity"] = args ? args.clientAffinity : undefined;
            inputs["portRanges"] = args ? args.portRanges : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Listener.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Listener(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }
}
exports.Listener = Listener;
/** @internal */
Listener.__pulumiType = 'aws:globalaccelerator/listener:Listener';
//# sourceMappingURL=listener.js.map