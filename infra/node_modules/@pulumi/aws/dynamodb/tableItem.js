"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a DynamoDB table item resource
 *
 * > **Note:** This resource is not meant to be used for managing large amounts of data in your table, it is not designed to scale.
 *   You should perform **regular backups** of all data in the table, see [AWS docs for more](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/BackupRestore.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleTable = new aws.dynamodb.Table("example", {
 *     attributes: [{
 *         name: "exampleHashKey",
 *         type: "S",
 *     }],
 *     hashKey: "exampleHashKey",
 *     readCapacity: 10,
 *     writeCapacity: 10,
 * });
 * const exampleTableItem = new aws.dynamodb.TableItem("example", {
 *     hashKey: exampleTable.hashKey,
 *     item: `{
 *   "exampleHashKey": {"S": "something"},
 *   "one": {"N": "11111"},
 *   "two": {"N": "22222"},
 *   "three": {"N": "33333"},
 *   "four": {"N": "44444"}
 * }
 * `,
 *     tableName: exampleTable.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dynamodb_table_item.html.markdown.
 */
class TableItem extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["hashKey"] = state ? state.hashKey : undefined;
            inputs["item"] = state ? state.item : undefined;
            inputs["rangeKey"] = state ? state.rangeKey : undefined;
            inputs["tableName"] = state ? state.tableName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.hashKey === undefined) {
                throw new Error("Missing required property 'hashKey'");
            }
            if (!args || args.item === undefined) {
                throw new Error("Missing required property 'item'");
            }
            if (!args || args.tableName === undefined) {
                throw new Error("Missing required property 'tableName'");
            }
            inputs["hashKey"] = args ? args.hashKey : undefined;
            inputs["item"] = args ? args.item : undefined;
            inputs["rangeKey"] = args ? args.rangeKey : undefined;
            inputs["tableName"] = args ? args.tableName : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(TableItem.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TableItem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new TableItem(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TableItem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TableItem.__pulumiType;
    }
}
exports.TableItem = TableItem;
/** @internal */
TableItem.__pulumiType = 'aws:dynamodb/tableItem:TableItem';
//# sourceMappingURL=tableItem.js.map