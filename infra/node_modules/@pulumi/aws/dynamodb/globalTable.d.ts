import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides a resource to manage a DynamoDB Global Table. These are layered on top of existing DynamoDB Tables.
 *
 * > Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const usEast1 = new aws.Provider("us-east-1", {
 *     region: "us-east-1",
 * });
 * const usWest2 = new aws.Provider("us-west-2", {
 *     region: "us-west-2",
 * });
 * const us_east_1Table = new aws.dynamodb.Table("us-east-1", {
 *     attributes: [{
 *         name: "myAttribute",
 *         type: "S",
 *     }],
 *     hashKey: "myAttribute",
 *     readCapacity: 1,
 *     streamEnabled: true,
 *     streamViewType: "NEW_AND_OLD_IMAGES",
 *     writeCapacity: 1,
 * }, {provider: us_east_1});
 * const us_west_2Table = new aws.dynamodb.Table("us-west-2", {
 *     attributes: [{
 *         name: "myAttribute",
 *         type: "S",
 *     }],
 *     hashKey: "myAttribute",
 *     readCapacity: 1,
 *     streamEnabled: true,
 *     streamViewType: "NEW_AND_OLD_IMAGES",
 *     writeCapacity: 1,
 * }, {provider: us_west_2});
 * const myTable = new aws.dynamodb.GlobalTable("myTable", {
 *     replicas: [
 *         {
 *             regionName: "us-east-1",
 *         },
 *         {
 *             regionName: "us-west-2",
 *         },
 *     ],
 * }, {provider: us_east_1,dependsOn: [us_east_1Table, us_west_2Table]});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dynamodb_global_table.html.markdown.
 */
export declare class GlobalTable extends pulumi.CustomResource {
    /**
     * Get an existing GlobalTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalTableState, opts?: pulumi.CustomResourceOptions): GlobalTable;
    /**
     * Returns true if the given object is an instance of GlobalTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is GlobalTable;
    /**
     * The ARN of the DynamoDB Global Table
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The name of the global table. Must match underlying DynamoDB Table names in all regions.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Underlying DynamoDB Table. At least 1 replica must be defined. See below.
     */
    readonly replicas: pulumi.Output<outputs.dynamodb.GlobalTableReplica[]>;
    /**
     * Create a GlobalTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalTableArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering GlobalTable resources.
 */
export interface GlobalTableState {
    /**
     * The ARN of the DynamoDB Global Table
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The name of the global table. Must match underlying DynamoDB Table names in all regions.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Underlying DynamoDB Table. At least 1 replica must be defined. See below.
     */
    readonly replicas?: pulumi.Input<pulumi.Input<inputs.dynamodb.GlobalTableReplica>[]>;
}
/**
 * The set of arguments for constructing a GlobalTable resource.
 */
export interface GlobalTableArgs {
    /**
     * The name of the global table. Must match underlying DynamoDB Table names in all regions.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Underlying DynamoDB Table. At least 1 replica must be defined. See below.
     */
    readonly replicas: pulumi.Input<pulumi.Input<inputs.dynamodb.GlobalTableReplica>[]>;
}
