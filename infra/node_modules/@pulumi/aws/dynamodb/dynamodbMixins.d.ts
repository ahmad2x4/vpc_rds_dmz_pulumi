import * as pulumi from "@pulumi/pulumi";
import * as table from "./table";
import * as lambda from "../lambda";
/**
 * Arguments to control the event rule subscription.  Currently empty, but still defined in case of
 * future need.
 */
export interface TableEventSubscriptionArgs {
    /**
     * The largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB.
     */
    readonly batchSize?: number;
    /**
     * The position in the stream where AWS Lambda should start reading. Must be one of either `TRIM_HORIZON` or `LATEST`.
     */
    readonly startingPosition: "TRIM_HORIZON" | "LATEST";
}
export interface TableEvent {
    Records: TableEventRecord[];
}
export interface TableEventRecord {
    awsRegion: string;
    dynamodb: {
        ApproximateCreationDateTime: number;
        Keys: Record<string, any>;
        NewImage?: Record<string, any>;
        OldImage?: Record<string, any>;
        SequenceNumber: string;
        SizeBytes: number;
        StreamViewType: string;
    };
    eventID: string;
    eventName: "INSERT" | "MODIFY" | "REMOVE";
    eventSource: string;
    eventVersion: string;
    userIdentity: {
        PrincipalId: string;
        Type: string;
    };
}
export declare type TableEventHandler = lambda.EventHandler<TableEvent, void>;
export declare class TableEventSubscription extends lambda.EventSubscription {
    readonly table: table.Table;
    readonly eventSourceMapping: lambda.EventSourceMapping;
    constructor(name: string, table: table.Table, handler: TableEventHandler, args: TableEventSubscriptionArgs, opts?: pulumi.ComponentResourceOptions);
}
declare module "./table" {
    interface Table {
        /**
         * Creates a new subscription to events fired from this Table to the handler provided,
         * along with options to control the behavior of the subscription.
         *
         * In order to receive events the [Table] must have been created with the `streamEnabled: true`
         * value as well as an appropriate `streamViewType`.
         */
        onEvent(name: string, handler: TableEventHandler, args: TableEventSubscriptionArgs, opts?: pulumi.ComponentResourceOptions): TableEventSubscription;
    }
}
