"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic Load Balancer resource, also known as a "Classic
 * Load Balancer" after the release of
 * [Application/Network Load Balancers](https://www.terraform.io/docs/providers/aws/r/lb.html).
 *
 * > **NOTE on ELB Instances and ELB Attachments:** This provider currently
 * provides both a standalone ELB Attachment resource
 * (describing an instance attached to an ELB), and an ELB resource with
 * `instances` defined in-line. At this time you cannot use an ELB with in-line
 * instances in conjunction with a ELB Attachment resources. Doing so will cause a
 * conflict and will overwrite attachments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create a new load balancer
 * const bar = new aws.elb.LoadBalancer("bar", {
 *     accessLogs: {
 *         bucket: "foo",
 *         bucketPrefix: "bar",
 *         interval: 60,
 *     },
 *     availabilityZones: [
 *         "us-west-2a",
 *         "us-west-2b",
 *         "us-west-2c",
 *     ],
 *     connectionDraining: true,
 *     connectionDrainingTimeout: 400,
 *     crossZoneLoadBalancing: true,
 *     healthCheck: {
 *         healthyThreshold: 2,
 *         interval: 30,
 *         target: "HTTP:8000/",
 *         timeout: 3,
 *         unhealthyThreshold: 2,
 *     },
 *     idleTimeout: 400,
 *     instances: [aws_instance_foo.id],
 *     listeners: [
 *         {
 *             instancePort: 8000,
 *             instanceProtocol: "http",
 *             lbPort: 80,
 *             lbProtocol: "http",
 *         },
 *         {
 *             instancePort: 8000,
 *             instanceProtocol: "http",
 *             lbPort: 443,
 *             lbProtocol: "https",
 *             sslCertificateId: "arn:aws:iam::123456789012:server-certificate/certName",
 *         },
 *     ],
 *     tags: {
 *         Name: "foobar-elb",
 *     },
 * });
 * ```
 *
 * ## Note on ECDSA Key Algorithm
 *
 * If the ARN of the `sslCertificateId` that is pointed to references a
 * certificate that was signed by an ECDSA key, note that ELB only supports the
 * P256 and P384 curves.  Using a certificate signed by a key using a different
 * curve could produce the error `ERR_SSL_VERSION_OR_CIPHER_MISMATCH` in your
 * browser.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/elb_legacy.html.markdown.
 */
class LoadBalancer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accessLogs"] = state ? state.accessLogs : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["connectionDraining"] = state ? state.connectionDraining : undefined;
            inputs["connectionDrainingTimeout"] = state ? state.connectionDrainingTimeout : undefined;
            inputs["crossZoneLoadBalancing"] = state ? state.crossZoneLoadBalancing : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["healthCheck"] = state ? state.healthCheck : undefined;
            inputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            inputs["instances"] = state ? state.instances : undefined;
            inputs["internal"] = state ? state.internal : undefined;
            inputs["listeners"] = state ? state.listeners : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["sourceSecurityGroup"] = state ? state.sourceSecurityGroup : undefined;
            inputs["sourceSecurityGroupId"] = state ? state.sourceSecurityGroupId : undefined;
            inputs["subnets"] = state ? state.subnets : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.listeners === undefined) {
                throw new Error("Missing required property 'listeners'");
            }
            inputs["accessLogs"] = args ? args.accessLogs : undefined;
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["connectionDraining"] = args ? args.connectionDraining : undefined;
            inputs["connectionDrainingTimeout"] = args ? args.connectionDrainingTimeout : undefined;
            inputs["crossZoneLoadBalancing"] = args ? args.crossZoneLoadBalancing : undefined;
            inputs["healthCheck"] = args ? args.healthCheck : undefined;
            inputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            inputs["instances"] = args ? args.instances : undefined;
            inputs["internal"] = args ? args.internal : undefined;
            inputs["listeners"] = args ? args.listeners : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["sourceSecurityGroup"] = args ? args.sourceSecurityGroup : undefined;
            inputs["subnets"] = args ? args.subnets : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
            inputs["sourceSecurityGroupId"] = undefined /*out*/;
            inputs["zoneId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LoadBalancer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new LoadBalancer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }
}
exports.LoadBalancer = LoadBalancer;
/** @internal */
LoadBalancer.__pulumiType = 'aws:elasticloadbalancing/loadBalancer:LoadBalancer';
//# sourceMappingURL=loadBalancer.js.map