"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a AWS Batch compute environment. Compute environments contain the Amazon ECS container instances that are used to run containerized batch jobs.
 *
 * For information about AWS Batch, see [What is AWS Batch?][1] .
 * For information about compute environment, see [Compute Environments][2] .
 *
 * > **Note:** To prevent a race condition during environment deletion, make sure to set `dependsOn` to the related `aws.iam.RolePolicyAttachment`;
 * otherwise, the policy may be destroyed too soon and the compute environment will then get stuck in the `DELETING` state, see [Troubleshooting AWS Batch][3] .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ecsInstanceRoleRole = new aws.iam.Role("ecsInstanceRole", {
 *     assumeRolePolicy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [
 * 	{
 * 	    "Action": "sts:AssumeRole",
 * 	    "Effect": "Allow",
 * 	    "Principal": {
 * 		"Service": "ec2.amazonaws.com"
 * 	    }
 * 	}
 *     ]
 * }
 * `,
 * });
 * const ecsInstanceRoleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("ecsInstanceRole", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
 *     role: ecsInstanceRoleRole.name,
 * });
 * const ecsInstanceRoleInstanceProfile = new aws.iam.InstanceProfile("ecsInstanceRole", {
 *     role: ecsInstanceRoleRole.name,
 * });
 * const awsBatchServiceRoleRole = new aws.iam.Role("awsBatchServiceRole", {
 *     assumeRolePolicy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [
 * 	{
 * 	    "Action": "sts:AssumeRole",
 * 	    "Effect": "Allow",
 * 	    "Principal": {
 * 		"Service": "batch.amazonaws.com"
 * 	    }
 * 	}
 *     ]
 * }
 * `,
 * });
 * const awsBatchServiceRoleRolePolicyAttachment = new aws.iam.RolePolicyAttachment("awsBatchServiceRole", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole",
 *     role: awsBatchServiceRoleRole.name,
 * });
 * const sampleSecurityGroup = new aws.ec2.SecurityGroup("sample", {
 *     egress: [{
 *         cidrBlocks: ["0.0.0.0/0"],
 *         fromPort: 0,
 *         protocol: "-1",
 *         toPort: 0,
 *     }],
 * });
 * const sampleVpc = new aws.ec2.Vpc("sample", {
 *     cidrBlock: "10.1.0.0/16",
 * });
 * const sampleSubnet = new aws.ec2.Subnet("sample", {
 *     cidrBlock: "10.1.1.0/24",
 *     vpcId: sampleVpc.id,
 * });
 * const sampleComputeEnvironment = new aws.batch.ComputeEnvironment("sample", {
 *     computeEnvironmentName: "sample",
 *     computeResources: {
 *         instanceRole: ecsInstanceRoleInstanceProfile.arn,
 *         instanceTypes: ["c4.large"],
 *         maxVcpus: 16,
 *         minVcpus: 0,
 *         securityGroupIds: [sampleSecurityGroup.id],
 *         subnets: [sampleSubnet.id],
 *         type: "EC2",
 *     },
 *     serviceRole: awsBatchServiceRoleRole.arn,
 *     type: "MANAGED",
 * }, {dependsOn: [awsBatchServiceRoleRolePolicyAttachment]});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/batch_compute_environment.html.markdown.
 */
class ComputeEnvironment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["computeEnvironmentName"] = state ? state.computeEnvironmentName : undefined;
            inputs["computeEnvironmentNamePrefix"] = state ? state.computeEnvironmentNamePrefix : undefined;
            inputs["computeResources"] = state ? state.computeResources : undefined;
            inputs["ecsClusterArn"] = state ? state.ecsClusterArn : undefined;
            inputs["serviceRole"] = state ? state.serviceRole : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["statusReason"] = state ? state.statusReason : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.serviceRole === undefined) {
                throw new Error("Missing required property 'serviceRole'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["computeEnvironmentName"] = args ? args.computeEnvironmentName : undefined;
            inputs["computeEnvironmentNamePrefix"] = args ? args.computeEnvironmentNamePrefix : undefined;
            inputs["computeResources"] = args ? args.computeResources : undefined;
            inputs["serviceRole"] = args ? args.serviceRole : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["ecsClusterArn"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["statusReason"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ComputeEnvironment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ComputeEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ComputeEnvironment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ComputeEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeEnvironment.__pulumiType;
    }
}
exports.ComputeEnvironment = ComputeEnvironment;
/** @internal */
ComputeEnvironment.__pulumiType = 'aws:batch/computeEnvironment:ComputeEnvironment';
//# sourceMappingURL=computeEnvironment.js.map