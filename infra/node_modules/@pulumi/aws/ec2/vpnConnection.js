"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EC2 VPN connection. These objects can be connected to customer gateways, and allow you to establish tunnels between your network and Amazon.
 *
 * > **Note:** All arguments including `tunnel1PresharedKey` and `tunnel2PresharedKey` will be stored in the raw state as plain-text.
 * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * > **Note:** The CIDR blocks in the arguments `tunnel1InsideCidr` and `tunnel2InsideCidr` must have a prefix of /30 and be a part of a specific range.
 * [Read more about this in the AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html).
 *
 * ## Example Usage
 *
 * ### EC2 Transit Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleTransitGateway = new aws.ec2transitgateway.TransitGateway("example", {});
 * const exampleCustomerGateway = new aws.ec2.CustomerGateway("example", {
 *     bgpAsn: 65000,
 *     ipAddress: "172.0.0.1",
 *     type: "ipsec.1",
 * });
 * const exampleVpnConnection = new aws.ec2.VpnConnection("example", {
 *     customerGatewayId: exampleCustomerGateway.id,
 *     transitGatewayId: exampleTransitGateway.id,
 *     type: exampleCustomerGateway.type,
 * });
 * ```
 *
 * ### Virtual Private Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const vpc = new aws.ec2.Vpc("vpc", {
 *     cidrBlock: "10.0.0.0/16",
 * });
 * const vpnGateway = new aws.ec2.VpnGateway("vpnGateway", {
 *     vpcId: vpc.id,
 * });
 * const customerGateway = new aws.ec2.CustomerGateway("customerGateway", {
 *     bgpAsn: 65000,
 *     ipAddress: "172.0.0.1",
 *     type: "ipsec.1",
 * });
 * const main = new aws.ec2.VpnConnection("main", {
 *     customerGatewayId: customerGateway.id,
 *     staticRoutesOnly: true,
 *     type: "ipsec.1",
 *     vpnGatewayId: vpnGateway.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpn_connection.html.markdown.
 */
class VpnConnection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["customerGatewayConfiguration"] = state ? state.customerGatewayConfiguration : undefined;
            inputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            inputs["routes"] = state ? state.routes : undefined;
            inputs["staticRoutesOnly"] = state ? state.staticRoutesOnly : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["transitGatewayAttachmentId"] = state ? state.transitGatewayAttachmentId : undefined;
            inputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
            inputs["tunnel1Address"] = state ? state.tunnel1Address : undefined;
            inputs["tunnel1BgpAsn"] = state ? state.tunnel1BgpAsn : undefined;
            inputs["tunnel1BgpHoldtime"] = state ? state.tunnel1BgpHoldtime : undefined;
            inputs["tunnel1CgwInsideAddress"] = state ? state.tunnel1CgwInsideAddress : undefined;
            inputs["tunnel1InsideCidr"] = state ? state.tunnel1InsideCidr : undefined;
            inputs["tunnel1PresharedKey"] = state ? state.tunnel1PresharedKey : undefined;
            inputs["tunnel1VgwInsideAddress"] = state ? state.tunnel1VgwInsideAddress : undefined;
            inputs["tunnel2Address"] = state ? state.tunnel2Address : undefined;
            inputs["tunnel2BgpAsn"] = state ? state.tunnel2BgpAsn : undefined;
            inputs["tunnel2BgpHoldtime"] = state ? state.tunnel2BgpHoldtime : undefined;
            inputs["tunnel2CgwInsideAddress"] = state ? state.tunnel2CgwInsideAddress : undefined;
            inputs["tunnel2InsideCidr"] = state ? state.tunnel2InsideCidr : undefined;
            inputs["tunnel2PresharedKey"] = state ? state.tunnel2PresharedKey : undefined;
            inputs["tunnel2VgwInsideAddress"] = state ? state.tunnel2VgwInsideAddress : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["vgwTelemetries"] = state ? state.vgwTelemetries : undefined;
            inputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.customerGatewayId === undefined) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            inputs["staticRoutesOnly"] = args ? args.staticRoutesOnly : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            inputs["tunnel1InsideCidr"] = args ? args.tunnel1InsideCidr : undefined;
            inputs["tunnel1PresharedKey"] = args ? args.tunnel1PresharedKey : undefined;
            inputs["tunnel2InsideCidr"] = args ? args.tunnel2InsideCidr : undefined;
            inputs["tunnel2PresharedKey"] = args ? args.tunnel2PresharedKey : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            inputs["customerGatewayConfiguration"] = undefined /*out*/;
            inputs["routes"] = undefined /*out*/;
            inputs["transitGatewayAttachmentId"] = undefined /*out*/;
            inputs["tunnel1Address"] = undefined /*out*/;
            inputs["tunnel1BgpAsn"] = undefined /*out*/;
            inputs["tunnel1BgpHoldtime"] = undefined /*out*/;
            inputs["tunnel1CgwInsideAddress"] = undefined /*out*/;
            inputs["tunnel1VgwInsideAddress"] = undefined /*out*/;
            inputs["tunnel2Address"] = undefined /*out*/;
            inputs["tunnel2BgpAsn"] = undefined /*out*/;
            inputs["tunnel2BgpHoldtime"] = undefined /*out*/;
            inputs["tunnel2CgwInsideAddress"] = undefined /*out*/;
            inputs["tunnel2VgwInsideAddress"] = undefined /*out*/;
            inputs["vgwTelemetries"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VpnConnection.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new VpnConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }
}
exports.VpnConnection = VpnConnection;
/** @internal */
VpnConnection.__pulumiType = 'aws:ec2/vpnConnection:VpnConnection';
//# sourceMappingURL=vpnConnection.js.map