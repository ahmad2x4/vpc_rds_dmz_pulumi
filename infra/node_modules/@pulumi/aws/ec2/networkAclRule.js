"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates an entry (a rule) in a network ACL with the specified rule number.
 *
 * > **NOTE on Network ACLs and Network ACL Rules:** This provider currently
 * provides both a standalone Network ACL Rule resource and a Network ACL resource with rules
 * defined in-line. At this time you cannot use a Network ACL with in-line rules
 * in conjunction with any Network ACL Rule resources. Doing so will cause
 * a conflict of rule settings and will overwrite rules.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const barNetworkAcl = new aws.ec2.NetworkAcl("bar", {
 *     vpcId: aws_vpc_foo.id,
 * });
 * const barNetworkAclRule = new aws.ec2.NetworkAclRule("bar", {
 *     // Opening to 0.0.0.0/0 can lead to security vulnerabilities.
 *     cidrBlock: "", // add a CIDR block here
 *     egress: false,
 *     fromPort: 22,
 *     networkAclId: barNetworkAcl.id,
 *     protocol: "tcp",
 *     ruleAction: "allow",
 *     ruleNumber: 200,
 *     toPort: 22,
 * });
 * ```
 *
 * > **Note:** One of either `cidrBlock` or `ipv6CidrBlock` is required.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/network_acl_rule.html.markdown.
 */
class NetworkAclRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            inputs["egress"] = state ? state.egress : undefined;
            inputs["fromPort"] = state ? state.fromPort : undefined;
            inputs["icmpCode"] = state ? state.icmpCode : undefined;
            inputs["icmpType"] = state ? state.icmpType : undefined;
            inputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            inputs["networkAclId"] = state ? state.networkAclId : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["ruleAction"] = state ? state.ruleAction : undefined;
            inputs["ruleNumber"] = state ? state.ruleNumber : undefined;
            inputs["toPort"] = state ? state.toPort : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.networkAclId === undefined) {
                throw new Error("Missing required property 'networkAclId'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            if (!args || args.ruleAction === undefined) {
                throw new Error("Missing required property 'ruleAction'");
            }
            if (!args || args.ruleNumber === undefined) {
                throw new Error("Missing required property 'ruleNumber'");
            }
            inputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            inputs["egress"] = args ? args.egress : undefined;
            inputs["fromPort"] = args ? args.fromPort : undefined;
            inputs["icmpCode"] = args ? args.icmpCode : undefined;
            inputs["icmpType"] = args ? args.icmpType : undefined;
            inputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            inputs["networkAclId"] = args ? args.networkAclId : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["ruleAction"] = args ? args.ruleAction : undefined;
            inputs["ruleNumber"] = args ? args.ruleNumber : undefined;
            inputs["toPort"] = args ? args.toPort : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NetworkAclRule.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing NetworkAclRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new NetworkAclRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkAclRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkAclRule.__pulumiType;
    }
}
exports.NetworkAclRule = NetworkAclRule;
/** @internal */
NetworkAclRule.__pulumiType = 'aws:ec2/networkAclRule:NetworkAclRule';
//# sourceMappingURL=networkAclRule.js.map