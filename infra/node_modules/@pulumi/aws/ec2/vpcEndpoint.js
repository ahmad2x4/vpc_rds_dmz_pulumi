"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a VPC Endpoint resource.
 *
 * > **NOTE on VPC Endpoints and VPC Endpoint Associations:** This provider provides both standalone VPC Endpoint Associations for
 * Route Tables - (an association between a VPC endpoint and a single `routeTableId`) and
 * Subnets - (an association between a VPC endpoint and a single `subnetId`) and
 * a VPC Endpoint resource with `routeTableIds` and `subnetIds` attributes.
 * Do not use the same resource ID in both a VPC Endpoint resource and a VPC Endpoint Association resource.
 * Doing so will cause a conflict of associations and will overwrite the association.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const s3 = new aws.ec2.VpcEndpoint("s3", {
 *     serviceName: "com.amazonaws.us-west-2.s3",
 *     vpcId: aws_vpc_main.id,
 * });
 * ```
 *
 * ### Basic w/ Tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const s3 = new aws.ec2.VpcEndpoint("s3", {
 *     serviceName: "com.amazonaws.us-west-2.s3",
 *     tags: {
 *         Environment: "test",
 *     },
 *     vpcId: aws_vpc_main.id,
 * });
 * ```
 *
 * ### Interface Endpoint Type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ec2 = new aws.ec2.VpcEndpoint("ec2", {
 *     privateDnsEnabled: true,
 *     securityGroupIds: [aws_security_group_sg1.id],
 *     serviceName: "com.amazonaws.us-west-2.ec2",
 *     vpcEndpointType: "Interface",
 *     vpcId: aws_vpc_main.id,
 * });
 * ```
 *
 * ### Custom Service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ptfeServiceVpcEndpoint = new aws.ec2.VpcEndpoint("ptfeService", {
 *     privateDnsEnabled: false,
 *     securityGroupIds: [aws_security_group_ptfe_service.id],
 *     serviceName: var_ptfe_service,
 *     subnetIds: [localSubnetIds],
 *     vpcEndpointType: "Interface",
 *     vpcId: var_vpc_id,
 * });
 * const internal = aws.route53.getZone({
 *     name: "vpc.internal.",
 *     privateZone: true,
 *     vpcId: var_vpc_id,
 * });
 * const ptfeServiceRecord = new aws.route53.Record("ptfeService", {
 *     name: `ptfe.${internal.name!}`,
 *     records: [ptfeServiceVpcEndpoint.dnsEntries.apply(dnsEntries => (<any>dnsEntries[0])["dnsName"])],
 *     ttl: 300,
 *     type: "CNAME",
 *     zoneId: internal.zoneId!,
 * });
 * ```
 *
 * > **NOTE The `dnsEntry` output is a list of maps:** This provider interpolation support for lists of maps requires the `lookup` and `[]` until full support of lists of maps is available
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_endpoint.html.markdown.
 */
class VpcEndpoint extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["autoAccept"] = state ? state.autoAccept : undefined;
            inputs["cidrBlocks"] = state ? state.cidrBlocks : undefined;
            inputs["dnsEntries"] = state ? state.dnsEntries : undefined;
            inputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["prefixListId"] = state ? state.prefixListId : undefined;
            inputs["privateDnsEnabled"] = state ? state.privateDnsEnabled : undefined;
            inputs["requesterManaged"] = state ? state.requesterManaged : undefined;
            inputs["routeTableIds"] = state ? state.routeTableIds : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcEndpointType"] = state ? state.vpcEndpointType : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.serviceName === undefined) {
                throw new Error("Missing required property 'serviceName'");
            }
            if (!args || args.vpcId === undefined) {
                throw new Error("Missing required property 'vpcId'");
            }
            inputs["autoAccept"] = args ? args.autoAccept : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["privateDnsEnabled"] = args ? args.privateDnsEnabled : undefined;
            inputs["routeTableIds"] = args ? args.routeTableIds : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["serviceName"] = args ? args.serviceName : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcEndpointType"] = args ? args.vpcEndpointType : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["cidrBlocks"] = undefined /*out*/;
            inputs["dnsEntries"] = undefined /*out*/;
            inputs["networkInterfaceIds"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["prefixListId"] = undefined /*out*/;
            inputs["requesterManaged"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VpcEndpoint.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VpcEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new VpcEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpcEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpoint.__pulumiType;
    }
}
exports.VpcEndpoint = VpcEndpoint;
/** @internal */
VpcEndpoint.__pulumiType = 'aws:ec2/vpcEndpoint:VpcEndpoint';
//# sourceMappingURL=vpcEndpoint.js.map