"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an EC2 Spot Fleet Request resource. This allows a fleet of Spot
 * instances to be requested on the Spot market.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Request a Spot fleet
 * const cheapCompute = new aws.ec2.SpotFleetRequest("cheapCompute", {
 *     allocationStrategy: "diversified",
 *     iamFleetRole: "arn:aws:iam::12345678:role/spot-fleet",
 *     launchSpecifications: [
 *         {
 *             ami: "ami-1234",
 *             iamInstanceProfileArn: aws_iam_instance_profile_example.arn,
 *             instanceType: "m4.10xlarge",
 *             placementTenancy: "dedicated",
 *             spotPrice: "2.793",
 *         },
 *         {
 *             ami: "ami-5678",
 *             availabilityZone: "us-west-1a",
 *             iamInstanceProfileArn: aws_iam_instance_profile_example.arn,
 *             instanceType: "m4.4xlarge",
 *             keyName: "my-key",
 *             rootBlockDevices: [{
 *                 volumeSize: 300,
 *                 volumeType: "gp2",
 *             }],
 *             spotPrice: "1.117",
 *             subnetId: "subnet-1234",
 *             tags: {
 *                 Name: "spot-fleet-example",
 *             },
 *             weightedCapacity: "35",
 *         },
 *     ],
 *     spotPrice: "0.03",
 *     targetCapacity: 6,
 *     validUntil: "2019-11-04T20:44:20Z",
 * });
 * ```
 *
 * > **NOTE:** This provider does not support the functionality where multiple `subnetId` or `availabilityZone` parameters can be specified in the same
 * launch configuration block. If you want to specify multiple values, then separate launch configuration blocks should be used:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ec2.SpotFleetRequest("foo", {
 *     iamFleetRole: "arn:aws:iam::12345678:role/spot-fleet",
 *     launchSpecifications: [
 *         {
 *             ami: "ami-d06a90b0",
 *             availabilityZone: "us-west-2a",
 *             instanceType: "m1.small",
 *             keyName: "my-key",
 *         },
 *         {
 *             ami: "ami-d06a90b0",
 *             availabilityZone: "us-west-2a",
 *             instanceType: "m5.large",
 *             keyName: "my-key",
 *         },
 *     ],
 *     spotPrice: "0.005",
 *     targetCapacity: 2,
 *     validUntil: "2019-11-04T20:44:20Z",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/spot_fleet_request.html.markdown.
 */
class SpotFleetRequest extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["allocationStrategy"] = state ? state.allocationStrategy : undefined;
            inputs["clientToken"] = state ? state.clientToken : undefined;
            inputs["excessCapacityTerminationPolicy"] = state ? state.excessCapacityTerminationPolicy : undefined;
            inputs["fleetType"] = state ? state.fleetType : undefined;
            inputs["iamFleetRole"] = state ? state.iamFleetRole : undefined;
            inputs["instanceInterruptionBehaviour"] = state ? state.instanceInterruptionBehaviour : undefined;
            inputs["instancePoolsToUseCount"] = state ? state.instancePoolsToUseCount : undefined;
            inputs["launchSpecifications"] = state ? state.launchSpecifications : undefined;
            inputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            inputs["replaceUnhealthyInstances"] = state ? state.replaceUnhealthyInstances : undefined;
            inputs["spotPrice"] = state ? state.spotPrice : undefined;
            inputs["spotRequestState"] = state ? state.spotRequestState : undefined;
            inputs["targetCapacity"] = state ? state.targetCapacity : undefined;
            inputs["targetGroupArns"] = state ? state.targetGroupArns : undefined;
            inputs["terminateInstancesWithExpiration"] = state ? state.terminateInstancesWithExpiration : undefined;
            inputs["validFrom"] = state ? state.validFrom : undefined;
            inputs["validUntil"] = state ? state.validUntil : undefined;
            inputs["waitForFulfillment"] = state ? state.waitForFulfillment : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.iamFleetRole === undefined) {
                throw new Error("Missing required property 'iamFleetRole'");
            }
            if (!args || args.launchSpecifications === undefined) {
                throw new Error("Missing required property 'launchSpecifications'");
            }
            if (!args || args.targetCapacity === undefined) {
                throw new Error("Missing required property 'targetCapacity'");
            }
            inputs["allocationStrategy"] = args ? args.allocationStrategy : undefined;
            inputs["excessCapacityTerminationPolicy"] = args ? args.excessCapacityTerminationPolicy : undefined;
            inputs["fleetType"] = args ? args.fleetType : undefined;
            inputs["iamFleetRole"] = args ? args.iamFleetRole : undefined;
            inputs["instanceInterruptionBehaviour"] = args ? args.instanceInterruptionBehaviour : undefined;
            inputs["instancePoolsToUseCount"] = args ? args.instancePoolsToUseCount : undefined;
            inputs["launchSpecifications"] = args ? args.launchSpecifications : undefined;
            inputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            inputs["replaceUnhealthyInstances"] = args ? args.replaceUnhealthyInstances : undefined;
            inputs["spotPrice"] = args ? args.spotPrice : undefined;
            inputs["targetCapacity"] = args ? args.targetCapacity : undefined;
            inputs["targetGroupArns"] = args ? args.targetGroupArns : undefined;
            inputs["terminateInstancesWithExpiration"] = args ? args.terminateInstancesWithExpiration : undefined;
            inputs["validFrom"] = args ? args.validFrom : undefined;
            inputs["validUntil"] = args ? args.validUntil : undefined;
            inputs["waitForFulfillment"] = args ? args.waitForFulfillment : undefined;
            inputs["clientToken"] = undefined /*out*/;
            inputs["spotRequestState"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SpotFleetRequest.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SpotFleetRequest resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new SpotFleetRequest(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SpotFleetRequest.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpotFleetRequest.__pulumiType;
    }
}
exports.SpotFleetRequest = SpotFleetRequest;
/** @internal */
SpotFleetRequest.__pulumiType = 'aws:ec2/spotFleetRequest:SpotFleetRequest';
//# sourceMappingURL=spotFleetRequest.js.map