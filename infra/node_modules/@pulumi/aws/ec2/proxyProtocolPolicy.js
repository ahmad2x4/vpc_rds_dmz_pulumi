"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a proxy protocol policy, which allows an ELB to carry a client connection information to a backend.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const lb = new aws.elb.LoadBalancer("lb", {
 *     availabilityZones: ["us-east-1a"],
 *     listeners: [
 *         {
 *             instancePort: 25,
 *             instanceProtocol: "tcp",
 *             lbPort: 25,
 *             lbProtocol: "tcp",
 *         },
 *         {
 *             instancePort: 587,
 *             instanceProtocol: "tcp",
 *             lbPort: 587,
 *             lbProtocol: "tcp",
 *         },
 *     ],
 * });
 * const smtp = new aws.ec2.ProxyProtocolPolicy("smtp", {
 *     instancePorts: [
 *         "25",
 *         "587",
 *     ],
 *     loadBalancer: lb.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/proxy_protocol_policy.html.markdown.
 */
class ProxyProtocolPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["instancePorts"] = state ? state.instancePorts : undefined;
            inputs["loadBalancer"] = state ? state.loadBalancer : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.instancePorts === undefined) {
                throw new Error("Missing required property 'instancePorts'");
            }
            if (!args || args.loadBalancer === undefined) {
                throw new Error("Missing required property 'loadBalancer'");
            }
            inputs["instancePorts"] = args ? args.instancePorts : undefined;
            inputs["loadBalancer"] = args ? args.loadBalancer : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProxyProtocolPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ProxyProtocolPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ProxyProtocolPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProxyProtocolPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProxyProtocolPolicy.__pulumiType;
    }
}
exports.ProxyProtocolPolicy = ProxyProtocolPolicy;
/** @internal */
ProxyProtocolPolicy.__pulumiType = 'aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy';
//# sourceMappingURL=proxyProtocolPolicy.js.map