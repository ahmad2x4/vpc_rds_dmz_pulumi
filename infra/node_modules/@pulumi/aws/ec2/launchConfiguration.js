"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to create a new launch configuration, used for autoscaling groups.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ubuntu = aws.getAmi({
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"],
 *         },
 *         {
 *             name: "virtualization-type",
 *             values: ["hvm"],
 *         },
 *     ],
 *     mostRecent: true,
 *     owners: ["099720109477"], // Canonical
 * });
 * const asConf = new aws.ec2.LaunchConfiguration("asConf", {
 *     imageId: ubuntu.id,
 *     instanceType: "t2.micro",
 * });
 * ```
 *
 * ## Using with AutoScaling Groups
 *
 * Launch Configurations cannot be updated after creation with the Amazon
 * Web Service API. In order to update a Launch Configuration, this provider will
 * destroy the existing resource and create a replacement. In order to effectively
 * use a Launch Configuration resource with an [AutoScaling Group resource][1],
 * it's recommended to specify `createBeforeDestroy` in a [lifecycle][2] block.
 * Either omit the Launch Configuration `name` attribute, or specify a partial name
 * with `namePrefix`.  Example:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ubuntu = aws.getAmi({
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"],
 *         },
 *         {
 *             name: "virtualization-type",
 *             values: ["hvm"],
 *         },
 *     ],
 *     mostRecent: true,
 *     owners: ["099720109477"], // Canonical
 * });
 * const asConf = new aws.ec2.LaunchConfiguration("asConf", {
 *     imageId: ubuntu.id,
 *     instanceType: "t2.micro",
 *     namePrefix: "lc-example-",
 * });
 * const bar = new aws.autoscaling.Group("bar", {
 *     launchConfiguration: asConf.name,
 *     maxSize: 2,
 *     minSize: 1,
 * });
 * ```
 *
 * With this setup this provider generates a unique name for your Launch
 * Configuration and can then update the AutoScaling Group without conflict before
 * destroying the previous Launch Configuration.
 *
 * ## Using with Spot Instances
 *
 * Launch configurations can set the spot instance pricing to be used for the
 * Auto Scaling Group to reserve instances. Simply specifying the `spotPrice`
 * parameter will set the price on the Launch Configuration which will attempt to
 * reserve your instances at this price.  See the [AWS Spot Instance
 * documentation](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html)
 * for more information or how to launch [Spot Instances][3] with this provider.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const ubuntu = aws.getAmi({
 *     filters: [
 *         {
 *             name: "name",
 *             values: ["ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*"],
 *         },
 *         {
 *             name: "virtualization-type",
 *             values: ["hvm"],
 *         },
 *     ],
 *     mostRecent: true,
 *     owners: ["099720109477"], // Canonical
 * });
 * const asConf = new aws.ec2.LaunchConfiguration("asConf", {
 *     imageId: ubuntu.id,
 *     instanceType: "m4.large",
 *     spotPrice: "0.001",
 * });
 * const bar = new aws.autoscaling.Group("bar", {
 *     launchConfiguration: asConf.name,
 * });
 * ```
 *
 * ## Block devices
 *
 * Each of the `*_block_device` attributes controls a portion of the AWS
 * Launch Configuration's "Block Device Mapping". It's a good idea to familiarize yourself with [AWS's Block Device
 * Mapping docs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
 * to understand the implications of using these attributes.
 *
 * The `rootBlockDevice` mapping supports the following:
 *
 * * `volumeType` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volumeSize` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volumeType` of `"io1"`.
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 * * `encrypted` - (Optional) Whether the volume should be encrypted or not. (Default: `false`).
 *
 * Modifying any of the `rootBlockDevice` settings requires resource
 * replacement.
 *
 * Each `ebsBlockDevice` supports the following:
 *
 * * `deviceName` - (Required) The name of the device to mount.
 * * `snapshotId` - (Optional) The Snapshot ID to mount.
 * * `volumeType` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volumeSize` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volumeType` of `"io1"`.
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 * * `encrypted` - (Optional) Whether the volume should be encrypted or not. Do not use this option if you are using `snapshotId` as the encrypted flag will be determined by the snapshot. (Default: `false`).
 *
 * Modifying any `ebsBlockDevice` currently requires resource replacement.
 *
 * Each `ephemeralBlockDevice` supports the following:
 *
 * * `deviceName` - The name of the block device to mount on the instance.
 * * `virtualName` - The [Instance Store Device
 *   Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
 *   (e.g. `"ephemeral0"`)
 *
 * Each AWS Instance type has a different set of Instance Store block devices
 * available for attachment. AWS [publishes a
 * list](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes)
 * of which ephemeral devices are available on each type. The devices are always
 * identified by the `virtualName` in the format `"ephemeral{0..N}"`.
 *
 * > **NOTE:** Changes to `*_block_device` configuration of _existing_ resources
 * cannot currently be detected by this provider. After updating to block device
 * configuration, resource recreation can be manually triggered by using the
 * [`taint` command](https://www.terraform.io/docs/commands/taint.html).
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/launch_configuration.html.markdown.
 */
class LaunchConfiguration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["associatePublicIpAddress"] = state ? state.associatePublicIpAddress : undefined;
            inputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            inputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            inputs["enableMonitoring"] = state ? state.enableMonitoring : undefined;
            inputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            inputs["iamInstanceProfile"] = state ? state.iamInstanceProfile : undefined;
            inputs["imageId"] = state ? state.imageId : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["keyName"] = state ? state.keyName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["placementTenancy"] = state ? state.placementTenancy : undefined;
            inputs["rootBlockDevice"] = state ? state.rootBlockDevice : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["spotPrice"] = state ? state.spotPrice : undefined;
            inputs["userData"] = state ? state.userData : undefined;
            inputs["userDataBase64"] = state ? state.userDataBase64 : undefined;
            inputs["vpcClassicLinkId"] = state ? state.vpcClassicLinkId : undefined;
            inputs["vpcClassicLinkSecurityGroups"] = state ? state.vpcClassicLinkSecurityGroups : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.imageId === undefined) {
                throw new Error("Missing required property 'imageId'");
            }
            if (!args || args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            inputs["associatePublicIpAddress"] = args ? args.associatePublicIpAddress : undefined;
            inputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            inputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            inputs["enableMonitoring"] = args ? args.enableMonitoring : undefined;
            inputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            inputs["iamInstanceProfile"] = args ? args.iamInstanceProfile : undefined;
            inputs["imageId"] = args ? args.imageId : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["keyName"] = args ? args.keyName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["placementTenancy"] = args ? args.placementTenancy : undefined;
            inputs["rootBlockDevice"] = args ? args.rootBlockDevice : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["spotPrice"] = args ? args.spotPrice : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["userDataBase64"] = args ? args.userDataBase64 : undefined;
            inputs["vpcClassicLinkId"] = args ? args.vpcClassicLinkId : undefined;
            inputs["vpcClassicLinkSecurityGroups"] = args ? args.vpcClassicLinkSecurityGroups : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LaunchConfiguration.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LaunchConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new LaunchConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LaunchConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LaunchConfiguration.__pulumiType;
    }
}
exports.LaunchConfiguration = LaunchConfiguration;
/** @internal */
LaunchConfiguration.__pulumiType = 'aws:ec2/launchConfiguration:LaunchConfiguration';
//# sourceMappingURL=launchConfiguration.js.map