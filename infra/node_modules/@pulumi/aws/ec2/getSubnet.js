"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * `aws.ec2.Subnet` provides details about a specific VPC subnet.
 *
 * This resource can prove useful when a module accepts a subnet id as
 * an input variable and needs to, for example, determine the id of the
 * VPC that the subnet belongs to.
 *
 * ## Example Usage
 *
 * The following example shows how one might accept a subnet id as a variable
 * and use this data source to obtain the data necessary to create a security
 * group that allows connections from hosts in that subnet.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const subnetId = config.require("subnetId");
 *
 * const selected = aws.ec2.getSubnet({
 *     id: subnetId,
 * });
 * const subnet = new aws.ec2.SecurityGroup("subnet", {
 *     ingress: [{
 *         cidrBlocks: [selected.cidrBlock!],
 *         fromPort: 80,
 *         protocol: "tcp",
 *         toPort: 80,
 *     }],
 *     vpcId: selected.vpcId!,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/subnet.html.markdown.
 */
function getSubnet(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise = pulumi.runtime.invoke("aws:ec2/getSubnet:getSubnet", {
        "availabilityZone": args.availabilityZone,
        "availabilityZoneId": args.availabilityZoneId,
        "cidrBlock": args.cidrBlock,
        "defaultForAz": args.defaultForAz,
        "filters": args.filters,
        "id": args.id,
        "ipv6CidrBlock": args.ipv6CidrBlock,
        "state": args.state,
        "tags": args.tags,
        "vpcId": args.vpcId,
    }, opts);
    return pulumi.utils.liftProperties(promise, opts);
}
exports.getSubnet = getSubnet;
//# sourceMappingURL=getSubnet.js.map