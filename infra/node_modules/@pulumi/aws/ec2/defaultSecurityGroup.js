"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage the default AWS Security Group.
 *
 * For EC2 Classic accounts, each region comes with a Default Security Group.
 * Additionally, each VPC created in AWS comes with a Default Security Group that can be managed, but not
 * destroyed. **This is an advanced resource**, and has special caveats to be aware
 * of when using it. Please read this document in its entirety before using this
 * resource.
 *
 * The `aws.ec2.DefaultSecurityGroup` behaves differently from normal resources, in that
 * this provider does not _create_ this resource, but instead "adopts" it
 * into management. We can do this because these default security groups cannot be
 * destroyed, and are created with a known set of default ingress/egress rules.
 *
 * When this provider first adopts the Default Security Group, it **immediately removes all
 * ingress and egress rules in the Security Group**. It then proceeds to create any rules specified in the
 * configuration. This step is required so that only the rules specified in the
 * configuration are created.
 *
 * This resource treats its inline rules as absolute; only the rules defined
 * inline are created, and any additions/removals external to this resource will
 * result in diff shown. For these reasons, this resource is incompatible with the
 * `aws.ec2.SecurityGroupRule` resource.
 *
 * For more information about Default Security Groups, see the AWS Documentation on
 * [Default Security Groups][aws-default-security-groups].
 *
 * ## Basic Example Usage, with default rules
 *
 * The following config gives the Default Security Group the same rules that AWS
 * provides by default, but pulls the resource under management by this provider. This means that
 * any ingress or egress rules added or changed will be detected as drift.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mainvpc = new aws.ec2.Vpc("mainvpc", {
 *     cidrBlock: "10.1.0.0/16",
 * });
 * const defaultDefaultSecurityGroup = new aws.ec2.DefaultSecurityGroup("default", {
 *     egress: [{
 *         cidrBlocks: ["0.0.0.0/0"],
 *         fromPort: 0,
 *         protocol: "-1",
 *         toPort: 0,
 *     }],
 *     ingress: [{
 *         fromPort: 0,
 *         protocol: "-1",
 *         self: true,
 *         toPort: 0,
 *     }],
 *     vpcId: mainvpc.id,
 * });
 * ```
 *
 * ## Example config to deny all Egress traffic, allowing Ingress
 *
 * The following denies all Egress traffic by omitting any `egress` rules, while
 * including the default `ingress` rule to allow all traffic.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mainvpc = new aws.ec2.Vpc("mainvpc", {
 *     cidrBlock: "10.1.0.0/16",
 * });
 * const defaultDefaultSecurityGroup = new aws.ec2.DefaultSecurityGroup("default", {
 *     ingress: [{
 *         fromPort: 0,
 *         protocol: "-1",
 *         self: true,
 *         toPort: 0,
 *     }],
 *     vpcId: mainvpc.id,
 * });
 * ```
 *
 * ## Usage
 *
 * With the exceptions mentioned above, `aws.ec2.DefaultSecurityGroup` should
 * identical behavior to `aws.ec2.SecurityGroup`. Please consult [AWS_SECURITY_GROUP](https://www.terraform.io/docs/providers/aws/r/security_group.html)
 * for further usage documentation.
 *
 * ### Removing `aws.ec2.DefaultSecurityGroup` from your configuration
 *
 * Each AWS VPC (or region, if using EC2 Classic) comes with a Default Security
 * Group that cannot be deleted. The `aws.ec2.DefaultSecurityGroup` allows you to
 * manage this Security Group, but this provider cannot destroy it. Removing this resource
 * from your configuration will remove it from your statefile and management, but
 * will not destroy the Security Group. All ingress or egress rules will be left as
 * they are at the time of removal. You can resume managing them via the AWS Console.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/default_security_group.html.markdown.
 */
class DefaultSecurityGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["egress"] = state ? state.egress : undefined;
            inputs["ingress"] = state ? state.ingress : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["revokeRulesOnDelete"] = state ? state.revokeRulesOnDelete : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            inputs["egress"] = args ? args.egress : undefined;
            inputs["ingress"] = args ? args.ingress : undefined;
            inputs["revokeRulesOnDelete"] = args ? args.revokeRulesOnDelete : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DefaultSecurityGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DefaultSecurityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new DefaultSecurityGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DefaultSecurityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultSecurityGroup.__pulumiType;
    }
}
exports.DefaultSecurityGroup = DefaultSecurityGroup;
/** @internal */
DefaultSecurityGroup.__pulumiType = 'aws:ec2/defaultSecurityGroup:DefaultSecurityGroup';
//# sourceMappingURL=defaultSecurityGroup.js.map