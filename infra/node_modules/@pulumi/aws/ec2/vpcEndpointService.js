"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a VPC Endpoint Service resource.
 * Service consumers can create an _Interface_ VPC Endpoint to connect to the service.
 *
 * > **NOTE on VPC Endpoint Services and VPC Endpoint Service Allowed Principals:** This provider provides
 * both a standalone VPC Endpoint Service Allowed Principal resource
 * and a VPC Endpoint Service resource with an `allowedPrincipals` attribute. Do not use the same principal ARN in both
 * a VPC Endpoint Service resource and a VPC Endpoint Service Allowed Principal resource. Doing so will cause a conflict
 * and will overwrite the association.
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.VpcEndpointService("example", {
 *     acceptanceRequired: false,
 *     networkLoadBalancerArns: [aws_lb_example.arn],
 * });
 * ```
 *
 * ### Basic w/ Tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.VpcEndpointService("example", {
 *     acceptanceRequired: false,
 *     networkLoadBalancerArns: [aws_lb_example.arn],
 *     tags: {
 *         Environment: "test",
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_endpoint_service.html.markdown.
 */
class VpcEndpointService extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["acceptanceRequired"] = state ? state.acceptanceRequired : undefined;
            inputs["allowedPrincipals"] = state ? state.allowedPrincipals : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["baseEndpointDnsNames"] = state ? state.baseEndpointDnsNames : undefined;
            inputs["managesVpcEndpoints"] = state ? state.managesVpcEndpoints : undefined;
            inputs["networkLoadBalancerArns"] = state ? state.networkLoadBalancerArns : undefined;
            inputs["privateDnsName"] = state ? state.privateDnsName : undefined;
            inputs["serviceName"] = state ? state.serviceName : undefined;
            inputs["serviceType"] = state ? state.serviceType : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.acceptanceRequired === undefined) {
                throw new Error("Missing required property 'acceptanceRequired'");
            }
            if (!args || args.networkLoadBalancerArns === undefined) {
                throw new Error("Missing required property 'networkLoadBalancerArns'");
            }
            inputs["acceptanceRequired"] = args ? args.acceptanceRequired : undefined;
            inputs["allowedPrincipals"] = args ? args.allowedPrincipals : undefined;
            inputs["networkLoadBalancerArns"] = args ? args.networkLoadBalancerArns : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["availabilityZones"] = undefined /*out*/;
            inputs["baseEndpointDnsNames"] = undefined /*out*/;
            inputs["managesVpcEndpoints"] = undefined /*out*/;
            inputs["privateDnsName"] = undefined /*out*/;
            inputs["serviceName"] = undefined /*out*/;
            inputs["serviceType"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VpcEndpointService.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VpcEndpointService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new VpcEndpointService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpcEndpointService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpointService.__pulumiType;
    }
}
exports.VpcEndpointService = VpcEndpointService;
/** @internal */
VpcEndpointService.__pulumiType = 'aws:ec2/vpcEndpointService:VpcEndpointService';
//# sourceMappingURL=vpcEndpointService.js.map