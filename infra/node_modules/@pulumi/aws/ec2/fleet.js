"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage EC2 Fleets.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.Fleet("example", {
 *     launchTemplateConfig: {
 *         launchTemplateSpecification: {
 *             launchTemplateId: aws_launch_template_example.id,
 *             version: aws_launch_template_example.latestVersion,
 *         },
 *     },
 *     targetCapacitySpecification: {
 *         defaultTargetCapacityType: "spot",
 *         totalTargetCapacity: 5,
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ec2_fleet.html.markdown.
 */
class Fleet extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["excessCapacityTerminationPolicy"] = state ? state.excessCapacityTerminationPolicy : undefined;
            inputs["launchTemplateConfig"] = state ? state.launchTemplateConfig : undefined;
            inputs["onDemandOptions"] = state ? state.onDemandOptions : undefined;
            inputs["replaceUnhealthyInstances"] = state ? state.replaceUnhealthyInstances : undefined;
            inputs["spotOptions"] = state ? state.spotOptions : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["targetCapacitySpecification"] = state ? state.targetCapacitySpecification : undefined;
            inputs["terminateInstances"] = state ? state.terminateInstances : undefined;
            inputs["terminateInstancesWithExpiration"] = state ? state.terminateInstancesWithExpiration : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.launchTemplateConfig === undefined) {
                throw new Error("Missing required property 'launchTemplateConfig'");
            }
            if (!args || args.targetCapacitySpecification === undefined) {
                throw new Error("Missing required property 'targetCapacitySpecification'");
            }
            inputs["excessCapacityTerminationPolicy"] = args ? args.excessCapacityTerminationPolicy : undefined;
            inputs["launchTemplateConfig"] = args ? args.launchTemplateConfig : undefined;
            inputs["onDemandOptions"] = args ? args.onDemandOptions : undefined;
            inputs["replaceUnhealthyInstances"] = args ? args.replaceUnhealthyInstances : undefined;
            inputs["spotOptions"] = args ? args.spotOptions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetCapacitySpecification"] = args ? args.targetCapacitySpecification : undefined;
            inputs["terminateInstances"] = args ? args.terminateInstances : undefined;
            inputs["terminateInstancesWithExpiration"] = args ? args.terminateInstancesWithExpiration : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Fleet.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Fleet(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }
}
exports.Fleet = Fleet;
/** @internal */
Fleet.__pulumiType = 'aws:ec2/fleet:Fleet';
//# sourceMappingURL=fleet.js.map