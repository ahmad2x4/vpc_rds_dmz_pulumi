"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * `aws.ec2.Route` provides details about a specific Route.
 *
 * This resource can prove useful when finding the resource
 * associated with a CIDR. For example, finding the peering
 * connection associated with a CIDR value.
 *
 * ## Example Usage
 *
 * The following example shows how one might use a CIDR value to find a network interface id
 * and use this to create a data source of that network interface.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const subnetId = config.require("subnetId");
 *
 * const selected = aws.ec2.getRouteTable({
 *     subnetId: subnetId,
 * });
 * const route = aws_route_table_selected.id.apply(id => aws.ec2.getRoute({
 *     destinationCidrBlock: "10.0.1.0/24",
 *     routeTableId: id,
 * }));
 * const interfaceNetworkInterface = route.apply(route => aws.ec2.getNetworkInterface({
 *     networkInterfaceId: route.networkInterfaceId!,
 * }));
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/route.html.markdown.
 */
function getRoute(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise = pulumi.runtime.invoke("aws:ec2/getRoute:getRoute", {
        "destinationCidrBlock": args.destinationCidrBlock,
        "destinationIpv6CidrBlock": args.destinationIpv6CidrBlock,
        "egressOnlyGatewayId": args.egressOnlyGatewayId,
        "gatewayId": args.gatewayId,
        "instanceId": args.instanceId,
        "natGatewayId": args.natGatewayId,
        "networkInterfaceId": args.networkInterfaceId,
        "routeTableId": args.routeTableId,
        "transitGatewayId": args.transitGatewayId,
        "vpcPeeringConnectionId": args.vpcPeeringConnectionId,
    }, opts);
    return pulumi.utils.liftProperties(promise, opts);
}
exports.getRoute = getRoute;
//# sourceMappingURL=getRoute.js.map