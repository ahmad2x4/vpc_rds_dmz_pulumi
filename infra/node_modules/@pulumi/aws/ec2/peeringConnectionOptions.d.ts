import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides a resource to manage VPC peering connection options.
 *
 * > **NOTE on VPC Peering Connections and VPC Peering Connection Options:** This provider provides
 * both a standalone VPC Peering Connection Options and a VPC Peering Connection
 * resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
 * connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
 * Doing so will cause a conflict of options and will overwrite the options.
 * Using a VPC Peering Connection Options resource decouples management of the connection options from
 * management of the VPC Peering Connection and allows options to be set correctly in cross-region and
 * cross-account scenarios.
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fooVpc = new aws.ec2.Vpc("foo", {
 *     cidrBlock: "10.0.0.0/16",
 * });
 * const bar = new aws.ec2.Vpc("bar", {
 *     cidrBlock: "10.1.0.0/16",
 * });
 * const fooVpcPeeringConnection = new aws.ec2.VpcPeeringConnection("foo", {
 *     autoAccept: true,
 *     peerVpcId: bar.id,
 *     vpcId: fooVpc.id,
 * });
 * const fooPeeringConnectionOptions = new aws.ec2.PeeringConnectionOptions("foo", {
 *     accepter: {
 *         allowRemoteVpcDnsResolution: true,
 *     },
 *     requester: {
 *         allowClassicLinkToRemoteVpc: true,
 *         allowVpcToRemoteClassicLink: true,
 *     },
 *     vpcPeeringConnectionId: fooVpcPeeringConnection.id,
 * });
 * ```
 *
 * Basic cross-account usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const requester = new aws.Provider("requester", {});
 * const accepter = new aws.Provider("accepter", {});
 * const main = new aws.ec2.Vpc("main", {
 *     cidrBlock: "10.0.0.0/16",
 *     enableDnsHostnames: true,
 *     enableDnsSupport: true,
 * }, {provider: requester});
 * const peerVpc = new aws.ec2.Vpc("peer", {
 *     cidrBlock: "10.1.0.0/16",
 *     enableDnsHostnames: true,
 *     enableDnsSupport: true,
 * }, {provider: accepter});
 * const peerCallerIdentity = aws.getCallerIdentity({provider: accepter});
 * // Requester's side of the connection.
 * const peerVpcPeeringConnection = new aws.ec2.VpcPeeringConnection("peer", {
 *     autoAccept: false,
 *     peerOwnerId: peerCallerIdentity.accountId,
 *     peerVpcId: peerVpc.id,
 *     tags: {
 *         Side: "Requester",
 *     },
 *     vpcId: main.id,
 * }, {provider: requester});
 * // Accepter's side of the connection.
 * const peerVpcPeeringConnectionAccepter = new aws.ec2.VpcPeeringConnectionAccepter("peer", {
 *     autoAccept: true,
 *     tags: {
 *         Side: "Accepter",
 *     },
 *     vpcPeeringConnectionId: peerVpcPeeringConnection.id,
 * }, {provider: accepter});
 * const requesterPeeringConnectionOptions = new aws.ec2.PeeringConnectionOptions("requester", {
 *     requester: {
 *         allowRemoteVpcDnsResolution: true,
 *     },
 *     // As options can't be set until the connection has been accepted
 *     // create an explicit dependency on the accepter.
 *     vpcPeeringConnectionId: peerVpcPeeringConnectionAccepter.id,
 * }, {provider: requester});
 * const accepterPeeringConnectionOptions = new aws.ec2.PeeringConnectionOptions("accepter", {
 *     accepter: {
 *         allowRemoteVpcDnsResolution: true,
 *     },
 *     vpcPeeringConnectionId: peerVpcPeeringConnectionAccepter.id,
 * }, {provider: accepter});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_peering_connection_options.html.markdown.
 */
export declare class PeeringConnectionOptions extends pulumi.CustomResource {
    /**
     * Get an existing PeeringConnectionOptions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PeeringConnectionOptionsState, opts?: pulumi.CustomResourceOptions): PeeringConnectionOptions;
    /**
     * Returns true if the given object is an instance of PeeringConnectionOptions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PeeringConnectionOptions;
    /**
     * An optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     */
    readonly accepter: pulumi.Output<outputs.ec2.PeeringConnectionOptionsAccepter>;
    /**
     * A optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     */
    readonly requester: pulumi.Output<outputs.ec2.PeeringConnectionOptionsRequester>;
    /**
     * The ID of the requester VPC peering connection.
     */
    readonly vpcPeeringConnectionId: pulumi.Output<string>;
    /**
     * Create a PeeringConnectionOptions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PeeringConnectionOptionsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering PeeringConnectionOptions resources.
 */
export interface PeeringConnectionOptionsState {
    /**
     * An optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     */
    readonly accepter?: pulumi.Input<inputs.ec2.PeeringConnectionOptionsAccepter>;
    /**
     * A optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     */
    readonly requester?: pulumi.Input<inputs.ec2.PeeringConnectionOptionsRequester>;
    /**
     * The ID of the requester VPC peering connection.
     */
    readonly vpcPeeringConnectionId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a PeeringConnectionOptions resource.
 */
export interface PeeringConnectionOptionsArgs {
    /**
     * An optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that accepts
     * the peering connection (a maximum of one).
     */
    readonly accepter?: pulumi.Input<inputs.ec2.PeeringConnectionOptionsAccepter>;
    /**
     * A optional configuration block that allows for [VPC Peering Connection]
     * (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options to be set for the VPC that requests
     * the peering connection (a maximum of one).
     */
    readonly requester?: pulumi.Input<inputs.ec2.PeeringConnectionOptionsRequester>;
    /**
     * The ID of the requester VPC peering connection.
     */
    readonly vpcPeeringConnectionId: pulumi.Input<string>;
}
