"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a VPC Endpoint connection notification resource.
 * Connection notifications notify subscribers of VPC Endpoint events.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const topic = new aws.sns.Topic("topic", {
 *     policy: `{
 *     "Version":"2012-10-17",
 *     "Statement":[{
 *         "Effect": "Allow",
 *         "Principal": {
 *             "Service": "vpce.amazonaws.com"
 *         },
 *         "Action": "SNS:Publish",
 *         "Resource": "arn:aws:sns:*:*:vpce-notification-topic"
 *     }]
 * }
 * `,
 * });
 * const fooVpcEndpointService = new aws.ec2.VpcEndpointService("foo", {
 *     acceptanceRequired: false,
 *     networkLoadBalancerArns: [aws_lb_test.arn],
 * });
 * const fooVpcEndpointConnectionNotification = new aws.ec2.VpcEndpointConnectionNotification("foo", {
 *     connectionEvents: [
 *         "Accept",
 *         "Reject",
 *     ],
 *     connectionNotificationArn: topic.arn,
 *     vpcEndpointServiceId: fooVpcEndpointService.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/vpc_endpoint_connection_notification.html.markdown.
 */
class VpcEndpointConnectionNotification extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["connectionEvents"] = state ? state.connectionEvents : undefined;
            inputs["connectionNotificationArn"] = state ? state.connectionNotificationArn : undefined;
            inputs["notificationType"] = state ? state.notificationType : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["vpcEndpointId"] = state ? state.vpcEndpointId : undefined;
            inputs["vpcEndpointServiceId"] = state ? state.vpcEndpointServiceId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.connectionEvents === undefined) {
                throw new Error("Missing required property 'connectionEvents'");
            }
            if (!args || args.connectionNotificationArn === undefined) {
                throw new Error("Missing required property 'connectionNotificationArn'");
            }
            inputs["connectionEvents"] = args ? args.connectionEvents : undefined;
            inputs["connectionNotificationArn"] = args ? args.connectionNotificationArn : undefined;
            inputs["vpcEndpointId"] = args ? args.vpcEndpointId : undefined;
            inputs["vpcEndpointServiceId"] = args ? args.vpcEndpointServiceId : undefined;
            inputs["notificationType"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VpcEndpointConnectionNotification.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VpcEndpointConnectionNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new VpcEndpointConnectionNotification(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpcEndpointConnectionNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpointConnectionNotification.__pulumiType;
    }
}
exports.VpcEndpointConnectionNotification = VpcEndpointConnectionNotification;
/** @internal */
VpcEndpointConnectionNotification.__pulumiType = 'aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification';
//# sourceMappingURL=vpcEndpointConnectionNotification.js.map