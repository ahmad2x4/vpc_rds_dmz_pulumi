import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a CodeDeploy application to be used as a basis for deployments
 *
 * ## Example Usage
 *
 * ### ECS Application
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codedeploy.Application("example", {
 *     computePlatform: "ECS",
 * });
 * ```
 *
 * ### Lambda Application
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codedeploy.Application("example", {
 *     computePlatform: "Lambda",
 * });
 * ```
 *
 * ### Server Application
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codedeploy.Application("example", {
 *     computePlatform: "Server",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codedeploy_app.html.markdown.
 */
export declare class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application;
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Application;
    /**
     * The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
     */
    readonly computePlatform: pulumi.Output<string | undefined>;
    /**
     * The name of the application.
     */
    readonly name: pulumi.Output<string>;
    readonly uniqueId: pulumi.Output<string>;
    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
     */
    readonly computePlatform?: pulumi.Input<string>;
    /**
     * The name of the application.
     */
    readonly name?: pulumi.Input<string>;
    readonly uniqueId?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
     */
    readonly computePlatform?: pulumi.Input<string>;
    /**
     * The name of the application.
     */
    readonly name?: pulumi.Input<string>;
    readonly uniqueId?: pulumi.Input<string>;
}
