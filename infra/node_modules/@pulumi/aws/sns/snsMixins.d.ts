import * as pulumi from "@pulumi/pulumi";
import * as lambda from "../lambda";
import * as topic from "./topic";
import * as topicSubscription from "./topicSubscription";
export interface TopicEvent {
    Records: TopicRecord[];
}
export interface TopicRecord {
    EventVersion: string;
    EventSubscriptionArn: string;
    EventSource: string;
    Sns: SNSItem;
}
export interface SNSItem {
    SignatureVersion: string;
    Timestamp: string;
    Signature: string;
    SigningCertUrl: string;
    MessageId: string;
    Message: string;
    MessageAttributes: {
        [key: string]: SNSMessageAttribute;
    };
    Type: string;
    UnsubscribeUrl: string;
    TopicArn: string;
    Subject: string;
}
export interface SNSMessageAttribute {
    Type: string;
    Value: string;
}
export declare type TopicEventHandler = lambda.EventHandler<TopicEvent, void>;
/**
 * Arguments to control the topic subscription.  Currently empty, but still defined in case of
 * future need.
 */
export declare type TopicEventSubscriptionArgs = {};
export declare class TopicEventSubscription extends lambda.EventSubscription {
    readonly topic: topic.Topic;
    /**
     * The underlying sns object created for the subscription.
     */
    readonly subscription: topicSubscription.TopicSubscription;
    constructor(name: string, topic: topic.Topic, handler: TopicEventHandler, args?: TopicEventSubscriptionArgs, opts?: pulumi.ComponentResourceOptions);
}
declare module "./topic" {
    interface Topic {
        /**
         * Creates a new subscription to events fired from this Topic to the handler provided, along
         * with options to control the behavior of the subscription.
         */
        onEvent(name: string, handler: TopicEventHandler, args?: TopicEventSubscriptionArgs, opts?: pulumi.ComponentResourceOptions): TopicEventSubscription;
    }
}
