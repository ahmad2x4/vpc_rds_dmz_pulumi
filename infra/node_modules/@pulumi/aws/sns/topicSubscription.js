"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 *   Provides a resource for subscribing to SNS topics. Requires that an SNS topic exist for the subscription to attach to.
 * This resource allows you to automatically place messages sent to SNS topics in SQS queues, send them as HTTP(S) POST requests
 * to a given endpoint, send SMS messages, or notify devices / applications. The most likely use case will
 * probably be SQS queues.
 *
 * > **NOTE:** If the SNS topic and SQS queue are in different AWS regions, it is important for the "aws.sns.TopicSubscription" to use an AWS provider that is in the same region of the SNS topic. If the "aws.sns.TopicSubscription" is using a provider with a different region than the SNS topic, the subscription will fail to create.
 *
 * > **NOTE:** Setup of cross-account subscriptions from SNS topics to SQS queues requires the provider to have access to BOTH accounts.
 *
 * > **NOTE:** If SNS topic and SQS queue are in different AWS accounts but the same region it is important for the "aws.sns.TopicSubscription" to use the AWS provider of the account with the SQS queue. If "aws.sns.TopicSubscription" is using a Provider with a different account than the SQS queue, the provider creates the subscriptions but does not keep state and tries to re-create the subscription at every apply.
 *
 * > **NOTE:** If SNS topic and SQS queue are in different AWS accounts and different AWS regions it is important to recognize that the subscription needs to be initiated from the account with the SQS queue but in the region of the SNS topic.
 *
 * ## Example Usage
 *
 * You can directly supply a topic and ARN by hand in the `topicArn` property along with the queue ARN:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const userUpdatesSqsTarget = new aws.sns.TopicSubscription("userUpdatesSqsTarget", {
 *     endpoint: "arn:aws:sqs:us-west-2:432981146916:queue-too",
 *     protocol: "sqs",
 *     topic: "arn:aws:sns:us-west-2:432981146916:user-updates-topic",
 * });
 * ```
 *
 * Alternatively you can use the ARN properties of a managed SNS topic and SQS queue:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const userUpdates = new aws.sns.Topic("userUpdates", {});
 * const userUpdatesQueue = new aws.sqs.Queue("userUpdatesQueue", {});
 * const userUpdatesSqsTarget = new aws.sns.TopicSubscription("userUpdatesSqsTarget", {
 *     endpoint: userUpdatesQueue.arn,
 *     protocol: "sqs",
 *     topic: userUpdates.arn,
 * });
 * ```
 *
 * You can subscribe SNS topics to SQS queues in different Amazon accounts and regions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * //#
 * //# Variables
 * //#
 * const sns = config.get("sns") || {
 *     "account-id": "111111111111",
 *     displayName: "example",
 *     name: "example-sns-topic",
 *     region: "us-west-1",
 *     "role-name": "service/service",
 * };
 * const sqs = config.get("sqs") || {
 *     "account-id": "222222222222",
 *     name: "example-sqs-queue",
 *     region: "us-east-1",
 *     "role-name": "service/service",
 * };
 *
 * const snsTopicPolicy = aws.iam.getPolicyDocument({
 *     policyId: "__default_policy_ID",
 *     statements: [
 *         {
 *             actions: [
 *                 "SNS:Subscribe",
 *                 "SNS:SetTopicAttributes",
 *                 "SNS:RemovePermission",
 *                 "SNS:Receive",
 *                 "SNS:Publish",
 *                 "SNS:ListSubscriptionsByTopic",
 *                 "SNS:GetTopicAttributes",
 *                 "SNS:DeleteTopic",
 *                 "SNS:AddPermission",
 *             ],
 *             conditions: [{
 *                 test: "StringEquals",
 *                 values: [sns["account-id"]],
 *                 variable: "AWS:SourceOwner",
 *             }],
 *             effect: "Allow",
 *             principals: [{
 *                 identifiers: ["*"],
 *                 type: "AWS",
 *             }],
 *             resources: [`arn:aws:sns:${sns["region"]}:${sns["account-id"]}:${sns["name"]}`],
 *             sid: "__default_statement_ID",
 *         },
 *         {
 *             actions: [
 *                 "SNS:Subscribe",
 *                 "SNS:Receive",
 *             ],
 *             conditions: [{
 *                 test: "StringLike",
 *                 values: [`arn:aws:sqs:${sqs["region"]}:${sqs["account-id"]}:${sqs["name"]}`],
 *                 variable: "SNS:Endpoint",
 *             }],
 *             effect: "Allow",
 *             principals: [{
 *                 identifiers: ["*"],
 *                 type: "AWS",
 *             }],
 *             resources: [`arn:aws:sns:${sns["region"]}:${sns["account-id"]}:${sns["name"]}`],
 *             sid: "__console_sub_0",
 *         },
 *     ],
 * });
 * const sqsQueuePolicy = aws.iam.getPolicyDocument({
 *     policyId: `arn:aws:sqs:${sqs["region"]}:${sqs["account-id"]}:${sqs["name"]}/SQSDefaultPolicy`,
 *     statements: [{
 *         actions: ["SQS:SendMessage"],
 *         conditions: [{
 *             test: "ArnEquals",
 *             values: [`arn:aws:sns:${sns["region"]}:${sns["account-id"]}:${sns["name"]}`],
 *             variable: "aws:SourceArn",
 *         }],
 *         effect: "Allow",
 *         principals: [{
 *             identifiers: ["*"],
 *             type: "AWS",
 *         }],
 *         resources: [`arn:aws:sqs:${sqs["region"]}:${sqs["account-id"]}:${sqs["name"]}`],
 *         sid: "example-sns-topic",
 *     }],
 * });
 * // provider to manage SNS topics
 * const awsSns = new aws.Provider("sns", {
 *     assumeRole: [{
 *         roleArn: `arn:aws:iam::${sns["account-id"]}:role/${sns["role-name"]}`,
 *         sessionName: `sns-${sns["region"]}`,
 *     }],
 *     region: sns["region"],
 * });
 * // provider to manage SQS queues
 * const awsSqs = new aws.Provider("sqs", {
 *     assumeRole: [{
 *         roleArn: `arn:aws:iam::${sqs["account-id"]}:role/${sqs["role-name"]}`,
 *         sessionName: `sqs-${sqs["region"]}`,
 *     }],
 *     region: sqs["region"],
 * });
 * // provider to subscribe SQS to SNS (using the SQS account but the SNS region)
 * const sns2sqs = new aws.Provider("sns2sqs", {
 *     assumeRole: [{
 *         roleArn: `arn:aws:iam::${sqs["account-id"]}:role/${sqs["role-name"]}`,
 *         sessionName: `sns2sqs-${sns["region"]}`,
 *     }],
 *     region: sns["region"],
 * });
 * const sns_topicTopic = new aws.sns.Topic("sns-topic", {
 *     displayName: sns["displayName"],
 *     policy: sns_topic_policy.json,
 * }, {provider: awsSns});
 * const sqsQueue = new aws.sqs.Queue("sqs-queue", {
 *     policy: sqs_queue_policy.json,
 * }, {provider: awsSqs});
 * const sns_topicTopicSubscription = new aws.sns.TopicSubscription("sns-topic", {
 *     endpoint: sqs_queue.arn,
 *     protocol: "sqs",
 *     topic: sns_topicTopic.arn,
 * }, {provider: sns2sqs});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/sns_topic_subscription.html.markdown.
 */
class TopicSubscription extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["confirmationTimeoutInMinutes"] = state ? state.confirmationTimeoutInMinutes : undefined;
            inputs["deliveryPolicy"] = state ? state.deliveryPolicy : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["endpointAutoConfirms"] = state ? state.endpointAutoConfirms : undefined;
            inputs["filterPolicy"] = state ? state.filterPolicy : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["rawMessageDelivery"] = state ? state.rawMessageDelivery : undefined;
            inputs["topic"] = state ? state.topic : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.endpoint === undefined) {
                throw new Error("Missing required property 'endpoint'");
            }
            if (!args || args.protocol === undefined) {
                throw new Error("Missing required property 'protocol'");
            }
            if (!args || args.topic === undefined) {
                throw new Error("Missing required property 'topic'");
            }
            inputs["confirmationTimeoutInMinutes"] = args ? args.confirmationTimeoutInMinutes : undefined;
            inputs["deliveryPolicy"] = args ? args.deliveryPolicy : undefined;
            inputs["endpoint"] = args ? args.endpoint : undefined;
            inputs["endpointAutoConfirms"] = args ? args.endpointAutoConfirms : undefined;
            inputs["filterPolicy"] = args ? args.filterPolicy : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["rawMessageDelivery"] = args ? args.rawMessageDelivery : undefined;
            inputs["topic"] = args ? args.topic : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(TopicSubscription.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TopicSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new TopicSubscription(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TopicSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TopicSubscription.__pulumiType;
    }
}
exports.TopicSubscription = TopicSubscription;
/** @internal */
TopicSubscription.__pulumiType = 'aws:sns/topicSubscription:TopicSubscription';
//# sourceMappingURL=topicSubscription.js.map