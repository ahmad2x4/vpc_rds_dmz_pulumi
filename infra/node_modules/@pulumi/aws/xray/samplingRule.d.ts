import * as pulumi from "@pulumi/pulumi";
/**
 * Creates and manages an AWS XRay Sampling Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.xray.SamplingRule("example", {
 *     attributes: {
 *         Hello: "Tris",
 *     },
 *     fixedRate: 0.05,
 *     host: "*",
 *     httpMethod: "*",
 *     priority: 10000,
 *     reservoirSize: 1,
 *     resourceArn: "*",
 *     ruleName: "example",
 *     serviceName: "*",
 *     serviceType: "*",
 *     urlPath: "*",
 *     version: 1,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/xray_sampling_rule.html.markdown.
 */
export declare class SamplingRule extends pulumi.CustomResource {
    /**
     * Get an existing SamplingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SamplingRuleState, opts?: pulumi.CustomResourceOptions): SamplingRule;
    /**
     * Returns true if the given object is an instance of SamplingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is SamplingRule;
    /**
     * The ARN of the sampling rule.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Matches attributes derived from the request.
     */
    readonly attributes: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     */
    readonly fixedRate: pulumi.Output<number>;
    /**
     * Matches the hostname from a request URL.
     */
    readonly host: pulumi.Output<string>;
    /**
     * Matches the HTTP method of a request.
     */
    readonly httpMethod: pulumi.Output<string>;
    /**
     * The priority of the sampling rule.
     */
    readonly priority: pulumi.Output<number>;
    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     */
    readonly reservoirSize: pulumi.Output<number>;
    /**
     * Matches the ARN of the AWS resource on which the service runs.
     */
    readonly resourceArn: pulumi.Output<string>;
    /**
     * The name of the sampling rule.
     */
    readonly ruleName: pulumi.Output<string | undefined>;
    /**
     * Matches the `name` that the service uses to identify itself in segments.
     */
    readonly serviceName: pulumi.Output<string>;
    /**
     * Matches the `origin` that the service uses to identify its type in segments.
     */
    readonly serviceType: pulumi.Output<string>;
    /**
     * Matches the path from a request URL.
     */
    readonly urlPath: pulumi.Output<string>;
    /**
     * The version of the sampling rule format (`1` )
     */
    readonly version: pulumi.Output<number>;
    /**
     * Create a SamplingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SamplingRuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SamplingRule resources.
 */
export interface SamplingRuleState {
    /**
     * The ARN of the sampling rule.
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * Matches attributes derived from the request.
     */
    readonly attributes?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     */
    readonly fixedRate?: pulumi.Input<number>;
    /**
     * Matches the hostname from a request URL.
     */
    readonly host?: pulumi.Input<string>;
    /**
     * Matches the HTTP method of a request.
     */
    readonly httpMethod?: pulumi.Input<string>;
    /**
     * The priority of the sampling rule.
     */
    readonly priority?: pulumi.Input<number>;
    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     */
    readonly reservoirSize?: pulumi.Input<number>;
    /**
     * Matches the ARN of the AWS resource on which the service runs.
     */
    readonly resourceArn?: pulumi.Input<string>;
    /**
     * The name of the sampling rule.
     */
    readonly ruleName?: pulumi.Input<string>;
    /**
     * Matches the `name` that the service uses to identify itself in segments.
     */
    readonly serviceName?: pulumi.Input<string>;
    /**
     * Matches the `origin` that the service uses to identify its type in segments.
     */
    readonly serviceType?: pulumi.Input<string>;
    /**
     * Matches the path from a request URL.
     */
    readonly urlPath?: pulumi.Input<string>;
    /**
     * The version of the sampling rule format (`1` )
     */
    readonly version?: pulumi.Input<number>;
}
/**
 * The set of arguments for constructing a SamplingRule resource.
 */
export interface SamplingRuleArgs {
    /**
     * Matches attributes derived from the request.
     */
    readonly attributes?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The percentage of matching requests to instrument, after the reservoir is exhausted.
     */
    readonly fixedRate: pulumi.Input<number>;
    /**
     * Matches the hostname from a request URL.
     */
    readonly host: pulumi.Input<string>;
    /**
     * Matches the HTTP method of a request.
     */
    readonly httpMethod: pulumi.Input<string>;
    /**
     * The priority of the sampling rule.
     */
    readonly priority: pulumi.Input<number>;
    /**
     * A fixed number of matching requests to instrument per second, prior to applying the fixed rate. The reservoir is not used directly by services, but applies to all services using the rule collectively.
     */
    readonly reservoirSize: pulumi.Input<number>;
    /**
     * Matches the ARN of the AWS resource on which the service runs.
     */
    readonly resourceArn: pulumi.Input<string>;
    /**
     * The name of the sampling rule.
     */
    readonly ruleName?: pulumi.Input<string>;
    /**
     * Matches the `name` that the service uses to identify itself in segments.
     */
    readonly serviceName: pulumi.Input<string>;
    /**
     * Matches the `origin` that the service uses to identify its type in segments.
     */
    readonly serviceType: pulumi.Input<string>;
    /**
     * Matches the path from a request URL.
     */
    readonly urlPath: pulumi.Input<string>;
    /**
     * The version of the sampling rule format (`1` )
     */
    readonly version: pulumi.Input<number>;
}
