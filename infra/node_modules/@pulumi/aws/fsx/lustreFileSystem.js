"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a FSx Lustre File System. See the [FSx Lustre Guide](https://docs.aws.amazon.com/fsx/latest/LustreGuide/what-is.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.fsx.LustreFileSystem("example", {
 *     importPath: pulumi.interpolate`s3://${aws_s3_bucket_example.bucket}`,
 *     storageCapacity: 1200,
 *     subnetIds: aws_subnet_example.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/fsx_lustre_file_system.html.markdown.
 */
class LustreFileSystem extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["exportPath"] = state ? state.exportPath : undefined;
            inputs["importPath"] = state ? state.importPath : undefined;
            inputs["importedFileChunkSize"] = state ? state.importedFileChunkSize : undefined;
            inputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["storageCapacity"] = state ? state.storageCapacity : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
            inputs["weeklyMaintenanceStartTime"] = state ? state.weeklyMaintenanceStartTime : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.storageCapacity === undefined) {
                throw new Error("Missing required property 'storageCapacity'");
            }
            if (!args || args.subnetIds === undefined) {
                throw new Error("Missing required property 'subnetIds'");
            }
            inputs["exportPath"] = args ? args.exportPath : undefined;
            inputs["importPath"] = args ? args.importPath : undefined;
            inputs["importedFileChunkSize"] = args ? args.importedFileChunkSize : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["storageCapacity"] = args ? args.storageCapacity : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["weeklyMaintenanceStartTime"] = args ? args.weeklyMaintenanceStartTime : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
            inputs["networkInterfaceIds"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LustreFileSystem.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LustreFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new LustreFileSystem(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LustreFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LustreFileSystem.__pulumiType;
    }
}
exports.LustreFileSystem = LustreFileSystem;
/** @internal */
LustreFileSystem.__pulumiType = 'aws:fsx/lustreFileSystem:LustreFileSystem';
//# sourceMappingURL=lustreFileSystem.js.map