"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an RDS instance resource.  A DB instance is an isolated database
 * environment in the cloud.  A DB instance can contain multiple user-created
 * databases.
 *
 * Changes to a DB instance can occur when you manually change a parameter, such as
 * `allocatedStorage`, and are reflected in the next maintenance window. Because
 * of this, this provider may report a difference in its planning phase because a
 * modification has not yet taken place. You can use the `applyImmediately` flag
 * to instruct the service to apply the change immediately (see documentation
 * below).
 *
 * When upgrading the major version of an engine, `allowMajorVersionUpgrade`
 * must be set to `true`.
 *
 * > **Note:** using `applyImmediately` can result in a brief downtime as the
 * server reboots. See the AWS Docs on [RDS Maintenance][2] for more information.
 *
 * > **Note:** All arguments including the username and password will be stored in
 * the raw state as plain-text. [Read more about sensitive data in
 * state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## RDS Instance Class Types
 *
 * Amazon RDS supports three types of instance classes: Standard, Memory Optimized,
 * and Burstable Performance. For more information please read the AWS RDS documentation
 * about [DB Instance Class Types](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html)
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const defaultInstance = new aws.rds.Instance("default", {
 *     allocatedStorage: 20,
 *     engine: "mysql",
 *     engineVersion: "5.7",
 *     instanceClass: "db.t2.micro",
 *     name: "mydb",
 *     parameterGroupName: "default.mysql5.7",
 *     password: "foobarbaz",
 *     storageType: "gp2",
 *     username: "foo",
 * });
 * ```
 *
 * ### Storage Autoscaling
 *
 * To enable Storage Autoscaling with instances that support the feature, define the `maxAllocatedStorage` argument higher than the `allocatedStorage` argument. This provider will automatically hide differences with the `allocatedStorage` argument value if autoscaling occurs.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.rds.Instance("example", {
 *     allocatedStorage: 50,
 *     maxAllocatedStorage: 100,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/db_instance.html.markdown.
 */
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["address"] = state ? state.address : undefined;
            inputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            inputs["allowMajorVersionUpgrade"] = state ? state.allowMajorVersionUpgrade : undefined;
            inputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            inputs["backupWindow"] = state ? state.backupWindow : undefined;
            inputs["caCertIdentifier"] = state ? state.caCertIdentifier : undefined;
            inputs["characterSetName"] = state ? state.characterSetName : undefined;
            inputs["copyTagsToSnapshot"] = state ? state.copyTagsToSnapshot : undefined;
            inputs["dbSubnetGroupName"] = state ? state.dbSubnetGroupName : undefined;
            inputs["deleteAutomatedBackups"] = state ? state.deleteAutomatedBackups : undefined;
            inputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            inputs["domain"] = state ? state.domain : undefined;
            inputs["domainIamRoleName"] = state ? state.domainIamRoleName : undefined;
            inputs["enabledCloudwatchLogsExports"] = state ? state.enabledCloudwatchLogsExports : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            inputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            inputs["iamDatabaseAuthenticationEnabled"] = state ? state.iamDatabaseAuthenticationEnabled : undefined;
            inputs["identifier"] = state ? state.identifier : undefined;
            inputs["identifierPrefix"] = state ? state.identifierPrefix : undefined;
            inputs["instanceClass"] = state ? state.instanceClass : undefined;
            inputs["iops"] = state ? state.iops : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["licenseModel"] = state ? state.licenseModel : undefined;
            inputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            inputs["maxAllocatedStorage"] = state ? state.maxAllocatedStorage : undefined;
            inputs["monitoringInterval"] = state ? state.monitoringInterval : undefined;
            inputs["monitoringRoleArn"] = state ? state.monitoringRoleArn : undefined;
            inputs["multiAz"] = state ? state.multiAz : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["optionGroupName"] = state ? state.optionGroupName : undefined;
            inputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["performanceInsightsEnabled"] = state ? state.performanceInsightsEnabled : undefined;
            inputs["performanceInsightsKmsKeyId"] = state ? state.performanceInsightsKmsKeyId : undefined;
            inputs["performanceInsightsRetentionPeriod"] = state ? state.performanceInsightsRetentionPeriod : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            inputs["replicas"] = state ? state.replicas : undefined;
            inputs["replicateSourceDb"] = state ? state.replicateSourceDb : undefined;
            inputs["resourceId"] = state ? state.resourceId : undefined;
            inputs["s3Import"] = state ? state.s3Import : undefined;
            inputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            inputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            inputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timezone"] = state ? state.timezone : undefined;
            inputs["username"] = state ? state.username : undefined;
            inputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.instanceClass === undefined) {
                throw new Error("Missing required property 'instanceClass'");
            }
            inputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            inputs["allowMajorVersionUpgrade"] = args ? args.allowMajorVersionUpgrade : undefined;
            inputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            inputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            inputs["backupWindow"] = args ? args.backupWindow : undefined;
            inputs["caCertIdentifier"] = args ? args.caCertIdentifier : undefined;
            inputs["characterSetName"] = args ? args.characterSetName : undefined;
            inputs["copyTagsToSnapshot"] = args ? args.copyTagsToSnapshot : undefined;
            inputs["dbSubnetGroupName"] = args ? args.dbSubnetGroupName : undefined;
            inputs["deleteAutomatedBackups"] = args ? args.deleteAutomatedBackups : undefined;
            inputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            inputs["domain"] = args ? args.domain : undefined;
            inputs["domainIamRoleName"] = args ? args.domainIamRoleName : undefined;
            inputs["enabledCloudwatchLogsExports"] = args ? args.enabledCloudwatchLogsExports : undefined;
            inputs["engine"] = args ? args.engine : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            inputs["iamDatabaseAuthenticationEnabled"] = args ? args.iamDatabaseAuthenticationEnabled : undefined;
            inputs["identifier"] = args ? args.identifier : undefined;
            inputs["identifierPrefix"] = args ? args.identifierPrefix : undefined;
            inputs["instanceClass"] = args ? args.instanceClass : undefined;
            inputs["iops"] = args ? args.iops : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["licenseModel"] = args ? args.licenseModel : undefined;
            inputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            inputs["maxAllocatedStorage"] = args ? args.maxAllocatedStorage : undefined;
            inputs["monitoringInterval"] = args ? args.monitoringInterval : undefined;
            inputs["monitoringRoleArn"] = args ? args.monitoringRoleArn : undefined;
            inputs["multiAz"] = args ? args.multiAz : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["optionGroupName"] = args ? args.optionGroupName : undefined;
            inputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["performanceInsightsEnabled"] = args ? args.performanceInsightsEnabled : undefined;
            inputs["performanceInsightsKmsKeyId"] = args ? args.performanceInsightsKmsKeyId : undefined;
            inputs["performanceInsightsRetentionPeriod"] = args ? args.performanceInsightsRetentionPeriod : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            inputs["replicateSourceDb"] = args ? args.replicateSourceDb : undefined;
            inputs["s3Import"] = args ? args.s3Import : undefined;
            inputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            inputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            inputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            inputs["storageEncrypted"] = args ? args.storageEncrypted : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timezone"] = args ? args.timezone : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            inputs["address"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["hostedZoneId"] = undefined /*out*/;
            inputs["replicas"] = undefined /*out*/;
            inputs["resourceId"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'aws:rds/instance:Instance';
//# sourceMappingURL=instance.js.map