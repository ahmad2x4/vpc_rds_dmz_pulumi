"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CodePipeline.
 *
 * > **NOTE on `aws.codepipeline.Pipeline`:** - the `GITHUB_TOKEN` environment variable must be set if the GitHub provider is specified.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const codepipelineBucket = new aws.s3.Bucket("codepipelineBucket", {
 *     acl: "private",
 * });
 * const codepipelineRole = new aws.iam.Role("codepipelineRole", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "codepipeline.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `,
 * });
 * const codepipelinePolicy = new aws.iam.RolePolicy("codepipelinePolicy", {
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect":"Allow",
 *       "Action": [
 *         "s3:GetObject",
 *         "s3:GetObjectVersion",
 *         "s3:GetBucketVersioning",
 *         "s3:PutObject"
 *       ],
 *       "Resource": [
 *         "${codepipelineBucket.arn}",
 *         "${codepipelineBucket.arn}/*"
 *       ]
 *     },
 *     {
 *       "Effect": "Allow",
 *       "Action": [
 *         "codebuild:BatchGetBuilds",
 *         "codebuild:StartBuild"
 *       ],
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 *     role: codepipelineRole.id,
 * });
 * const s3kmskey = aws.kms.getAlias({
 *     name: "alias/myKmsKey",
 * });
 * const codepipeline = new aws.codepipeline.Pipeline("codepipeline", {
 *     artifactStore: {
 *         encryptionKey: {
 *             id: s3kmskey.arn,
 *             type: "KMS",
 *         },
 *         location: codepipelineBucket.bucket,
 *         type: "S3",
 *     },
 *     roleArn: codepipelineRole.arn,
 *     stages: [
 *         {
 *             actions: [{
 *                 category: "Source",
 *                 configuration: {
 *                     Branch: "master",
 *                     Owner: "my-organization",
 *                     Repo: "test",
 *                 },
 *                 name: "Source",
 *                 outputArtifacts: ["sourceOutput"],
 *                 owner: "ThirdParty",
 *                 provider: "GitHub",
 *                 version: "1",
 *             }],
 *             name: "Source",
 *         },
 *         {
 *             actions: [{
 *                 category: "Build",
 *                 configuration: {
 *                     ProjectName: "test",
 *                 },
 *                 inputArtifacts: ["sourceOutput"],
 *                 name: "Build",
 *                 outputArtifacts: ["buildOutput"],
 *                 owner: "AWS",
 *                 provider: "CodeBuild",
 *                 version: "1",
 *             }],
 *             name: "Build",
 *         },
 *         {
 *             actions: [{
 *                 category: "Deploy",
 *                 configuration: {
 *                     ActionMode: "REPLACE_ON_FAILURE",
 *                     Capabilities: "CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM",
 *                     OutputFileName: "CreateStackOutput.json",
 *                     StackName: "MyStack",
 *                     TemplatePath: "build_output::sam-templated.yaml",
 *                 },
 *                 inputArtifacts: ["buildOutput"],
 *                 name: "Deploy",
 *                 owner: "AWS",
 *                 provider: "CloudFormation",
 *                 version: "1",
 *             }],
 *             name: "Deploy",
 *         },
 *     ],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codepipeline.html.markdown.
 */
class Pipeline extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["artifactStore"] = state ? state.artifactStore : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
            inputs["stages"] = state ? state.stages : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.artifactStore === undefined) {
                throw new Error("Missing required property 'artifactStore'");
            }
            if (!args || args.roleArn === undefined) {
                throw new Error("Missing required property 'roleArn'");
            }
            if (!args || args.stages === undefined) {
                throw new Error("Missing required property 'stages'");
            }
            inputs["artifactStore"] = args ? args.artifactStore : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["stages"] = args ? args.stages : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Pipeline.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Pipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Pipeline(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pipeline.__pulumiType;
    }
}
exports.Pipeline = Pipeline;
/** @internal */
Pipeline.__pulumiType = 'aws:codepipeline/pipeline:Pipeline';
//# sourceMappingURL=pipeline.js.map