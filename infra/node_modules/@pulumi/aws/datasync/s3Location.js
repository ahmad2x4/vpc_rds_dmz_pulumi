"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an S3 Location within AWS DataSync.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.datasync.S3Location("example", {
 *     s3BucketArn: aws_s3_bucket_example.arn,
 *     s3Config: {
 *         bucketAccessRoleArn: aws_iam_role_example.arn,
 *     },
 *     subdirectory: "/example/prefix",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/datasync_location_s3.html.markdown.
 */
class S3Location extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["s3BucketArn"] = state ? state.s3BucketArn : undefined;
            inputs["s3Config"] = state ? state.s3Config : undefined;
            inputs["subdirectory"] = state ? state.subdirectory : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["uri"] = state ? state.uri : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.s3BucketArn === undefined) {
                throw new Error("Missing required property 's3BucketArn'");
            }
            if (!args || args.s3Config === undefined) {
                throw new Error("Missing required property 's3Config'");
            }
            if (!args || args.subdirectory === undefined) {
                throw new Error("Missing required property 'subdirectory'");
            }
            inputs["s3BucketArn"] = args ? args.s3BucketArn : undefined;
            inputs["s3Config"] = args ? args.s3Config : undefined;
            inputs["subdirectory"] = args ? args.subdirectory : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["uri"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(S3Location.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing S3Location resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new S3Location(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of S3Location.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Location.__pulumiType;
    }
}
exports.S3Location = S3Location;
/** @internal */
S3Location.__pulumiType = 'aws:datasync/s3Location:S3Location';
//# sourceMappingURL=s3Location.js.map