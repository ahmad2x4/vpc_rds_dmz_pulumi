import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a License Manager association.
 *
 * > **Note:** License configurations can also be associated with launch templates by specifying the `licenseSpecifications` block for an `aws.ec2.LaunchTemplate`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleAmi = aws.getAmi({
 *     filters: [{
 *         name: "name",
 *         values: ["amzn-ami-vpc-nat*"],
 *     }],
 *     mostRecent: true,
 *     owners: ["amazon"],
 * });
 * const exampleInstance = new aws.ec2.Instance("example", {
 *     ami: exampleAmi.id,
 *     instanceType: "t2.micro",
 * });
 * const exampleLicenseConfiguration = new aws.licensemanager.LicenseConfiguration("example", {
 *     licenseCountingType: "Instance",
 * });
 * const exampleAssociation = new aws.licensemanager.Association("example", {
 *     licenseConfigurationArn: exampleLicenseConfiguration.arn,
 *     resourceArn: exampleInstance.arn,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/licensemanager_association.html.markdown.
 */
export declare class Association extends pulumi.CustomResource {
    /**
     * Get an existing Association resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssociationState, opts?: pulumi.CustomResourceOptions): Association;
    /**
     * Returns true if the given object is an instance of Association.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Association;
    /**
     * ARN of the license configuration.
     */
    readonly licenseConfigurationArn: pulumi.Output<string>;
    /**
     * ARN of the resource associated with the license configuration.
     */
    readonly resourceArn: pulumi.Output<string>;
    /**
     * Create a Association resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssociationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Association resources.
 */
export interface AssociationState {
    /**
     * ARN of the license configuration.
     */
    readonly licenseConfigurationArn?: pulumi.Input<string>;
    /**
     * ARN of the resource associated with the license configuration.
     */
    readonly resourceArn?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Association resource.
 */
export interface AssociationArgs {
    /**
     * ARN of the license configuration.
     */
    readonly licenseConfigurationArn: pulumi.Input<string>;
    /**
     * ARN of the resource associated with the license configuration.
     */
    readonly resourceArn: pulumi.Input<string>;
}
