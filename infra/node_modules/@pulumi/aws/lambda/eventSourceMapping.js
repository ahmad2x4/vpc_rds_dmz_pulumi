"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Lambda event source mapping. This allows Lambda functions to get events from Kinesis, DynamoDB and SQS.
 *
 * For information about Lambda and how to use it, see [What is AWS Lambda?][1].
 * For information about event source mappings, see [CreateEventSourceMapping][2] in the API docs.
 *
 * ## Example Usage
 *
 * ### DynamoDB
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_dynamodb_table_example.streamArn,
 *     functionName: aws_lambda_function_example.arn,
 *     startingPosition: "LATEST",
 * });
 * ```
 *
 * ### Kinesis
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_kinesis_stream_example.arn,
 *     functionName: aws_lambda_function_example.arn,
 *     startingPosition: "LATEST",
 * });
 * ```
 *
 * ### SQS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_sqs_queue_sqs_queue_test.arn,
 *     functionName: aws_lambda_function_example.arn,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lambda_event_source_mapping.html.markdown.
 */
class EventSourceMapping extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["batchSize"] = state ? state.batchSize : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["eventSourceArn"] = state ? state.eventSourceArn : undefined;
            inputs["functionArn"] = state ? state.functionArn : undefined;
            inputs["functionName"] = state ? state.functionName : undefined;
            inputs["lastModified"] = state ? state.lastModified : undefined;
            inputs["lastProcessingResult"] = state ? state.lastProcessingResult : undefined;
            inputs["maximumBatchingWindowInSeconds"] = state ? state.maximumBatchingWindowInSeconds : undefined;
            inputs["startingPosition"] = state ? state.startingPosition : undefined;
            inputs["startingPositionTimestamp"] = state ? state.startingPositionTimestamp : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["stateTransitionReason"] = state ? state.stateTransitionReason : undefined;
            inputs["uuid"] = state ? state.uuid : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.eventSourceArn === undefined) {
                throw new Error("Missing required property 'eventSourceArn'");
            }
            if (!args || args.functionName === undefined) {
                throw new Error("Missing required property 'functionName'");
            }
            inputs["batchSize"] = args ? args.batchSize : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["eventSourceArn"] = args ? args.eventSourceArn : undefined;
            inputs["functionName"] = args ? args.functionName : undefined;
            inputs["maximumBatchingWindowInSeconds"] = args ? args.maximumBatchingWindowInSeconds : undefined;
            inputs["startingPosition"] = args ? args.startingPosition : undefined;
            inputs["startingPositionTimestamp"] = args ? args.startingPositionTimestamp : undefined;
            inputs["functionArn"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["lastProcessingResult"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["stateTransitionReason"] = undefined /*out*/;
            inputs["uuid"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(EventSourceMapping.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing EventSourceMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new EventSourceMapping(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventSourceMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSourceMapping.__pulumiType;
    }
}
exports.EventSourceMapping = EventSourceMapping;
/** @internal */
EventSourceMapping.__pulumiType = 'aws:lambda/eventSourceMapping:EventSourceMapping';
//# sourceMappingURL=eventSourceMapping.js.map