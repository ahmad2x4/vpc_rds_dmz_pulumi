import * as pulumi from "@pulumi/pulumi";
import { PolicyDocument } from "../iam/documents";
/**
 * Provides an Elastic Container Registry Repository Policy.
 *
 * Note that currently only one policy may be applied to a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ecr.Repository("foo", {});
 * const foopolicy = new aws.ecr.RepositoryPolicy("foopolicy", {
 *     policy: `{
 *     "Version": "2008-10-17",
 *     "Statement": [
 *         {
 *             "Sid": "new policy",
 *             "Effect": "Allow",
 *             "Principal": "*",
 *             "Action": [
 *                 "ecr:GetDownloadUrlForLayer",
 *                 "ecr:BatchGetImage",
 *                 "ecr:BatchCheckLayerAvailability",
 *                 "ecr:PutImage",
 *                 "ecr:InitiateLayerUpload",
 *                 "ecr:UploadLayerPart",
 *                 "ecr:CompleteLayerUpload",
 *                 "ecr:DescribeRepositories",
 *                 "ecr:GetRepositoryPolicy",
 *                 "ecr:ListImages",
 *                 "ecr:DeleteRepository",
 *                 "ecr:BatchDeleteImage",
 *                 "ecr:SetRepositoryPolicy",
 *                 "ecr:DeleteRepositoryPolicy"
 *             ]
 *         }
 *     ]
 * }
 * `,
 *     repository: foo.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecr_repository_policy.html.markdown.
 */
export declare class RepositoryPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryPolicyState, opts?: pulumi.CustomResourceOptions): RepositoryPolicy;
    /**
     * Returns true if the given object is an instance of RepositoryPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is RepositoryPolicy;
    readonly policy: pulumi.Output<string>;
    /**
     * The registry ID where the repository was created.
     */
    readonly registryId: pulumi.Output<string>;
    /**
     * Name of the repository to apply the policy.
     */
    readonly repository: pulumi.Output<string>;
    /**
     * Create a RepositoryPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering RepositoryPolicy resources.
 */
export interface RepositoryPolicyState {
    readonly policy?: pulumi.Input<string | PolicyDocument>;
    /**
     * The registry ID where the repository was created.
     */
    readonly registryId?: pulumi.Input<string>;
    /**
     * Name of the repository to apply the policy.
     */
    readonly repository?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a RepositoryPolicy resource.
 */
export interface RepositoryPolicyArgs {
    readonly policy: pulumi.Input<string | PolicyDocument>;
    /**
     * Name of the repository to apply the policy.
     */
    readonly repository: pulumi.Input<string>;
}
