"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic Container Registry Repository Policy.
 *
 * Note that currently only one policy may be applied to a repository.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ecr.Repository("foo", {});
 * const foopolicy = new aws.ecr.RepositoryPolicy("foopolicy", {
 *     policy: `{
 *     "Version": "2008-10-17",
 *     "Statement": [
 *         {
 *             "Sid": "new policy",
 *             "Effect": "Allow",
 *             "Principal": "*",
 *             "Action": [
 *                 "ecr:GetDownloadUrlForLayer",
 *                 "ecr:BatchGetImage",
 *                 "ecr:BatchCheckLayerAvailability",
 *                 "ecr:PutImage",
 *                 "ecr:InitiateLayerUpload",
 *                 "ecr:UploadLayerPart",
 *                 "ecr:CompleteLayerUpload",
 *                 "ecr:DescribeRepositories",
 *                 "ecr:GetRepositoryPolicy",
 *                 "ecr:ListImages",
 *                 "ecr:DeleteRepository",
 *                 "ecr:BatchDeleteImage",
 *                 "ecr:SetRepositoryPolicy",
 *                 "ecr:DeleteRepositoryPolicy"
 *             ]
 *         }
 *     ]
 * }
 * `,
 *     repository: foo.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecr_repository_policy.html.markdown.
 */
class RepositoryPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["registryId"] = state ? state.registryId : undefined;
            inputs["repository"] = state ? state.repository : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.policy === undefined) {
                throw new Error("Missing required property 'policy'");
            }
            if (!args || args.repository === undefined) {
                throw new Error("Missing required property 'repository'");
            }
            inputs["policy"] = args ? args.policy : undefined;
            inputs["repository"] = args ? args.repository : undefined;
            inputs["registryId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RepositoryPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RepositoryPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new RepositoryPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RepositoryPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryPolicy.__pulumiType;
    }
}
exports.RepositoryPolicy = RepositoryPolicy;
/** @internal */
RepositoryPolicy.__pulumiType = 'aws:ecr/repositoryPolicy:RepositoryPolicy';
//# sourceMappingURL=repositoryPolicy.js.map