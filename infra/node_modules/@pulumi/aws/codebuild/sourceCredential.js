"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CodeBuild Source Credentials Resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codebuild.SourceCredential("example", {
 *     authType: "PERSONAL_ACCESS_TOKEN",
 *     serverType: "GITHUB",
 *     token: "example",
 * });
 * ```
 *
 * ### Bitbucket Server Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.codebuild.SourceCredential("example", {
 *     authType: "BASIC_AUTH",
 *     serverType: "BITBUCKET",
 *     token: "example",
 *     userName: "test-user",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codebuild_source_credential.html.markdown.
 */
class SourceCredential extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["authType"] = state ? state.authType : undefined;
            inputs["serverType"] = state ? state.serverType : undefined;
            inputs["token"] = state ? state.token : undefined;
            inputs["userName"] = state ? state.userName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.authType === undefined) {
                throw new Error("Missing required property 'authType'");
            }
            if (!args || args.serverType === undefined) {
                throw new Error("Missing required property 'serverType'");
            }
            if (!args || args.token === undefined) {
                throw new Error("Missing required property 'token'");
            }
            inputs["authType"] = args ? args.authType : undefined;
            inputs["serverType"] = args ? args.serverType : undefined;
            inputs["token"] = args ? args.token : undefined;
            inputs["userName"] = args ? args.userName : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(SourceCredential.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SourceCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new SourceCredential(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SourceCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceCredential.__pulumiType;
    }
}
exports.SourceCredential = SourceCredential;
/** @internal */
SourceCredential.__pulumiType = 'aws:codebuild/sourceCredential:SourceCredential';
//# sourceMappingURL=sourceCredential.js.map