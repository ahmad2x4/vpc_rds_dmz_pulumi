"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `aws..getPrefixList` provides details about a specific prefix list (PL)
 * in the current region.
 *
 * This can be used both to validate a prefix list given in a variable
 * and to obtain the CIDR blocks (IP address ranges) for the associated
 * AWS service. The latter may be useful e.g. for adding network ACL
 * rules.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const privateS3VpcEndpoint = new aws.ec2.VpcEndpoint("privateS3", {
 *     serviceName: "com.amazonaws.us-west-2.s3",
 *     vpcId: aws_vpc_foo.id,
 * });
 * const privateS3PrefixList = privateS3VpcEndpoint.prefixListId.apply(prefixListId => aws.getPrefixList({
 *     prefixListId: prefixListId,
 * }));
 * const bar = new aws.ec2.NetworkAcl("bar", {
 *     vpcId: aws_vpc_foo.id,
 * });
 * const privateS3NetworkAclRule = new aws.ec2.NetworkAclRule("privateS3", {
 *     cidrBlock: privateS3PrefixList.apply(privateS3PrefixList => privateS3PrefixList.cidrBlocks[0]),
 *     egress: false,
 *     fromPort: 443,
 *     networkAclId: bar.id,
 *     protocol: "tcp",
 *     ruleAction: "allow",
 *     ruleNumber: 200,
 *     toPort: 443,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/prefix_list.html.markdown.
 */
function getPrefixList(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    const promise = pulumi.runtime.invoke("aws:index/getPrefixList:getPrefixList", {
        "name": args.name,
        "prefixListId": args.prefixListId,
    }, opts);
    return pulumi.utils.liftProperties(promise, opts);
}
exports.getPrefixList = getPrefixList;
//# sourceMappingURL=getPrefixList.js.map