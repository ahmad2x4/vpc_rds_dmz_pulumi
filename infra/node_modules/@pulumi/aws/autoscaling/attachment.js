"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AutoScaling Attachment resource.
 *
 * > **NOTE on AutoScaling Groups and ASG Attachments:** This provider currently provides
 * both a standalone ASG Attachment resource (describing an ASG attached to
 * an ELB), and an AutoScaling Group resource with
 * `loadBalancers` defined in-line. At this time you cannot use an ASG with in-line
 * load balancers in conjunction with an ASG Attachment resource. Doing so will cause a
 * conflict and will overwrite attachments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create a new load balancer attachment
 * const asgAttachmentBar = new aws.autoscaling.Attachment("asgAttachmentBar", {
 *     autoscalingGroupName: aws_autoscaling_group_asg.id,
 *     elb: aws_elb_bar.id,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create a new ALB Target Group attachment
 * const asgAttachmentBar = new aws.autoscaling.Attachment("asgAttachmentBar", {
 *     albTargetGroupArn: aws_alb_target_group_test.arn,
 *     autoscalingGroupName: aws_autoscaling_group_asg.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/autoscaling_attachment.html.markdown.
 */
class Attachment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["albTargetGroupArn"] = state ? state.albTargetGroupArn : undefined;
            inputs["autoscalingGroupName"] = state ? state.autoscalingGroupName : undefined;
            inputs["elb"] = state ? state.elb : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.autoscalingGroupName === undefined) {
                throw new Error("Missing required property 'autoscalingGroupName'");
            }
            inputs["albTargetGroupArn"] = args ? args.albTargetGroupArn : undefined;
            inputs["autoscalingGroupName"] = args ? args.autoscalingGroupName : undefined;
            inputs["elb"] = args ? args.elb : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Attachment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Attachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Attachment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Attachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Attachment.__pulumiType;
    }
}
exports.Attachment = Attachment;
/** @internal */
Attachment.__pulumiType = 'aws:autoscaling/attachment:Attachment';
//# sourceMappingURL=attachment.js.map