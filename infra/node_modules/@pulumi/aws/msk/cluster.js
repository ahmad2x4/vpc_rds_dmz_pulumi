"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages AWS Managed Streaming for Kafka cluster
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const vpc = new aws.ec2.Vpc("vpc", {
 *     cidrBlock: "192.168.0.0/22",
 * });
 * const azs = aws.getAvailabilityZones({
 *     state: "available",
 * });
 * const subnetAz1 = new aws.ec2.Subnet("subnetAz1", {
 *     availabilityZone: azs.names[0],
 *     cidrBlock: "192.168.0.0/24",
 *     vpcId: vpc.id,
 * });
 * const subnetAz2 = new aws.ec2.Subnet("subnetAz2", {
 *     availabilityZone: azs.names[1],
 *     cidrBlock: "192.168.1.0/24",
 *     vpcId: vpc.id,
 * });
 * const subnetAz3 = new aws.ec2.Subnet("subnetAz3", {
 *     availabilityZone: azs.names[2],
 *     cidrBlock: "192.168.2.0/24",
 *     vpcId: vpc.id,
 * });
 * const sg = new aws.ec2.SecurityGroup("sg", {
 *     vpcId: vpc.id,
 * });
 * const kms = new aws.kms.Key("kms", {
 *     description: "example",
 * });
 * const example = new aws.msk.Cluster("example", {
 *     brokerNodeGroupInfo: {
 *         clientSubnets: [
 *             subnetAz1.id,
 *             subnetAz2.id,
 *             subnetAz3.id,
 *         ],
 *         ebsVolumeSize: 1000,
 *         instanceType: "kafka.m5.large",
 *         securityGroups: [sg.id],
 *     },
 *     clusterName: "example",
 *     encryptionInfo: {
 *         encryptionAtRestKmsKeyArn: kms.arn,
 *     },
 *     kafkaVersion: "2.1.0",
 *     numberOfBrokerNodes: 3,
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 *
 * export const zookeeperConnectString = example.zookeeperConnectString;
 * export const bootstrapBrokers = example.bootstrapBrokers;
 * export const bootstrapBrokersTls = example.bootstrapBrokersTls;
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/msk_cluster.html.markdown.
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["bootstrapBrokers"] = state ? state.bootstrapBrokers : undefined;
            inputs["bootstrapBrokersTls"] = state ? state.bootstrapBrokersTls : undefined;
            inputs["brokerNodeGroupInfo"] = state ? state.brokerNodeGroupInfo : undefined;
            inputs["clientAuthentication"] = state ? state.clientAuthentication : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["configurationInfo"] = state ? state.configurationInfo : undefined;
            inputs["currentVersion"] = state ? state.currentVersion : undefined;
            inputs["encryptionInfo"] = state ? state.encryptionInfo : undefined;
            inputs["enhancedMonitoring"] = state ? state.enhancedMonitoring : undefined;
            inputs["kafkaVersion"] = state ? state.kafkaVersion : undefined;
            inputs["numberOfBrokerNodes"] = state ? state.numberOfBrokerNodes : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["zookeeperConnectString"] = state ? state.zookeeperConnectString : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.brokerNodeGroupInfo === undefined) {
                throw new Error("Missing required property 'brokerNodeGroupInfo'");
            }
            if (!args || args.clusterName === undefined) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (!args || args.kafkaVersion === undefined) {
                throw new Error("Missing required property 'kafkaVersion'");
            }
            if (!args || args.numberOfBrokerNodes === undefined) {
                throw new Error("Missing required property 'numberOfBrokerNodes'");
            }
            inputs["brokerNodeGroupInfo"] = args ? args.brokerNodeGroupInfo : undefined;
            inputs["clientAuthentication"] = args ? args.clientAuthentication : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["configurationInfo"] = args ? args.configurationInfo : undefined;
            inputs["encryptionInfo"] = args ? args.encryptionInfo : undefined;
            inputs["enhancedMonitoring"] = args ? args.enhancedMonitoring : undefined;
            inputs["kafkaVersion"] = args ? args.kafkaVersion : undefined;
            inputs["numberOfBrokerNodes"] = args ? args.numberOfBrokerNodes : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["bootstrapBrokers"] = undefined /*out*/;
            inputs["bootstrapBrokersTls"] = undefined /*out*/;
            inputs["currentVersion"] = undefined /*out*/;
            inputs["zookeeperConnectString"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:msk/cluster:Cluster';
//# sourceMappingURL=cluster.js.map