"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Route53 health check.
 *
 * ## Example Usage
 *
 * ### Connectivity and HTTP Status Code Check
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.route53.HealthCheck("example", {
 *     failureThreshold: 5,
 *     fqdn: "example.com",
 *     port: 80,
 *     requestInterval: 30,
 *     resourcePath: "/",
 *     tags: {
 *         Name: "tf-test-health-check",
 *     },
 *     type: "HTTP",
 * });
 * ```
 *
 * ### Connectivity and String Matching Check
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.route53.HealthCheck("example", {
 *     failureThreshold: 5,
 *     fqdn: "example.com",
 *     port: 443,
 *     requestInterval: 30,
 *     resourcePath: "/",
 *     searchString: "example",
 *     type: "HTTPS_STR_MATCH",
 * });
 * ```
 *
 * ### Aggregate Check
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const parent = new aws.route53.HealthCheck("parent", {
 *     childHealthThreshold: 1,
 *     childHealthchecks: [aws_route53_health_check_child.id],
 *     tags: {
 *         Name: "tf-test-calculated-health-check",
 *     },
 *     type: "CALCULATED",
 * });
 * ```
 *
 * ### CloudWatch Alarm Check
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foobar = new aws.cloudwatch.MetricAlarm("foobar", {
 *     alarmDescription: "This metric monitors ec2 cpu utilization",
 *     comparisonOperator: "GreaterThanOrEqualToThreshold",
 *     evaluationPeriods: 2,
 *     metricName: "CPUUtilization",
 *     namespace: "AWS/EC2",
 *     period: 120,
 *     statistic: "Average",
 *     threshold: 80,
 * });
 * const foo = new aws.route53.HealthCheck("foo", {
 *     cloudwatchAlarmName: foobar.alarmName,
 *     cloudwatchAlarmRegion: "us-west-2",
 *     insufficientDataHealthStatus: "Healthy",
 *     type: "CLOUDWATCH_METRIC",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/route53_health_check.html.markdown.
 */
class HealthCheck extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["childHealthThreshold"] = state ? state.childHealthThreshold : undefined;
            inputs["childHealthchecks"] = state ? state.childHealthchecks : undefined;
            inputs["cloudwatchAlarmName"] = state ? state.cloudwatchAlarmName : undefined;
            inputs["cloudwatchAlarmRegion"] = state ? state.cloudwatchAlarmRegion : undefined;
            inputs["enableSni"] = state ? state.enableSni : undefined;
            inputs["failureThreshold"] = state ? state.failureThreshold : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["insufficientDataHealthStatus"] = state ? state.insufficientDataHealthStatus : undefined;
            inputs["invertHealthcheck"] = state ? state.invertHealthcheck : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["measureLatency"] = state ? state.measureLatency : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["referenceName"] = state ? state.referenceName : undefined;
            inputs["regions"] = state ? state.regions : undefined;
            inputs["requestInterval"] = state ? state.requestInterval : undefined;
            inputs["resourcePath"] = state ? state.resourcePath : undefined;
            inputs["searchString"] = state ? state.searchString : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["childHealthThreshold"] = args ? args.childHealthThreshold : undefined;
            inputs["childHealthchecks"] = args ? args.childHealthchecks : undefined;
            inputs["cloudwatchAlarmName"] = args ? args.cloudwatchAlarmName : undefined;
            inputs["cloudwatchAlarmRegion"] = args ? args.cloudwatchAlarmRegion : undefined;
            inputs["enableSni"] = args ? args.enableSni : undefined;
            inputs["failureThreshold"] = args ? args.failureThreshold : undefined;
            inputs["fqdn"] = args ? args.fqdn : undefined;
            inputs["insufficientDataHealthStatus"] = args ? args.insufficientDataHealthStatus : undefined;
            inputs["invertHealthcheck"] = args ? args.invertHealthcheck : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["measureLatency"] = args ? args.measureLatency : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["referenceName"] = args ? args.referenceName : undefined;
            inputs["regions"] = args ? args.regions : undefined;
            inputs["requestInterval"] = args ? args.requestInterval : undefined;
            inputs["resourcePath"] = args ? args.resourcePath : undefined;
            inputs["searchString"] = args ? args.searchString : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(HealthCheck.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing HealthCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new HealthCheck(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of HealthCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthCheck.__pulumiType;
    }
}
exports.HealthCheck = HealthCheck;
/** @internal */
HealthCheck.__pulumiType = 'aws:route53/healthCheck:HealthCheck';
//# sourceMappingURL=healthCheck.js.map