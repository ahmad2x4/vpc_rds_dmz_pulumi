"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Glacier Vault Lock. You can refer to the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html) for a full explanation of the Glacier Vault Lock functionality.
 *
 * > **NOTE:** This resource allows you to test Glacier Vault Lock policies by setting the `completeLock` argument to `false`. When testing policies in this manner, the Glacier Vault Lock automatically expires after 24 hours and this provider will show this resource as needing recreation after that time. To permanently apply the policy, set the `completeLock` argument to `true`. When changing `completeLock` to `true`, it is expected the resource will show as recreating.
 *
 * !> **WARNING:** Once a Glacier Vault Lock is completed, it is immutable. The deletion of the Glacier Vault Lock is not be possible and attempting to remove it from this provider will return an error. Set the `ignoreDeletionError` argument to `true` and apply this configuration before attempting to delete this resource via this provider or remove this resource from this provider's management.
 *
 * ## Example Usage
 *
 * ### Testing Glacier Vault Lock Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleVault = new aws.glacier.Vault("example", {});
 * const examplePolicyDocument = exampleVault.arn.apply(arn => aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["glacier:DeleteArchive"],
 *         conditions: [{
 *             test: "NumericLessThanEquals",
 *             values: ["365"],
 *             variable: "glacier:ArchiveAgeinDays",
 *         }],
 *         effect: "Deny",
 *         resources: [arn],
 *     }],
 * }));
 * const exampleVaultLock = new aws.glacier.VaultLock("example", {
 *     completeLock: false,
 *     policy: examplePolicyDocument.json,
 *     vaultName: exampleVault.name,
 * });
 * ```
 *
 * ### Permanently Applying Glacier Vault Lock Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glacier.VaultLock("example", {
 *     completeLock: true,
 *     policy: aws_iam_policy_document_example.json,
 *     vaultName: aws_glacier_vault_example.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glacier_vault_lock.html.markdown.
 */
class VaultLock extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["completeLock"] = state ? state.completeLock : undefined;
            inputs["ignoreDeletionError"] = state ? state.ignoreDeletionError : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["vaultName"] = state ? state.vaultName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.completeLock === undefined) {
                throw new Error("Missing required property 'completeLock'");
            }
            if (!args || args.policy === undefined) {
                throw new Error("Missing required property 'policy'");
            }
            if (!args || args.vaultName === undefined) {
                throw new Error("Missing required property 'vaultName'");
            }
            inputs["completeLock"] = args ? args.completeLock : undefined;
            inputs["ignoreDeletionError"] = args ? args.ignoreDeletionError : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["vaultName"] = args ? args.vaultName : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(VaultLock.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VaultLock resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new VaultLock(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VaultLock.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultLock.__pulumiType;
    }
}
exports.VaultLock = VaultLock;
/** @internal */
VaultLock.__pulumiType = 'aws:glacier/vaultLock:VaultLock';
//# sourceMappingURL=vaultLock.js.map