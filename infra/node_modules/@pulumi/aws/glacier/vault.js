"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Glacier Vault Resource. You can refer to the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-vaults.html) for a full explanation of the Glacier Vault functionality
 *
 * > **NOTE:** When removing a Glacier Vault, the Vault must be empty.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const awsSnsTopic = new aws.sns.Topic("aws.sns.Topic", {});
 * const myArchive = new aws.glacier.Vault("myArchive", {
 *     accessPolicy: `{
 *     "Version":"2012-10-17",
 *     "Statement":[
 *        {
 *           "Sid": "add-read-only-perm",
 *           "Principal": "*",
 *           "Effect": "Allow",
 *           "Action": [
 *              "glacier:InitiateJob",
 *              "glacier:GetJobOutput"
 *           ],
 *           "Resource": "arn:aws:glacier:eu-west-1:432981146916:vaults/MyArchive"
 *        }
 *     ]
 * }
 * `,
 *     notifications: [{
 *         events: [
 *             "ArchiveRetrievalCompleted",
 *             "InventoryRetrievalCompleted",
 *         ],
 *         snsTopic: awsSnsTopic.arn,
 *     }],
 *     tags: {
 *         Test: "MyArchive",
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glacier_vault.html.markdown.
 */
class Vault extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accessPolicy"] = state ? state.accessPolicy : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notifications"] = state ? state.notifications : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            inputs["accessPolicy"] = args ? args.accessPolicy : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notifications"] = args ? args.notifications : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Vault.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Vault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Vault(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Vault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vault.__pulumiType;
    }
}
exports.Vault = Vault;
/** @internal */
Vault.__pulumiType = 'aws:glacier/vault:Vault';
//# sourceMappingURL=vault.js.map