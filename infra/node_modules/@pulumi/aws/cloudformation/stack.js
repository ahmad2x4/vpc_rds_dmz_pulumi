"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudFormation Stack resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const network = new aws.cloudformation.Stack("network", {
 *     parameters: {
 *         VPCCidr: "10.0.0.0/16",
 *     },
 *     templateBody: `{
 *   "Parameters" : {
 *     "VPCCidr" : {
 *       "Type" : "String",
 *       "Default" : "10.0.0.0/16",
 *       "Description" : "Enter the CIDR block for the VPC. Default is 10.0.0.0/16."
 *     }
 *   },
 *   "Resources" : {
 *     "myVpc": {
 *       "Type" : "AWS::EC2::VPC",
 *       "Properties" : {
 *         "CidrBlock" : { "Ref" : "VPCCidr" },
 *         "Tags" : [
 *           {"Key": "Name", "Value": "Primary_CF_VPC"}
 *         ]
 *       }
 *     }
 *   }
 * }
 * `,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudformation_stack.html.markdown.
 */
class Stack extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["capabilities"] = state ? state.capabilities : undefined;
            inputs["disableRollback"] = state ? state.disableRollback : undefined;
            inputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notificationArns"] = state ? state.notificationArns : undefined;
            inputs["onFailure"] = state ? state.onFailure : undefined;
            inputs["outputs"] = state ? state.outputs : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["policyBody"] = state ? state.policyBody : undefined;
            inputs["policyUrl"] = state ? state.policyUrl : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["templateBody"] = state ? state.templateBody : undefined;
            inputs["templateUrl"] = state ? state.templateUrl : undefined;
            inputs["timeoutInMinutes"] = state ? state.timeoutInMinutes : undefined;
        }
        else {
            const args = argsOrState;
            inputs["capabilities"] = args ? args.capabilities : undefined;
            inputs["disableRollback"] = args ? args.disableRollback : undefined;
            inputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notificationArns"] = args ? args.notificationArns : undefined;
            inputs["onFailure"] = args ? args.onFailure : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["policyBody"] = args ? args.policyBody : undefined;
            inputs["policyUrl"] = args ? args.policyUrl : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["templateBody"] = args ? args.templateBody : undefined;
            inputs["templateUrl"] = args ? args.templateUrl : undefined;
            inputs["timeoutInMinutes"] = args ? args.timeoutInMinutes : undefined;
            inputs["outputs"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Stack.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Stack(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }
}
exports.Stack = Stack;
/** @internal */
Stack.__pulumiType = 'aws:cloudformation/stack:Stack';
//# sourceMappingURL=stack.js.map