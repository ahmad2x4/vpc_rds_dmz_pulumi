"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Redshift Cluster Resource.
 *
 * > **Note:** All arguments including the username and password will be stored in the raw state as plain-text.
 * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const defaultCluster = new aws.redshift.Cluster("default", {
 *     clusterIdentifier: "tf-redshift-cluster",
 *     clusterType: "single-node",
 *     databaseName: "mydb",
 *     masterPassword: "Mustbe8characters",
 *     masterUsername: "foo",
 *     nodeType: "dc1.large",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/redshift_cluster.html.markdown.
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["allowVersionUpgrade"] = state ? state.allowVersionUpgrade : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["automatedSnapshotRetentionPeriod"] = state ? state.automatedSnapshotRetentionPeriod : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            inputs["clusterParameterGroupName"] = state ? state.clusterParameterGroupName : undefined;
            inputs["clusterPublicKey"] = state ? state.clusterPublicKey : undefined;
            inputs["clusterRevisionNumber"] = state ? state.clusterRevisionNumber : undefined;
            inputs["clusterSecurityGroups"] = state ? state.clusterSecurityGroups : undefined;
            inputs["clusterSubnetGroupName"] = state ? state.clusterSubnetGroupName : undefined;
            inputs["clusterType"] = state ? state.clusterType : undefined;
            inputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["elasticIp"] = state ? state.elasticIp : undefined;
            inputs["encrypted"] = state ? state.encrypted : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["enhancedVpcRouting"] = state ? state.enhancedVpcRouting : undefined;
            inputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            inputs["iamRoles"] = state ? state.iamRoles : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["logging"] = state ? state.logging : undefined;
            inputs["masterPassword"] = state ? state.masterPassword : undefined;
            inputs["masterUsername"] = state ? state.masterUsername : undefined;
            inputs["nodeType"] = state ? state.nodeType : undefined;
            inputs["numberOfNodes"] = state ? state.numberOfNodes : undefined;
            inputs["ownerAccount"] = state ? state.ownerAccount : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            inputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            inputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            inputs["snapshotClusterIdentifier"] = state ? state.snapshotClusterIdentifier : undefined;
            inputs["snapshotCopy"] = state ? state.snapshotCopy : undefined;
            inputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.clusterIdentifier === undefined) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if (!args || args.nodeType === undefined) {
                throw new Error("Missing required property 'nodeType'");
            }
            inputs["allowVersionUpgrade"] = args ? args.allowVersionUpgrade : undefined;
            inputs["automatedSnapshotRetentionPeriod"] = args ? args.automatedSnapshotRetentionPeriod : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            inputs["clusterParameterGroupName"] = args ? args.clusterParameterGroupName : undefined;
            inputs["clusterPublicKey"] = args ? args.clusterPublicKey : undefined;
            inputs["clusterRevisionNumber"] = args ? args.clusterRevisionNumber : undefined;
            inputs["clusterSecurityGroups"] = args ? args.clusterSecurityGroups : undefined;
            inputs["clusterSubnetGroupName"] = args ? args.clusterSubnetGroupName : undefined;
            inputs["clusterType"] = args ? args.clusterType : undefined;
            inputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["elasticIp"] = args ? args.elasticIp : undefined;
            inputs["encrypted"] = args ? args.encrypted : undefined;
            inputs["endpoint"] = args ? args.endpoint : undefined;
            inputs["enhancedVpcRouting"] = args ? args.enhancedVpcRouting : undefined;
            inputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            inputs["iamRoles"] = args ? args.iamRoles : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["logging"] = args ? args.logging : undefined;
            inputs["masterPassword"] = args ? args.masterPassword : undefined;
            inputs["masterUsername"] = args ? args.masterUsername : undefined;
            inputs["nodeType"] = args ? args.nodeType : undefined;
            inputs["numberOfNodes"] = args ? args.numberOfNodes : undefined;
            inputs["ownerAccount"] = args ? args.ownerAccount : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            inputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            inputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            inputs["snapshotClusterIdentifier"] = args ? args.snapshotClusterIdentifier : undefined;
            inputs["snapshotCopy"] = args ? args.snapshotCopy : undefined;
            inputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:redshift/cluster:Cluster';
//# sourceMappingURL=cluster.js.map