import * as pulumi from "@pulumi/pulumi";
import { Role } from "../iam";
import * as lambda from "../lambda";
import * as utils from "../utils";
/**
 * @deprecated Use [aws.lambda.Context] instead.
 */
export declare type Context = lambda.Context;
/**
 * [Handler] is the signature for a serverless function that will be invoked each time the AWS
 * Lambda is invoked.
 *
 * @deprecated Use [aws.lambda.Callback] instead.
 */
export declare type Handler = lambda.Callback<any, any>;
/**
 * HandlerFactory is the signature for a function that will be called once to produce the serverless
 * function that AWS Lambda will invoke.  It can be used to initialize expensive state once that can
 * then be used across all invocations of the Lambda (as long as the Lambda is using the same warm
 * node instance).
 *
 * @deprecated Use [aws.lambda.CallbackFactory] instead.
 */
export declare type HandlerFactory = () => Handler;
/**
 * FunctionOptions provides configuration options for the serverless Function.  It is effectively
 * equivalent to [aws.lambda.FunctionArgs] except with a few important differences documented at the
 * property level.  For example, [role] is an actual iam.Role instance, and not an ARN. Properties
 * like [runtime] are now optional.  And some properties (like [code]) are entirely disallowed.
 *
 * @deprecated Use [aws.lambda.FunctionOptions] instead.
 */
export declare type FunctionOptions = utils.Overwrite<lambda.CallbackFunctionArgs<any, any>, {
    /**
     * @deprecated use [callback] instead.
     */
    func?: Handler;
    /**
     * @deprecated use [callbackFactory] instead.
     */
    factoryFunc?: HandlerFactory;
    /**
     * The paths relative to the program folder to include in the Lambda upload.  Default is `[]`.
     *
     * @deprecated Use [codePathOptions] instead.
     */
    includePaths?: string[];
    /**
     * The packages relative to the program folder to include in the Lambda upload.  The version of
     * the package installed in the program folder and it's dependencies will all be included.
     * Default is `[]`.
     *
     * @deprecated Use [codePathOptions] instead.
     */
    includePackages?: string[];
    /**
     * The packages relative to the program folder to not include the Lambda upload. This can be
     * used to override the default serialization logic that includes all packages referenced by
     * project.json (except @pulumi packages).  Default is `[]`.
     *
     * @deprecated Use [codePathOptions] instead.
     */
    excludePackages?: string[];
}>;
/**
 * Function is a higher-level API for creating and managing AWS Lambda Function resources
 * implemented by a Pulumi lambda expression and with a set of attached policies.
 *
 * @deprecated Use [lambda.CallbackFunction] instead.
 */
export declare class Function extends pulumi.ComponentResource {
    readonly options: FunctionOptions;
    readonly lambda: lambda.Function;
    readonly role: Role | undefined;
    /**
     * @param func Deprecated.  Pass the function as [options.func] or [options.factoryFunc] instead.
     */
    constructor(name: string, options: FunctionOptions, func?: Handler, opts?: pulumi.ResourceOptions);
}
