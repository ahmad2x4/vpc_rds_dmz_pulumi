"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Lightsail Key Pair, for use with Lightsail Instances. These key pairs
 * are separate from EC2 Key Pairs, and must be created or imported for use with
 * Lightsail.
 *
 * > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
 *
 * ## Example Usage, creating a new Key Pair
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create a new Lightsail Key Pair
 * const lgKeyPair = new aws.lightsail.KeyPair("lgKeyPair", {});
 * ```
 *
 * ## Create new Key Pair, encrypting the private key with a PGP Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const lgKeyPair = new aws.lightsail.KeyPair("lgKeyPair", {
 *     pgpKey: "keybase:keybaseusername",
 * });
 * ```
 *
 * ## Import an existing public key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const lgKeyPair = new aws.lightsail.KeyPair("lgKeyPair", {
 *     publicKey: fs.readFileSync("~/.ssh/id_rsa.pub", "utf-8"),
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lightsail_key_pair.html.markdown.
 */
class KeyPair extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["encryptedFingerprint"] = state ? state.encryptedFingerprint : undefined;
            inputs["encryptedPrivateKey"] = state ? state.encryptedPrivateKey : undefined;
            inputs["fingerprint"] = state ? state.fingerprint : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["pgpKey"] = state ? state.pgpKey : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["publicKey"] = state ? state.publicKey : undefined;
        }
        else {
            const args = argsOrState;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["pgpKey"] = args ? args.pgpKey : undefined;
            inputs["publicKey"] = args ? args.publicKey : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["encryptedFingerprint"] = undefined /*out*/;
            inputs["encryptedPrivateKey"] = undefined /*out*/;
            inputs["fingerprint"] = undefined /*out*/;
            inputs["privateKey"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(KeyPair.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing KeyPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new KeyPair(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KeyPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyPair.__pulumiType;
    }
}
exports.KeyPair = KeyPair;
/** @internal */
KeyPair.__pulumiType = 'aws:lightsail/keyPair:KeyPair';
//# sourceMappingURL=keyPair.js.map