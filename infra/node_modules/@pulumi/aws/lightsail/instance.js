"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Lightsail Instance. Amazon Lightsail is a service to provide easy virtual private servers
 * with custom software already setup. See [What is Amazon Lightsail?](https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail)
 * for more information.
 *
 * > **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create a new GitLab Lightsail Instance
 * const gitlabTest = new aws.lightsail.Instance("gitlabTest", {
 *     availabilityZone: "us-east-1b",
 *     blueprintId: "string",
 *     bundleId: "string",
 *     keyPairName: "someKeyName",
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Availability Zones
 *
 * Lightsail currently supports the following Availability Zones (e.g. `us-east-1a`):
 *
 * - `ap-northeast-1{a,c,d}`
 * - `ap-northeast-2{a,c}`
 * - `ap-south-1{a,b}`
 * - `ap-southeast-1{a,b,c}`
 * - `ap-southeast-2{a,b,c}`
 * - `ca-central-1{a,b}`
 * - `eu-central-1{a,b,c}`
 * - `eu-west-1{a,b,c}`
 * - `eu-west-2{a,b,c}`
 * - `eu-west-3{a,b,c}`
 * - `us-east-1{a,b,c,d,e,f}`
 * - `us-east-2{a,b,c}`
 * - `us-west-2{a,b,c}`
 *
 * ## Blueprints
 *
 * Lightsail currently supports the following Blueprint IDs:
 *
 * ### OS Only
 *
 * - `amazonLinux20180302`
 * - `centos7190101`
 * - `debian87`
 * - `debian95`
 * - `freebsd111`
 * - `opensuse422`
 * - `ubuntu16042`
 * - `ubuntu1804`
 *
 * ### Apps and OS
 *
 * - `drupal856`
 * - `gitlab11141`
 * - `joomla3811`
 * - `lamp56372`
 * - `lamp71201`
 * - `magento225`
 * - `mean401`
 * - `nginx11401`
 * - `nodejs1080`
 * - `pleskUbuntu178111`
 * - `redmine346`
 * - `wordpress498`
 * - `wordpressMultisite498`
 *
 * ## Bundles
 *
 * Lightsail currently supports the following Bundle IDs (e.g. an instance in `ap-northeast-1` would use `small20`):
 *
 * ### Prefix
 *
 * A Bundle ID starts with one of the below size prefixes:
 *
 * - `nano_`
 * - `micro_`
 * - `small_`
 * - `medium_`
 * - `large_`
 * - `xlarge_`
 * - `2xlarge_`
 *
 * ### Suffix
 *
 * A Bundle ID ends with one of the following suffixes depending on Availability Zone:
 *
 * - ap-northeast-1: `20`
 * - ap-northeast-2: `20`
 * - ap-south-1: `21`
 * - ap-southeast-1: `20`
 * - ap-southeast-2: `22`
 * - ca-central-1: `20`
 * - eu-central-1: `20`
 * - eu-west-1: `20`
 * - eu-west-2: `20`
 * - eu-west-3: `20`
 * - us-east-1: `20`
 * - us-east-2: `20`
 * - us-west-2: `20`
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lightsail_instance.html.markdown.
 */
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["blueprintId"] = state ? state.blueprintId : undefined;
            inputs["bundleId"] = state ? state.bundleId : undefined;
            inputs["cpuCount"] = state ? state.cpuCount : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            inputs["isStaticIp"] = state ? state.isStaticIp : undefined;
            inputs["keyPairName"] = state ? state.keyPairName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["privateIpAddress"] = state ? state.privateIpAddress : undefined;
            inputs["publicIpAddress"] = state ? state.publicIpAddress : undefined;
            inputs["ramSize"] = state ? state.ramSize : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["userData"] = state ? state.userData : undefined;
            inputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.availabilityZone === undefined) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (!args || args.blueprintId === undefined) {
                throw new Error("Missing required property 'blueprintId'");
            }
            if (!args || args.bundleId === undefined) {
                throw new Error("Missing required property 'bundleId'");
            }
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["blueprintId"] = args ? args.blueprintId : undefined;
            inputs["bundleId"] = args ? args.bundleId : undefined;
            inputs["keyPairName"] = args ? args.keyPairName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["cpuCount"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["ipv6Address"] = undefined /*out*/;
            inputs["isStaticIp"] = undefined /*out*/;
            inputs["privateIpAddress"] = undefined /*out*/;
            inputs["publicIpAddress"] = undefined /*out*/;
            inputs["ramSize"] = undefined /*out*/;
            inputs["username"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'aws:lightsail/instance:Instance';
//# sourceMappingURL=instance.js.map