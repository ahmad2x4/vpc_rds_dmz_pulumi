"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic MapReduce Cluster, a web service that makes it easy to
 * process large amounts of data efficiently. See [Amazon Elastic MapReduce Documentation](https://aws.amazon.com/documentation/elastic-mapreduce/)
 * for more information.
 *
 * To configure [Instance Groups](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-groups) for [task nodes](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-master-core-task-nodes.html#emr-plan-task), see the [`aws.emr.InstanceGroup` resource](https://www.terraform.io/docs/providers/aws/r/emr_instance_group.html).
 *
 * > Support for [Instance Fleets](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-group-configuration.html#emr-plan-instance-fleets) will be made available in an upcoming release.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cluster = new aws.emr.Cluster("cluster", {
 *     additionalInfo: `{
 *   "instanceAwsClientConfiguration": {
 *     "proxyPort": 8099,
 *     "proxyHost": "myproxy.example.com"
 *   }
 * }
 * `,
 *     applications: ["Spark"],
 *     bootstrapActions: [{
 *         args: [
 *             "instance.isMaster=true",
 *             "echo running on master node",
 *         ],
 *         name: "runif",
 *         path: "s3://elasticmapreduce/bootstrap-actions/run-if",
 *     }],
 *     configurationsJson: `  [
 *     {
 *       "Classification": "hadoop-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     },
 *     {
 *       "Classification": "spark-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     }
 *   ]
 * `,
 *     coreInstanceGroup: {
 *         autoscalingPolicy: `{
 * "Constraints": {
 *   "MinCapacity": 1,
 *   "MaxCapacity": 2
 * },
 * "Rules": [
 *   {
 *     "Name": "ScaleOutMemoryPercentage",
 *     "Description": "Scale out if YARNMemoryAvailablePercentage is less than 15",
 *     "Action": {
 *       "SimpleScalingPolicyConfiguration": {
 *         "AdjustmentType": "CHANGE_IN_CAPACITY",
 *         "ScalingAdjustment": 1,
 *         "CoolDown": 300
 *       }
 *     },
 *     "Trigger": {
 *       "CloudWatchAlarmDefinition": {
 *         "ComparisonOperator": "LESS_THAN",
 *         "EvaluationPeriods": 1,
 *         "MetricName": "YARNMemoryAvailablePercentage",
 *         "Namespace": "AWS/ElasticMapReduce",
 *         "Period": 300,
 *         "Statistic": "AVERAGE",
 *         "Threshold": 15.0,
 *         "Unit": "PERCENT"
 *       }
 *     }
 *   }
 * ]
 * }
 * `,
 *         bidPrice: "0.30",
 *         ebsConfigs: [{
 *             size: 40,
 *             type: "gp2",
 *             volumesPerInstance: 1,
 *         }],
 *         instanceCount: 1,
 *         instanceType: "c4.large",
 *     },
 *     ebsRootVolumeSize: 100,
 *     ec2Attributes: {
 *         emrManagedMasterSecurityGroup: aws_security_group_sg.id,
 *         emrManagedSlaveSecurityGroup: aws_security_group_sg.id,
 *         instanceProfile: aws_iam_instance_profile_emr_profile.arn,
 *         subnetId: aws_subnet_main.id,
 *     },
 *     keepJobFlowAliveWhenNoSteps: true,
 *     masterInstanceGroup: {
 *         instanceType: "m4.large",
 *     },
 *     releaseLabel: "emr-4.6.0",
 *     serviceRole: aws_iam_role_iam_emr_service_role.arn,
 *     tags: {
 *         env: "env",
 *         role: "rolename",
 *     },
 *     terminationProtection: false,
 * });
 * ```
 *
 * The `aws.emr.Cluster` resource typically requires two IAM roles, one for the EMR Cluster
 * to use as a service, and another to place on your Cluster Instances to interact
 * with AWS from those instances. The suggested role policy template for the EMR service is `AmazonElasticMapReduceRole`,
 * and `AmazonElasticMapReduceforEC2Role` for the EC2 profile. See the [Getting
 * Started](https://docs.aws.amazon.com/ElasticMapReduce/latest/ManagementGuide/emr-gs-launch-sample-cluster.html)
 * guide for more information on these IAM roles. There is also a fully-bootable
 * example this provider configuration at the bottom of this page.
 *
 * ### Enable Debug Logging
 *
 * [Debug logging in EMR](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-debugging.html)
 * is implemented as a step. It is highly recommended to utilize the
 * [lifecycle configuration block](https://www.terraform.io/docs/configuration/resources.html) with `ignoreChanges` if other
 * steps are being managed outside of this provider.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.emr.Cluster("example", {
 *     steps: [{
 *         actionOnFailure: "TERMINATE_CLUSTER",
 *         hadoopJarStep: {
 *             args: ["state-pusher-script"],
 *             jar: "command-runner.jar",
 *         },
 *         name: "Setup Hadoop Debugging",
 *     }],
 * }, {ignoreChanges: ["stepConcurrencyLevel", "steps"]});
 * ```
 *
 * ### Multiple Node Master Instance Group
 *
 * Available in EMR version 5.23.0 and later, an EMR Cluster can be launched with three master nodes for high availability. Additional information about this functionality and its requirements can be found in the [EMR Management Guide](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-ha.html).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Map public IP on launch must be enabled for public (Internet accessible) subnets
 * const exampleSubnet = new aws.ec2.Subnet("example", {
 *     mapPublicIpOnLaunch: true,
 * });
 * const exampleCluster = new aws.emr.Cluster("example", {
 *     // coreInstanceGroup must be configured
 *     coreInstanceGroup: {},
 *     ec2Attributes: {
 *         subnetId: exampleSubnet.id,
 *     },
 *     masterInstanceGroup: {
 *         // Master instance count must be set to 3
 *         instanceCount: 3,
 *     },
 *     // EMR version must be 5.23.0 or later
 *     releaseLabel: "emr-5.24.1",
 *     // Termination protection is automatically enabled for multiple masters
 *     // To destroy the cluster, this must be configured to false and applied first
 *     terminationProtection: true,
 * });
 * ```
 *
 * ## coreInstanceGroup Configuration Block
 *
 * Supported arguments for the `coreInstanceGroup` configuration block:
 *
 * * `instanceType` - (Required) EC2 instance type for all instances in the instance group.
 * * `autoscalingPolicy` - (Optional) String containing the [EMR Auto Scaling Policy](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html) JSON.
 * * `bidPrice` - (Optional) Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
 * * `ebsConfig` - (Optional) Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
 * * `instanceCount` - (Optional) Target number of instances for the instance group. Must be at least 1. Defaults to 1.
 * * `name` - (Optional) Friendly name given to the instance group.
 *
 * ## ec2Attributes
 *
 * Attributes for the Amazon EC2 instances running the job flow
 *
 * * `keyName` - (Optional) Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`
 * * `subnetId` - (Optional) VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in a Amazon VPC
 * * `additionalMasterSecurityGroups` - (Optional) String containing a comma separated list of additional Amazon EC2 security group IDs for the master node
 * * `additionalSlaveSecurityGroups` - (Optional) String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string
 * * `emrManagedMasterSecurityGroup` - (Optional) Identifier of the Amazon EC2 EMR-Managed security group for the master node
 * * `emrManagedSlaveSecurityGroup` - (Optional) Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes
 * * `serviceAccessSecurityGroup` - (Optional) Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet
 * * `instanceProfile` - (Required) Instance Profile for EC2 instances of the cluster assume this role
 *
 * > **NOTE on EMR-Managed security groups:** These security groups will have any
 * missing inbound or outbound access rules added and maintained by AWS, to ensure
 * proper communication between instances in a cluster. The EMR service will
 * maintain these rules for groups provided in `emrManagedMasterSecurityGroup`
 * and `emrManagedSlaveSecurityGroup`; attempts to remove the required rules
 * may succeed, only for the EMR service to re-add them in a matter of minutes.
 * This may cause this provider to fail to destroy an environment that contains an EMR
 * cluster, because the EMR service does not revoke rules added on deletion,
 * leaving a cyclic dependency between the security groups that prevents their
 * deletion. To avoid this, use the `revokeRulesOnDelete` optional attribute for
 * any Security Group used in `emrManagedMasterSecurityGroup` and
 * `emrManagedSlaveSecurityGroup`. See [Amazon EMR-Managed Security
 * Groups](http://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-man-sec-groups.html)
 * for more information about the EMR-managed security group rules.
 *
 * ## kerberosAttributes
 *
 * Attributes for Kerberos configuration
 *
 * * `adDomainJoinPassword` - (Optional) The Active Directory password for `adDomainJoinUser`. This provider cannot perform drift detection of this configuration.
 * * `adDomainJoinUser` - (Optional) Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
 * * `crossRealmTrustPrincipalPassword` - (Optional) Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
 * * `kdcAdminPassword` - (Required) The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
 * * `realm` - (Required) The name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
 *
 * ## instanceGroup
 *
 * Attributes for each task instance group in the cluster
 *
 * * `instanceRole` - (Required) The role of the instance group in the cluster. Valid values are: `MASTER`, `CORE`, and `TASK`.
 * * `instanceType` - (Required) The EC2 instance type for all instances in the instance group
 * * `instanceCount` - (Optional) Target number of instances for the instance group
 * * `name` - (Optional) Friendly name given to the instance group
 * * `bidPrice` - (Optional) If set, the bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
 * * `ebsConfig` - (Optional) A list of attributes for the EBS volumes attached to each instance in the instance group. Each `ebsConfig` defined will result in additional EBS volumes being attached to _each_ instance in the instance group. Defined below
 * * `autoscalingPolicy` - (Optional) The autoscaling policy document. This is a JSON formatted string. See [EMR Auto Scaling](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html)
 *
 * ## masterInstanceGroup Configuration Block
 *
 * Supported nested arguments for the `masterInstanceGroup` configuration block:
 *
 * * `instanceType` - (Required) EC2 instance type for all instances in the instance group.
 * * `bidPrice` - (Optional) Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
 * * `ebsConfig` - (Optional) Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
 * * `instanceCount` - (Optional) Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have [map public IP on launch](https://www.terraform.io/docs/providers/aws/r/subnet.html#map_public_ip_on_launch) enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
 * * `name` - (Optional) Friendly name given to the instance group.
 *
 * ## ebsConfig
 *
 * Attributes for the EBS volumes attached to each EC2 instance in the `instanceGroup`
 *
 * * `size` - (Required) The volume size, in gibibytes (GiB).
 * * `type` - (Required) The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
 * * `iops` - (Optional) The number of I/O operations per second (IOPS) that the volume supports
 * * `volumesPerInstance` - (Optional) The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
 *
 * ## bootstrapAction
 *
 * * `name` - (Required) Name of the bootstrap action
 * * `path` - (Required) Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system
 * * `args` - (Optional) List of command line arguments to pass to the bootstrap action script
 *
 * ## step
 *
 * Attributes for step configuration
 *
 * * `actionOnFailure` - (Required) The action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
 * * `hadoopJarStep` - (Required) The JAR file used for the step. Defined below.
 * * `name` - (Required) The name of the step.
 *
 * ### hadoopJarStep
 *
 * Attributes for Hadoop job step configuration
 *
 * * `args` - (Optional) List of command line arguments passed to the JAR file's main function when executed.
 * * `jar` - (Required) Path to a JAR file run during the step.
 * * `mainClass` - (Optional) Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
 * * `properties` - (Optional) Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
 *
 * ## Example bootable config
 *
 * **NOTE:** This configuration demonstrates a minimal configuration needed to
 * boot an example EMR Cluster. It is not meant to display best practices. Please
 * use at your own risk.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mainVpc = new aws.ec2.Vpc("main", {
 *     cidrBlock: "168.31.0.0/16",
 *     enableDnsHostnames: true,
 *     tags: {
 *         name: "emrTest",
 *     },
 * });
 * const mainSubnet = new aws.ec2.Subnet("main", {
 *     cidrBlock: "168.31.0.0/20",
 *     tags: {
 *         name: "emrTest",
 *     },
 *     vpcId: mainVpc.id,
 * });
 * // IAM role for EMR Service
 * const iamEmrServiceRole = new aws.iam.Role("iamEmrServiceRole", {
 *     assumeRolePolicy: `{
 *   "Version": "2008-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "elasticmapreduce.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `,
 * });
 * // IAM Role for EC2 Instance Profile
 * const iamEmrProfileRole = new aws.iam.Role("iamEmrProfileRole", {
 *     assumeRolePolicy: `{
 *   "Version": "2008-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "ec2.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `,
 * });
 * const emrProfile = new aws.iam.InstanceProfile("emrProfile", {
 *     roles: [iamEmrProfileRole.name],
 * });
 * const cluster = new aws.emr.Cluster("cluster", {
 *     applications: ["Spark"],
 *     bootstrapActions: [{
 *         args: [
 *             "instance.isMaster=true",
 *             "echo running on master node",
 *         ],
 *         name: "runif",
 *         path: "s3://elasticmapreduce/bootstrap-actions/run-if",
 *     }],
 *     configurationsJson: `  [
 *     {
 *       "Classification": "hadoop-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     },
 *     {
 *       "Classification": "spark-env",
 *       "Configurations": [
 *         {
 *           "Classification": "export",
 *           "Properties": {
 *             "JAVA_HOME": "/usr/lib/jvm/java-1.8.0"
 *           }
 *         }
 *       ],
 *       "Properties": {}
 *     }
 *   ]
 * `,
 *     coreInstanceCount: 1,
 *     coreInstanceType: "m5.xlarge",
 *     ec2Attributes: {
 *         emrManagedMasterSecurityGroup: aws_security_group_allow_all.id,
 *         emrManagedSlaveSecurityGroup: aws_security_group_allow_all.id,
 *         instanceProfile: emrProfile.arn,
 *         subnetId: mainSubnet.id,
 *     },
 *     masterInstanceType: "m5.xlarge",
 *     releaseLabel: "emr-4.6.0",
 *     serviceRole: iamEmrServiceRole.arn,
 *     tags: {
 *         dns_zone: "envZone",
 *         env: "env",
 *         name: "name-env",
 *         role: "rolename",
 *     },
 * });
 * const allowAccess = new aws.ec2.SecurityGroup("allowAccess", {
 *     description: "Allow inbound traffic",
 *     egress: [{
 *         cidrBlocks: ["0.0.0.0/0"],
 *         fromPort: 0,
 *         protocol: "-1",
 *         toPort: 0,
 *     }],
 *     ingress: [{
 *         // we do not recommend opening your cluster to 0.0.0.0/0
 *         cidrBlocks: "", // add your IP address here
 *         // these ports should be locked down
 *         fromPort: 0,
 *         protocol: "-1",
 *         toPort: 0,
 *     }],
 *     tags: {
 *         name: "emrTest",
 *     },
 *     vpcId: mainVpc.id,
 * }, {dependsOn: [mainSubnet],ignoreChanges: ["egresses", "ingresses"]});
 * const gw = new aws.ec2.InternetGateway("gw", {
 *     vpcId: mainVpc.id,
 * });
 * const routeTable = new aws.ec2.RouteTable("r", {
 *     routes: [{
 *         cidrBlock: "0.0.0.0/0",
 *         gatewayId: gw.id,
 *     }],
 *     vpcId: mainVpc.id,
 * });
 * const mainRouteTableAssociation = new aws.ec2.MainRouteTableAssociation("a", {
 *     routeTableId: routeTable.id,
 *     vpcId: mainVpc.id,
 * });
 * const iamEmrServicePolicy = new aws.iam.RolePolicy("iamEmrServicePolicy", {
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Effect": "Allow",
 *         "Resource": "*",
 *         "Action": [
 *             "ec2:AuthorizeSecurityGroupEgress",
 *             "ec2:AuthorizeSecurityGroupIngress",
 *             "ec2:CancelSpotInstanceRequests",
 *             "ec2:CreateNetworkInterface",
 *             "ec2:CreateSecurityGroup",
 *             "ec2:CreateTags",
 *             "ec2:DeleteNetworkInterface",
 *             "ec2:DeleteSecurityGroup",
 *             "ec2:DeleteTags",
 *             "ec2:DescribeAvailabilityZones",
 *             "ec2:DescribeAccountAttributes",
 *             "ec2:DescribeDhcpOptions",
 *             "ec2:DescribeInstanceStatus",
 *             "ec2:DescribeInstances",
 *             "ec2:DescribeKeyPairs",
 *             "ec2:DescribeNetworkAcls",
 *             "ec2:DescribeNetworkInterfaces",
 *             "ec2:DescribePrefixLists",
 *             "ec2:DescribeRouteTables",
 *             "ec2:DescribeSecurityGroups",
 *             "ec2:DescribeSpotInstanceRequests",
 *             "ec2:DescribeSpotPriceHistory",
 *             "ec2:DescribeSubnets",
 *             "ec2:DescribeVpcAttribute",
 *             "ec2:DescribeVpcEndpoints",
 *             "ec2:DescribeVpcEndpointServices",
 *             "ec2:DescribeVpcs",
 *             "ec2:DetachNetworkInterface",
 *             "ec2:ModifyImageAttribute",
 *             "ec2:ModifyInstanceAttribute",
 *             "ec2:RequestSpotInstances",
 *             "ec2:RevokeSecurityGroupEgress",
 *             "ec2:RunInstances",
 *             "ec2:TerminateInstances",
 *             "ec2:DeleteVolume",
 *             "ec2:DescribeVolumeStatus",
 *             "ec2:DescribeVolumes",
 *             "ec2:DetachVolume",
 *             "iam:GetRole",
 *             "iam:GetRolePolicy",
 *             "iam:ListInstanceProfiles",
 *             "iam:ListRolePolicies",
 *             "iam:PassRole",
 *             "s3:CreateBucket",
 *             "s3:Get*",
 *             "s3:List*",
 *             "sdb:BatchPutAttributes",
 *             "sdb:Select",
 *             "sqs:CreateQueue",
 *             "sqs:Delete*",
 *             "sqs:GetQueue*",
 *             "sqs:PurgeQueue",
 *             "sqs:ReceiveMessage"
 *         ]
 *     }]
 * }
 * `,
 *     role: iamEmrServiceRole.id,
 * });
 * const iamEmrProfilePolicy = new aws.iam.RolePolicy("iamEmrProfilePolicy", {
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [{
 *         "Effect": "Allow",
 *         "Resource": "*",
 *         "Action": [
 *             "cloudwatch:*",
 *             "dynamodb:*",
 *             "ec2:Describe*",
 *             "elasticmapreduce:Describe*",
 *             "elasticmapreduce:ListBootstrapActions",
 *             "elasticmapreduce:ListClusters",
 *             "elasticmapreduce:ListInstanceGroups",
 *             "elasticmapreduce:ListInstances",
 *             "elasticmapreduce:ListSteps",
 *             "kinesis:CreateStream",
 *             "kinesis:DeleteStream",
 *             "kinesis:DescribeStream",
 *             "kinesis:GetRecords",
 *             "kinesis:GetShardIterator",
 *             "kinesis:MergeShards",
 *             "kinesis:PutRecord",
 *             "kinesis:SplitShard",
 *             "rds:Describe*",
 *             "s3:*",
 *             "sdb:*",
 *             "sns:*",
 *             "sqs:*"
 *         ]
 *     }]
 * }
 * `,
 *     role: iamEmrProfileRole.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/emr_cluster.html.markdown.
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["additionalInfo"] = state ? state.additionalInfo : undefined;
            inputs["applications"] = state ? state.applications : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["autoscalingRole"] = state ? state.autoscalingRole : undefined;
            inputs["bootstrapActions"] = state ? state.bootstrapActions : undefined;
            inputs["clusterState"] = state ? state.clusterState : undefined;
            inputs["configurations"] = state ? state.configurations : undefined;
            inputs["configurationsJson"] = state ? state.configurationsJson : undefined;
            inputs["coreInstanceCount"] = state ? state.coreInstanceCount : undefined;
            inputs["coreInstanceGroup"] = state ? state.coreInstanceGroup : undefined;
            inputs["coreInstanceType"] = state ? state.coreInstanceType : undefined;
            inputs["customAmiId"] = state ? state.customAmiId : undefined;
            inputs["ebsRootVolumeSize"] = state ? state.ebsRootVolumeSize : undefined;
            inputs["ec2Attributes"] = state ? state.ec2Attributes : undefined;
            inputs["instanceGroups"] = state ? state.instanceGroups : undefined;
            inputs["keepJobFlowAliveWhenNoSteps"] = state ? state.keepJobFlowAliveWhenNoSteps : undefined;
            inputs["kerberosAttributes"] = state ? state.kerberosAttributes : undefined;
            inputs["logUri"] = state ? state.logUri : undefined;
            inputs["masterInstanceGroup"] = state ? state.masterInstanceGroup : undefined;
            inputs["masterInstanceType"] = state ? state.masterInstanceType : undefined;
            inputs["masterPublicDns"] = state ? state.masterPublicDns : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["releaseLabel"] = state ? state.releaseLabel : undefined;
            inputs["scaleDownBehavior"] = state ? state.scaleDownBehavior : undefined;
            inputs["securityConfiguration"] = state ? state.securityConfiguration : undefined;
            inputs["serviceRole"] = state ? state.serviceRole : undefined;
            inputs["steps"] = state ? state.steps : undefined;
            inputs["stepConcurrencyLevel"] = state ? state.stepConcurrencyLevel : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["terminationProtection"] = state ? state.terminationProtection : undefined;
            inputs["visibleToAllUsers"] = state ? state.visibleToAllUsers : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.releaseLabel === undefined) {
                throw new Error("Missing required property 'releaseLabel'");
            }
            if (!args || args.serviceRole === undefined) {
                throw new Error("Missing required property 'serviceRole'");
            }
            inputs["additionalInfo"] = args ? args.additionalInfo : undefined;
            inputs["applications"] = args ? args.applications : undefined;
            inputs["autoscalingRole"] = args ? args.autoscalingRole : undefined;
            inputs["bootstrapActions"] = args ? args.bootstrapActions : undefined;
            inputs["configurations"] = args ? args.configurations : undefined;
            inputs["configurationsJson"] = args ? args.configurationsJson : undefined;
            inputs["coreInstanceCount"] = args ? args.coreInstanceCount : undefined;
            inputs["coreInstanceGroup"] = args ? args.coreInstanceGroup : undefined;
            inputs["coreInstanceType"] = args ? args.coreInstanceType : undefined;
            inputs["customAmiId"] = args ? args.customAmiId : undefined;
            inputs["ebsRootVolumeSize"] = args ? args.ebsRootVolumeSize : undefined;
            inputs["ec2Attributes"] = args ? args.ec2Attributes : undefined;
            inputs["instanceGroups"] = args ? args.instanceGroups : undefined;
            inputs["keepJobFlowAliveWhenNoSteps"] = args ? args.keepJobFlowAliveWhenNoSteps : undefined;
            inputs["kerberosAttributes"] = args ? args.kerberosAttributes : undefined;
            inputs["logUri"] = args ? args.logUri : undefined;
            inputs["masterInstanceGroup"] = args ? args.masterInstanceGroup : undefined;
            inputs["masterInstanceType"] = args ? args.masterInstanceType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["releaseLabel"] = args ? args.releaseLabel : undefined;
            inputs["scaleDownBehavior"] = args ? args.scaleDownBehavior : undefined;
            inputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            inputs["serviceRole"] = args ? args.serviceRole : undefined;
            inputs["steps"] = args ? args.steps : undefined;
            inputs["stepConcurrencyLevel"] = args ? args.stepConcurrencyLevel : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["terminationProtection"] = args ? args.terminationProtection : undefined;
            inputs["visibleToAllUsers"] = args ? args.visibleToAllUsers : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["clusterState"] = undefined /*out*/;
            inputs["masterPublicDns"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:emr/cluster:Cluster';
//# sourceMappingURL=cluster.js.map