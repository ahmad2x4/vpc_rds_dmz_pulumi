"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic MapReduce Cluster Instance Group configuration.
 * See [Amazon Elastic MapReduce Documentation](https://aws.amazon.com/documentation/emr/) for more information.
 *
 * > **NOTE:** At this time, Instance Groups cannot be destroyed through the API nor
 * web interface. Instance Groups are destroyed when the EMR Cluster is destroyed.
 * this provider will resize any Instance Group to zero when destroying the resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const task = new aws.emr.InstanceGroup("task", {
 *     clusterId: aws_emr_cluster_tf_test_cluster.id,
 *     instanceCount: 1,
 *     instanceType: "m5.xlarge",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/emr_instance_group.html.markdown.
 */
class InstanceGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["autoscalingPolicy"] = state ? state.autoscalingPolicy : undefined;
            inputs["bidPrice"] = state ? state.bidPrice : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["configurationsJson"] = state ? state.configurationsJson : undefined;
            inputs["ebsConfigs"] = state ? state.ebsConfigs : undefined;
            inputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            inputs["instanceCount"] = state ? state.instanceCount : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["runningInstanceCount"] = state ? state.runningInstanceCount : undefined;
            inputs["status"] = state ? state.status : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.clusterId === undefined) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (!args || args.instanceType === undefined) {
                throw new Error("Missing required property 'instanceType'");
            }
            inputs["autoscalingPolicy"] = args ? args.autoscalingPolicy : undefined;
            inputs["bidPrice"] = args ? args.bidPrice : undefined;
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["configurationsJson"] = args ? args.configurationsJson : undefined;
            inputs["ebsConfigs"] = args ? args.ebsConfigs : undefined;
            inputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            inputs["instanceCount"] = args ? args.instanceCount : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["runningInstanceCount"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(InstanceGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing InstanceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new InstanceGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of InstanceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceGroup.__pulumiType;
    }
}
exports.InstanceGroup = InstanceGroup;
/** @internal */
InstanceGroup.__pulumiType = 'aws:emr/instanceGroup:InstanceGroup';
//# sourceMappingURL=instanceGroup.js.map