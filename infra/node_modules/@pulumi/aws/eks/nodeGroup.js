"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EKS Node Group, which can provision and optionally update an Auto Scaling Group of Kubernetes worker nodes compatible with EKS. Additional documentation about this functionality can be found in the [EKS User Guide](https://docs.aws.amazon.com/eks/latest/userguide/managed-node-groups.html).
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/eks_node_group.html.markdown.
 */
class NodeGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["amiType"] = state ? state.amiType : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["diskSize"] = state ? state.diskSize : undefined;
            inputs["instanceTypes"] = state ? state.instanceTypes : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["nodeGroupName"] = state ? state.nodeGroupName : undefined;
            inputs["nodeRoleArn"] = state ? state.nodeRoleArn : undefined;
            inputs["releaseVersion"] = state ? state.releaseVersion : undefined;
            inputs["remoteAccess"] = state ? state.remoteAccess : undefined;
            inputs["resources"] = state ? state.resources : undefined;
            inputs["scalingConfig"] = state ? state.scalingConfig : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.clusterName === undefined) {
                throw new Error("Missing required property 'clusterName'");
            }
            if (!args || args.nodeRoleArn === undefined) {
                throw new Error("Missing required property 'nodeRoleArn'");
            }
            if (!args || args.scalingConfig === undefined) {
                throw new Error("Missing required property 'scalingConfig'");
            }
            if (!args || args.subnetIds === undefined) {
                throw new Error("Missing required property 'subnetIds'");
            }
            inputs["amiType"] = args ? args.amiType : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["diskSize"] = args ? args.diskSize : undefined;
            inputs["instanceTypes"] = args ? args.instanceTypes : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["nodeGroupName"] = args ? args.nodeGroupName : undefined;
            inputs["nodeRoleArn"] = args ? args.nodeRoleArn : undefined;
            inputs["releaseVersion"] = args ? args.releaseVersion : undefined;
            inputs["remoteAccess"] = args ? args.remoteAccess : undefined;
            inputs["scalingConfig"] = args ? args.scalingConfig : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["resources"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NodeGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing NodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new NodeGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeGroup.__pulumiType;
    }
}
exports.NodeGroup = NodeGroup;
/** @internal */
NodeGroup.__pulumiType = 'aws:eks/nodeGroup:NodeGroup';
//# sourceMappingURL=nodeGroup.js.map