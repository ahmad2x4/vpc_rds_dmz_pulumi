"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
// Directly import awsMixins.  We want to execute the code within it, but we don't want to import or
// export any values from it.  Specifically, awsMixins adds a *getter* property (called "runtime")
// to this @pulumi/aws module. If we actually *import* or *export* that property, the getter will
// execute, which is not what we want at all.  Instead, we want to really just expose that we have
// this "runtime" property on the typing, and we want to execute the code that jams the getter on.
require("./awsMixins");
const pulumi = require("@pulumi/pulumi");
const crypto = require("crypto");
// sha1hash returns a partial SHA1 hash of the input string.
/** @internal */
function sha1hash(s) {
    const shasum = crypto.createHash("sha1");
    shasum.update(s);
    return shasum.digest("hex").substring(0, 8);
}
exports.sha1hash = sha1hash;
/** @internal */
function ifUndefined(input, value) {
    return pulumi.all([input, value])
        .apply(([input, value]) => input !== undefined ? input : value);
}
exports.ifUndefined = ifUndefined;
;
/** @internal */
function withAlias(opts, alias) {
    return withAliases(opts, [alias]);
}
exports.withAlias = withAlias;
/** @internal */
function withAliases(opts, aliases) {
    const allAliases = [];
    if (opts.aliases) {
        for (const alias of opts.aliases) {
            allAliases.push(alias);
        }
    }
    for (const alias of aliases) {
        allAliases.push(alias);
    }
    return Object.assign(Object.assign({}, opts), { aliases });
}
exports.withAliases = withAliases;
//# sourceMappingURL=utils.js.map