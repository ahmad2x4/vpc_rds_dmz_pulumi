"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AppSync Resolver.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testGraphQLApi = new aws.appsync.GraphQLApi("test", {
 *     authenticationType: "API_KEY",
 *     schema: `type Mutation {
 * 	putPost(id: ID!, title: String!): Post
 * }
 *
 * type Post {
 * 	id: ID!
 * 	title: String!
 * }
 *
 * type Query {
 * 	singlePost(id: ID!): Post
 * }
 *
 * schema {
 * 	query: Query
 * 	mutation: Mutation
 * }
 * `,
 * });
 * const testDataSource = new aws.appsync.DataSource("test", {
 *     apiId: testGraphQLApi.id,
 *     httpConfig: {
 *         endpoint: "http://example.com",
 *     },
 *     type: "HTTP",
 * });
 * // UNIT type resolver (default)
 * const testResolver = new aws.appsync.Resolver("test", {
 *     apiId: testGraphQLApi.id,
 *     dataSource: testDataSource.name,
 *     field: "singlePost",
 *     requestTemplate: `{
 *     "version": "2018-05-29",
 *     "method": "GET",
 *     "resourcePath": "/",
 *     "params":{
 *         "headers": $utils.http.copyheaders($ctx.request.headers)
 *     }
 * }
 * `,
 *     responseTemplate: `#if($ctx.result.statusCode == 200)
 *     $ctx.result.body
 * #else
 *     $utils.appendError($ctx.result.body, $ctx.result.statusCode)
 * #end
 * `,
 *     type: "Query",
 * });
 * // PIPELINE type resolver
 * const mutationPipelineTest = new aws.appsync.Resolver("Mutation_pipelineTest", {
 *     apiId: testGraphQLApi.id,
 *     field: "pipelineTest",
 *     kind: "PIPELINE",
 *     pipelineConfig: {
 *         functions: [
 *             aws_appsync_function_test1.functionId,
 *             aws_appsync_function_test2.functionId,
 *             aws_appsync_function_test3.functionId,
 *         ],
 *     },
 *     requestTemplate: "{}",
 *     responseTemplate: "$util.toJson($ctx.result)",
 *     type: "Mutation",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appsync_resolver.html.markdown.
 */
class Resolver extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["apiId"] = state ? state.apiId : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["dataSource"] = state ? state.dataSource : undefined;
            inputs["field"] = state ? state.field : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["pipelineConfig"] = state ? state.pipelineConfig : undefined;
            inputs["requestTemplate"] = state ? state.requestTemplate : undefined;
            inputs["responseTemplate"] = state ? state.responseTemplate : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.apiId === undefined) {
                throw new Error("Missing required property 'apiId'");
            }
            if (!args || args.field === undefined) {
                throw new Error("Missing required property 'field'");
            }
            if (!args || args.requestTemplate === undefined) {
                throw new Error("Missing required property 'requestTemplate'");
            }
            if (!args || args.responseTemplate === undefined) {
                throw new Error("Missing required property 'responseTemplate'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["dataSource"] = args ? args.dataSource : undefined;
            inputs["field"] = args ? args.field : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["pipelineConfig"] = args ? args.pipelineConfig : undefined;
            inputs["requestTemplate"] = args ? args.requestTemplate : undefined;
            inputs["responseTemplate"] = args ? args.responseTemplate : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Resolver.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Resolver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Resolver(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Resolver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resolver.__pulumiType;
    }
}
exports.Resolver = Resolver;
/** @internal */
Resolver.__pulumiType = 'aws:appsync/resolver:Resolver';
//# sourceMappingURL=resolver.js.map