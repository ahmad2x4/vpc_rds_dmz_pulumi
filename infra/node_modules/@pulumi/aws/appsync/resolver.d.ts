import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides an AppSync Resolver.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testGraphQLApi = new aws.appsync.GraphQLApi("test", {
 *     authenticationType: "API_KEY",
 *     schema: `type Mutation {
 * 	putPost(id: ID!, title: String!): Post
 * }
 *
 * type Post {
 * 	id: ID!
 * 	title: String!
 * }
 *
 * type Query {
 * 	singlePost(id: ID!): Post
 * }
 *
 * schema {
 * 	query: Query
 * 	mutation: Mutation
 * }
 * `,
 * });
 * const testDataSource = new aws.appsync.DataSource("test", {
 *     apiId: testGraphQLApi.id,
 *     httpConfig: {
 *         endpoint: "http://example.com",
 *     },
 *     type: "HTTP",
 * });
 * // UNIT type resolver (default)
 * const testResolver = new aws.appsync.Resolver("test", {
 *     apiId: testGraphQLApi.id,
 *     dataSource: testDataSource.name,
 *     field: "singlePost",
 *     requestTemplate: `{
 *     "version": "2018-05-29",
 *     "method": "GET",
 *     "resourcePath": "/",
 *     "params":{
 *         "headers": $utils.http.copyheaders($ctx.request.headers)
 *     }
 * }
 * `,
 *     responseTemplate: `#if($ctx.result.statusCode == 200)
 *     $ctx.result.body
 * #else
 *     $utils.appendError($ctx.result.body, $ctx.result.statusCode)
 * #end
 * `,
 *     type: "Query",
 * });
 * // PIPELINE type resolver
 * const mutationPipelineTest = new aws.appsync.Resolver("Mutation_pipelineTest", {
 *     apiId: testGraphQLApi.id,
 *     field: "pipelineTest",
 *     kind: "PIPELINE",
 *     pipelineConfig: {
 *         functions: [
 *             aws_appsync_function_test1.functionId,
 *             aws_appsync_function_test2.functionId,
 *             aws_appsync_function_test3.functionId,
 *         ],
 *     },
 *     requestTemplate: "{}",
 *     responseTemplate: "$util.toJson($ctx.result)",
 *     type: "Mutation",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appsync_resolver.html.markdown.
 */
export declare class Resolver extends pulumi.CustomResource {
    /**
     * Get an existing Resolver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResolverState, opts?: pulumi.CustomResourceOptions): Resolver;
    /**
     * Returns true if the given object is an instance of Resolver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Resolver;
    /**
     * The API ID for the GraphQL API.
     */
    readonly apiId: pulumi.Output<string>;
    /**
     * The ARN
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The DataSource name.
     */
    readonly dataSource: pulumi.Output<string | undefined>;
    /**
     * The field name from the schema defined in the GraphQL API.
     */
    readonly field: pulumi.Output<string>;
    /**
     * The resolver type. Valid values are `UNIT` and `PIPELINE`.
     */
    readonly kind: pulumi.Output<string | undefined>;
    /**
     * The PipelineConfig. A `pipelineConfig` block is documented below.
     */
    readonly pipelineConfig: pulumi.Output<outputs.appsync.ResolverPipelineConfig | undefined>;
    /**
     * The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver.
     */
    readonly requestTemplate: pulumi.Output<string>;
    /**
     * The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver.
     */
    readonly responseTemplate: pulumi.Output<string>;
    /**
     * The type name from the schema defined in the GraphQL API.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Resolver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResolverArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Resolver resources.
 */
export interface ResolverState {
    /**
     * The API ID for the GraphQL API.
     */
    readonly apiId?: pulumi.Input<string>;
    /**
     * The ARN
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The DataSource name.
     */
    readonly dataSource?: pulumi.Input<string>;
    /**
     * The field name from the schema defined in the GraphQL API.
     */
    readonly field?: pulumi.Input<string>;
    /**
     * The resolver type. Valid values are `UNIT` and `PIPELINE`.
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * The PipelineConfig. A `pipelineConfig` block is documented below.
     */
    readonly pipelineConfig?: pulumi.Input<inputs.appsync.ResolverPipelineConfig>;
    /**
     * The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver.
     */
    readonly requestTemplate?: pulumi.Input<string>;
    /**
     * The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver.
     */
    readonly responseTemplate?: pulumi.Input<string>;
    /**
     * The type name from the schema defined in the GraphQL API.
     */
    readonly type?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Resolver resource.
 */
export interface ResolverArgs {
    /**
     * The API ID for the GraphQL API.
     */
    readonly apiId: pulumi.Input<string>;
    /**
     * The DataSource name.
     */
    readonly dataSource?: pulumi.Input<string>;
    /**
     * The field name from the schema defined in the GraphQL API.
     */
    readonly field: pulumi.Input<string>;
    /**
     * The resolver type. Valid values are `UNIT` and `PIPELINE`.
     */
    readonly kind?: pulumi.Input<string>;
    /**
     * The PipelineConfig. A `pipelineConfig` block is documented below.
     */
    readonly pipelineConfig?: pulumi.Input<inputs.appsync.ResolverPipelineConfig>;
    /**
     * The request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver.
     */
    readonly requestTemplate: pulumi.Input<string>;
    /**
     * The response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver.
     */
    readonly responseTemplate: pulumi.Input<string>;
    /**
     * The type name from the schema defined in the GraphQL API.
     */
    readonly type: pulumi.Input<string>;
}
