"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Glue Connection resource.
 *
 * ## Example Usage
 *
 * ### Non-VPC Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Connection("example", {
 *     connectionProperties: {
 *         JDBC_CONNECTION_URL: "jdbc:mysql://example.com/exampledatabase",
 *         PASSWORD: "examplepassword",
 *         USERNAME: "exampleusername",
 *     },
 * });
 * ```
 *
 * ### VPC Connection
 *
 * For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/populate-add-connection.html#connection-JDBC-VPC).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Connection("example", {
 *     connectionProperties: {
 *         JDBC_CONNECTION_URL: pulumi.interpolate`jdbc:mysql://${aws_rds_cluster_example.endpoint}/exampledatabase`,
 *         PASSWORD: "examplepassword",
 *         USERNAME: "exampleusername",
 *     },
 *     physicalConnectionRequirements: {
 *         availabilityZone: aws_subnet_example.availabilityZone,
 *         securityGroupIdLists: [aws_security_group_example.id],
 *         subnetId: aws_subnet_example.id,
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glue_connection.html.markdown.
 */
class Connection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["catalogId"] = state ? state.catalogId : undefined;
            inputs["connectionProperties"] = state ? state.connectionProperties : undefined;
            inputs["connectionType"] = state ? state.connectionType : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["matchCriterias"] = state ? state.matchCriterias : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["physicalConnectionRequirements"] = state ? state.physicalConnectionRequirements : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.connectionProperties === undefined) {
                throw new Error("Missing required property 'connectionProperties'");
            }
            inputs["catalogId"] = args ? args.catalogId : undefined;
            inputs["connectionProperties"] = args ? args.connectionProperties : undefined;
            inputs["connectionType"] = args ? args.connectionType : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["matchCriterias"] = args ? args.matchCriterias : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["physicalConnectionRequirements"] = args ? args.physicalConnectionRequirements : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Connection.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Connection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Connection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Connection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Connection.__pulumiType;
    }
}
exports.Connection = Connection;
/** @internal */
Connection.__pulumiType = 'aws:glue/connection:Connection';
//# sourceMappingURL=connection.js.map