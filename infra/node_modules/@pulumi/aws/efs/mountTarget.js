"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic File System (EFS) mount target.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ec2.Vpc("foo", {
 *     cidrBlock: "10.0.0.0/16",
 * });
 * const alphaSubnet = new aws.ec2.Subnet("alpha", {
 *     availabilityZone: "us-west-2a",
 *     cidrBlock: "10.0.1.0/24",
 *     vpcId: foo.id,
 * });
 * const alphaMountTarget = new aws.efs.MountTarget("alpha", {
 *     fileSystemId: aws_efs_file_system_foo.id,
 *     subnetId: alphaSubnet.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/efs_mount_target.html.markdown.
 */
class MountTarget extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["fileSystemArn"] = state ? state.fileSystemArn : undefined;
            inputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.fileSystemId === undefined) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if (!args || args.subnetId === undefined) {
                throw new Error("Missing required property 'subnetId'");
            }
            inputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["dnsName"] = undefined /*out*/;
            inputs["fileSystemArn"] = undefined /*out*/;
            inputs["networkInterfaceId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MountTarget.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing MountTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new MountTarget(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MountTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MountTarget.__pulumiType;
    }
}
exports.MountTarget = MountTarget;
/** @internal */
MountTarget.__pulumiType = 'aws:efs/mountTarget:MountTarget';
//# sourceMappingURL=mountTarget.js.map