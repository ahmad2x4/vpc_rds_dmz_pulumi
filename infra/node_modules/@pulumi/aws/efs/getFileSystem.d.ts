import * as pulumi from "@pulumi/pulumi";
import * as outputs from "../types/output";
/**
 * Provides information about an Elastic File System (EFS).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const fileSystemId = config.get("fileSystemId") || "";
 *
 * const byId = aws.efs.getFileSystem({
 *     fileSystemId: fileSystemId,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/efs_file_system.html.markdown.
 */
export declare function getFileSystem(args?: GetFileSystemArgs, opts?: pulumi.InvokeOptions): Promise<GetFileSystemResult> & GetFileSystemResult;
/**
 * A collection of arguments for invoking getFileSystem.
 */
export interface GetFileSystemArgs {
    /**
     * Restricts the list to the file system with this creation token.
     */
    readonly creationToken?: string;
    /**
     * The ID that identifies the file system (e.g. fs-ccfc0d65).
     */
    readonly fileSystemId?: string;
    readonly tags?: {
        [key: string]: any;
    };
}
/**
 * A collection of values returned by getFileSystem.
 */
export interface GetFileSystemResult {
    /**
     * Amazon Resource Name of the file system.
     */
    readonly arn: string;
    readonly creationToken: string;
    /**
     * The DNS name for the filesystem per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
     */
    readonly dnsName: string;
    /**
     * Whether EFS is encrypted.
     */
    readonly encrypted: boolean;
    readonly fileSystemId: string;
    /**
     * The ARN for the KMS encryption key.
     */
    readonly kmsKeyId: string;
    /**
     * A file system [lifecycle policy](https://docs.aws.amazon.com/efs/latest/ug/API_LifecyclePolicy.html) object.
     */
    readonly lifecyclePolicy: outputs.efs.GetFileSystemLifecyclePolicy;
    /**
     * The file system performance mode.
     */
    readonly performanceMode: string;
    /**
     * The throughput, measured in MiB/s, that you want to provision for the file system.
     * * `tags` -A mapping of tags to assign to the file system.
     */
    readonly provisionedThroughputInMibps: number;
    readonly tags: {
        [key: string]: any;
    };
    /**
     * Throughput mode for the file system.
     */
    readonly throughputMode: string;
    /**
     * id is the provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
