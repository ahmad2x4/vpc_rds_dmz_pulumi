"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates an Amazon CloudHSM v2 cluster.
 *
 * For information about CloudHSM v2, see the
 * [AWS CloudHSM User Guide][1] and the [Amazon
 * CloudHSM API Reference][2].
 *
 * > **NOTE:** CloudHSM can take up to several minutes to be set up.
 * Practically no single attribute can be updated except TAGS.
 * If you need to delete a cluster, you have to remove its HSM modules first.
 * To initialize cluster, you have to add an hsm instance to the cluster then sign CSR and upload it.
 *
 * ## Example Usage
 *
 * The following example below creates a CloudHSM cluster.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const available = aws.getAvailabilityZones();
 * const cloudhsm2Vpc = new aws.ec2.Vpc("cloudhsm2Vpc", {
 *     cidrBlock: "10.0.0.0/16",
 *     tags: {
 *         Name: "example-aws_cloudhsm_v2_cluster",
 *     },
 * });
 * const cloudhsm2Subnets: aws.ec2.Subnet[] = [];
 * for (let i = 0; i < 2; i++) {
 *     cloudhsm2Subnets.push(new aws.ec2.Subnet(`cloudhsm2_subnets-${i}`, {
 *         availabilityZone: available.names[i],
 *         cidrBlock: var_subnets[i],
 *         mapPublicIpOnLaunch: false,
 *         tags: {
 *             Name: "example-aws_cloudhsm_v2_cluster",
 *         },
 *         vpcId: cloudhsm2Vpc.id,
 *     }));
 * }
 * const cloudhsmV2Cluster = new aws.cloudhsmv2.Cluster("cloudhsmV2Cluster", {
 *     hsmType: "hsm1.medium",
 *     subnetIds: cloudhsm2Subnets.map(v => v.id),
 *     tags: {
 *         Name: "example-aws_cloudhsm_v2_cluster",
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudhsm_v2_cluster.html.markdown.
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["clusterCertificates"] = state ? state.clusterCertificates : undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["clusterState"] = state ? state.clusterState : undefined;
            inputs["hsmType"] = state ? state.hsmType : undefined;
            inputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            inputs["sourceBackupIdentifier"] = state ? state.sourceBackupIdentifier : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.hsmType === undefined) {
                throw new Error("Missing required property 'hsmType'");
            }
            if (!args || args.subnetIds === undefined) {
                throw new Error("Missing required property 'subnetIds'");
            }
            inputs["hsmType"] = args ? args.hsmType : undefined;
            inputs["sourceBackupIdentifier"] = args ? args.sourceBackupIdentifier : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["clusterCertificates"] = undefined /*out*/;
            inputs["clusterId"] = undefined /*out*/;
            inputs["clusterState"] = undefined /*out*/;
            inputs["securityGroupId"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:cloudhsmv2/cluster:Cluster';
//# sourceMappingURL=cluster.js.map