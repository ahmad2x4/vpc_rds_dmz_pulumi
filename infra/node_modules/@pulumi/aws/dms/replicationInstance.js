"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a DMS (Data Migration Service) replication instance resource. DMS replication instances can be created, updated, deleted, and imported.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const dmsAssumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             identifiers: ["dms.amazonaws.com"],
 *             type: "Service",
 *         }],
 *     }],
 * });
 * const dmsAccessForEndpoint = new aws.iam.Role("dms-access-for-endpoint", {
 *     assumeRolePolicy: dmsAssumeRole.json,
 * });
 * const dms_access_for_endpoint_AmazonDMSRedshiftS3Role = new aws.iam.RolePolicyAttachment("dms-access-for-endpoint-AmazonDMSRedshiftS3Role", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role",
 *     role: dms_access_for_endpoint.name,
 * });
 * const dmsCloudwatchLogsRole = new aws.iam.Role("dms-cloudwatch-logs-role", {
 *     assumeRolePolicy: dmsAssumeRole.json,
 * });
 * const dms_cloudwatch_logs_role_AmazonDMSCloudWatchLogsRole = new aws.iam.RolePolicyAttachment("dms-cloudwatch-logs-role-AmazonDMSCloudWatchLogsRole", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole",
 *     role: dms_cloudwatch_logs_role.name,
 * });
 * const dmsVpcRole = new aws.iam.Role("dms-vpc-role", {
 *     assumeRolePolicy: dmsAssumeRole.json,
 * });
 * const dms_vpc_role_AmazonDMSVPCManagementRole = new aws.iam.RolePolicyAttachment("dms-vpc-role-AmazonDMSVPCManagementRole", {
 *     policyArn: "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole",
 *     role: dms_vpc_role.name,
 * });
 * // Create a new replication instance
 * const test = new aws.dms.ReplicationInstance("test", {
 *     allocatedStorage: 20,
 *     applyImmediately: true,
 *     autoMinorVersionUpgrade: true,
 *     availabilityZone: "us-west-2c",
 *     engineVersion: "3.1.4",
 *     kmsKeyArn: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
 *     multiAz: false,
 *     preferredMaintenanceWindow: "sun:10:30-sun:14:30",
 *     publiclyAccessible: true,
 *     replicationInstanceClass: "dms.t2.micro",
 *     replicationInstanceId: "test-dms-replication-instance-tf",
 *     replicationSubnetGroupId: aws_dms_replication_subnet_group_test_dms_replication_subnet_group_tf.id,
 *     tags: {
 *         Name: "test",
 *     },
 *     vpcSecurityGroupIds: ["sg-12345678"],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dms_replication_instance.html.markdown.
 */
class ReplicationInstance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            inputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            inputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            inputs["multiAz"] = state ? state.multiAz : undefined;
            inputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            inputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            inputs["replicationInstanceArn"] = state ? state.replicationInstanceArn : undefined;
            inputs["replicationInstanceClass"] = state ? state.replicationInstanceClass : undefined;
            inputs["replicationInstanceId"] = state ? state.replicationInstanceId : undefined;
            inputs["replicationInstancePrivateIps"] = state ? state.replicationInstancePrivateIps : undefined;
            inputs["replicationInstancePublicIps"] = state ? state.replicationInstancePublicIps : undefined;
            inputs["replicationSubnetGroupId"] = state ? state.replicationSubnetGroupId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.replicationInstanceClass === undefined) {
                throw new Error("Missing required property 'replicationInstanceClass'");
            }
            if (!args || args.replicationInstanceId === undefined) {
                throw new Error("Missing required property 'replicationInstanceId'");
            }
            inputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            inputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            inputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            inputs["multiAz"] = args ? args.multiAz : undefined;
            inputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            inputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            inputs["replicationInstanceClass"] = args ? args.replicationInstanceClass : undefined;
            inputs["replicationInstanceId"] = args ? args.replicationInstanceId : undefined;
            inputs["replicationSubnetGroupId"] = args ? args.replicationSubnetGroupId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            inputs["replicationInstanceArn"] = undefined /*out*/;
            inputs["replicationInstancePrivateIps"] = undefined /*out*/;
            inputs["replicationInstancePublicIps"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ReplicationInstance.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ReplicationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ReplicationInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReplicationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationInstance.__pulumiType;
    }
}
exports.ReplicationInstance = ReplicationInstance;
/** @internal */
ReplicationInstance.__pulumiType = 'aws:dms/replicationInstance:ReplicationInstance';
//# sourceMappingURL=replicationInstance.js.map