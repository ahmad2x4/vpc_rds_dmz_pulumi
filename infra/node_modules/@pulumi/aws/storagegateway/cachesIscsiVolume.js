"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Storage Gateway cached iSCSI volume.
 *
 * > **NOTE:** The gateway must have cache added (e.g. via the [`aws.storagegateway.Cache`](https://www.terraform.io/docs/providers/aws/r/storagegateway_cache.html) resource) before creating volumes otherwise the Storage Gateway API will return an error.
 *
 * > **NOTE:** The gateway must have an upload buffer added (e.g. via the [`aws.storagegateway.UploadBuffer`](https://www.terraform.io/docs/providers/aws/r/storagegateway_upload_buffer.html) resource) before the volume is operational to clients, however the Storage Gateway API will allow volume creation without error in that case and return volume status as `UPLOAD BUFFER NOT CONFIGURED`.
 *
 * ## Example Usage
 *
 * > **NOTE:** These examples are referencing the [`aws.storagegateway.Cache`](https://www.terraform.io/docs/providers/aws/r/storagegateway_cache.html) resource `gatewayArn` attribute to ensure this provider properly adds cache before creating the volume. If you are not using this method, you may need to declare an expicit dependency (e.g. via `dependsOn = ["aws_storagegateway_cache.example"]`) to ensure proper ordering.
 *
 * ### Create Empty Cached iSCSI Volume
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.CachesIscsiVolume("example", {
 *     gatewayArn: aws_storagegateway_cache_example.gatewayArn,
 *     networkInterfaceId: aws_instance_example.privateIp,
 *     targetName: "example",
 *     volumeSizeInBytes: 5368709120, // 5 GB
 * });
 * ```
 *
 * ### Create Cached iSCSI Volume From Snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.CachesIscsiVolume("example", {
 *     gatewayArn: aws_storagegateway_cache_example.gatewayArn,
 *     networkInterfaceId: aws_instance_example.privateIp,
 *     snapshotId: aws_ebs_snapshot_example.id,
 *     targetName: "example",
 *     volumeSizeInBytes: aws_ebs_snapshot_example.volumeSize.apply(volumeSize => (((volumeSize * 1024) * 1024) * 1024)),
 * });
 * ```
 *
 * ### Create Cached iSCSI Volume From Source Volume
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.storagegateway.CachesIscsiVolume("example", {
 *     gatewayArn: aws_storagegateway_cache_example.gatewayArn,
 *     networkInterfaceId: aws_instance_example.privateIp,
 *     sourceVolumeArn: aws_storagegateway_cached_iscsi_volume_existing.arn,
 *     targetName: "example",
 *     volumeSizeInBytes: aws_storagegateway_cached_iscsi_volume_existing.volumeSizeInBytes,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/storagegateway_cached_iscsi_volume.html.markdown.
 */
class CachesIscsiVolume extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["chapEnabled"] = state ? state.chapEnabled : undefined;
            inputs["gatewayArn"] = state ? state.gatewayArn : undefined;
            inputs["lunNumber"] = state ? state.lunNumber : undefined;
            inputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            inputs["networkInterfacePort"] = state ? state.networkInterfacePort : undefined;
            inputs["snapshotId"] = state ? state.snapshotId : undefined;
            inputs["sourceVolumeArn"] = state ? state.sourceVolumeArn : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["targetArn"] = state ? state.targetArn : undefined;
            inputs["targetName"] = state ? state.targetName : undefined;
            inputs["volumeArn"] = state ? state.volumeArn : undefined;
            inputs["volumeId"] = state ? state.volumeId : undefined;
            inputs["volumeSizeInBytes"] = state ? state.volumeSizeInBytes : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.gatewayArn === undefined) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            if (!args || args.networkInterfaceId === undefined) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if (!args || args.targetName === undefined) {
                throw new Error("Missing required property 'targetName'");
            }
            if (!args || args.volumeSizeInBytes === undefined) {
                throw new Error("Missing required property 'volumeSizeInBytes'");
            }
            inputs["gatewayArn"] = args ? args.gatewayArn : undefined;
            inputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            inputs["snapshotId"] = args ? args.snapshotId : undefined;
            inputs["sourceVolumeArn"] = args ? args.sourceVolumeArn : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetName"] = args ? args.targetName : undefined;
            inputs["volumeSizeInBytes"] = args ? args.volumeSizeInBytes : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["chapEnabled"] = undefined /*out*/;
            inputs["lunNumber"] = undefined /*out*/;
            inputs["networkInterfacePort"] = undefined /*out*/;
            inputs["targetArn"] = undefined /*out*/;
            inputs["volumeArn"] = undefined /*out*/;
            inputs["volumeId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CachesIscsiVolume.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CachesIscsiVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new CachesIscsiVolume(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CachesIscsiVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CachesIscsiVolume.__pulumiType;
    }
}
exports.CachesIscsiVolume = CachesIscsiVolume;
/** @internal */
CachesIscsiVolume.__pulumiType = 'aws:storagegateway/cachesIscsiVolume:CachesIscsiVolume';
//# sourceMappingURL=cachesIscsiVolume.js.map