import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Manages a revision of an ECS task definition to be used in `aws.ecs.Service`.
 *
 * ## Example Usage
 *
 * ### With AppMesh Proxy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const service = new aws.ecs.TaskDefinition("service", {
 *     containerDefinitions: fs.readFileSync("task-definitions/service.json", "utf-8"),
 *     family: "service",
 *     proxyConfiguration: {
 *         containerName: "applicationContainerName",
 *         properties: {
 *             AppPorts: "8080",
 *             EgressIgnoredIPs: "169.254.170.2,169.254.169.254",
 *             IgnoredUID: "1337",
 *             ProxyEgressPort: 15001,
 *             ProxyIngressPort: 15000,
 *         },
 *         type: "APPMESH",
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecs_task_definition.html.markdown.
 */
export declare class TaskDefinition extends pulumi.CustomResource {
    /**
     * Get an existing TaskDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskDefinitionState, opts?: pulumi.CustomResourceOptions): TaskDefinition;
    /**
     * Returns true if the given object is an instance of TaskDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TaskDefinition;
    /**
     * Full ARN of the Task Definition (including both `family` and `revision`).
     */
    readonly arn: pulumi.Output<string>;
    /**
     * A list of valid [container definitions]
     * (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
     * single valid JSON document. Please note that you should only provide values that are part of the container
     * definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
     * (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
     * official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     */
    readonly containerDefinitions: pulumi.Output<string>;
    /**
     * The number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
     */
    readonly cpu: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     */
    readonly executionRoleArn: pulumi.Output<string | undefined>;
    /**
     * A unique name for your task definition.
     */
    readonly family: pulumi.Output<string>;
    /**
     * The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     */
    readonly ipcMode: pulumi.Output<string | undefined>;
    /**
     * The amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
     */
    readonly memory: pulumi.Output<string | undefined>;
    /**
     * The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
     */
    readonly networkMode: pulumi.Output<string>;
    /**
     * The process namespace to use for the containers in the task. The valid values are `host` and `task`.
     */
    readonly pidMode: pulumi.Output<string | undefined>;
    /**
     * A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`.
     */
    readonly placementConstraints: pulumi.Output<outputs.ecs.TaskDefinitionPlacementConstraint[] | undefined>;
    /**
     * The proxy configuration details for the App Mesh proxy.
     */
    readonly proxyConfiguration: pulumi.Output<outputs.ecs.TaskDefinitionProxyConfiguration | undefined>;
    /**
     * A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     */
    readonly requiresCompatibilities: pulumi.Output<string[] | undefined>;
    /**
     * The revision of the task in a particular family.
     */
    readonly revision: pulumi.Output<number>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     */
    readonly taskRoleArn: pulumi.Output<string | undefined>;
    /**
     * A set of volume blocks that containers in your task may use.
     */
    readonly volumes: pulumi.Output<outputs.ecs.TaskDefinitionVolume[] | undefined>;
    /**
     * Create a TaskDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskDefinitionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering TaskDefinition resources.
 */
export interface TaskDefinitionState {
    /**
     * Full ARN of the Task Definition (including both `family` and `revision`).
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * A list of valid [container definitions]
     * (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
     * single valid JSON document. Please note that you should only provide values that are part of the container
     * definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
     * (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
     * official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     */
    readonly containerDefinitions?: pulumi.Input<string>;
    /**
     * The number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
     */
    readonly cpu?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     */
    readonly executionRoleArn?: pulumi.Input<string>;
    /**
     * A unique name for your task definition.
     */
    readonly family?: pulumi.Input<string>;
    /**
     * The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     */
    readonly ipcMode?: pulumi.Input<string>;
    /**
     * The amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
     */
    readonly memory?: pulumi.Input<string>;
    /**
     * The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
     */
    readonly networkMode?: pulumi.Input<string>;
    /**
     * The process namespace to use for the containers in the task. The valid values are `host` and `task`.
     */
    readonly pidMode?: pulumi.Input<string>;
    /**
     * A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`.
     */
    readonly placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPlacementConstraint>[]>;
    /**
     * The proxy configuration details for the App Mesh proxy.
     */
    readonly proxyConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionProxyConfiguration>;
    /**
     * A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     */
    readonly requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The revision of the task in a particular family.
     */
    readonly revision?: pulumi.Input<number>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     */
    readonly taskRoleArn?: pulumi.Input<string>;
    /**
     * A set of volume blocks that containers in your task may use.
     */
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolume>[]>;
}
/**
 * The set of arguments for constructing a TaskDefinition resource.
 */
export interface TaskDefinitionArgs {
    /**
     * A list of valid [container definitions]
     * (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
     * single valid JSON document. Please note that you should only provide values that are part of the container
     * definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
     * (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
     * official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
     */
    readonly containerDefinitions: pulumi.Input<string>;
    /**
     * The number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
     */
    readonly cpu?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
     */
    readonly executionRoleArn?: pulumi.Input<string>;
    /**
     * A unique name for your task definition.
     */
    readonly family: pulumi.Input<string>;
    /**
     * The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
     */
    readonly ipcMode?: pulumi.Input<string>;
    /**
     * The amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
     */
    readonly memory?: pulumi.Input<string>;
    /**
     * The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
     */
    readonly networkMode?: pulumi.Input<string>;
    /**
     * The process namespace to use for the containers in the task. The valid values are `host` and `task`.
     */
    readonly pidMode?: pulumi.Input<string>;
    /**
     * A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`.
     */
    readonly placementConstraints?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionPlacementConstraint>[]>;
    /**
     * The proxy configuration details for the App Mesh proxy.
     */
    readonly proxyConfiguration?: pulumi.Input<inputs.ecs.TaskDefinitionProxyConfiguration>;
    /**
     * A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
     */
    readonly requiresCompatibilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
     */
    readonly taskRoleArn?: pulumi.Input<string>;
    /**
     * A set of volume blocks that containers in your task may use.
     */
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ecs.TaskDefinitionVolume>[]>;
}
