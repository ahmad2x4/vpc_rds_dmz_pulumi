"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a revision of an ECS task definition to be used in `aws.ecs.Service`.
 *
 * ## Example Usage
 *
 * ### With AppMesh Proxy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const service = new aws.ecs.TaskDefinition("service", {
 *     containerDefinitions: fs.readFileSync("task-definitions/service.json", "utf-8"),
 *     family: "service",
 *     proxyConfiguration: {
 *         containerName: "applicationContainerName",
 *         properties: {
 *             AppPorts: "8080",
 *             EgressIgnoredIPs: "169.254.170.2,169.254.169.254",
 *             IgnoredUID: "1337",
 *             ProxyEgressPort: 15001,
 *             ProxyIngressPort: 15000,
 *         },
 *         type: "APPMESH",
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecs_task_definition.html.markdown.
 */
class TaskDefinition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["containerDefinitions"] = state ? state.containerDefinitions : undefined;
            inputs["cpu"] = state ? state.cpu : undefined;
            inputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            inputs["family"] = state ? state.family : undefined;
            inputs["ipcMode"] = state ? state.ipcMode : undefined;
            inputs["memory"] = state ? state.memory : undefined;
            inputs["networkMode"] = state ? state.networkMode : undefined;
            inputs["pidMode"] = state ? state.pidMode : undefined;
            inputs["placementConstraints"] = state ? state.placementConstraints : undefined;
            inputs["proxyConfiguration"] = state ? state.proxyConfiguration : undefined;
            inputs["requiresCompatibilities"] = state ? state.requiresCompatibilities : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["taskRoleArn"] = state ? state.taskRoleArn : undefined;
            inputs["volumes"] = state ? state.volumes : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.containerDefinitions === undefined) {
                throw new Error("Missing required property 'containerDefinitions'");
            }
            if (!args || args.family === undefined) {
                throw new Error("Missing required property 'family'");
            }
            inputs["containerDefinitions"] = args ? args.containerDefinitions : undefined;
            inputs["cpu"] = args ? args.cpu : undefined;
            inputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            inputs["family"] = args ? args.family : undefined;
            inputs["ipcMode"] = args ? args.ipcMode : undefined;
            inputs["memory"] = args ? args.memory : undefined;
            inputs["networkMode"] = args ? args.networkMode : undefined;
            inputs["pidMode"] = args ? args.pidMode : undefined;
            inputs["placementConstraints"] = args ? args.placementConstraints : undefined;
            inputs["proxyConfiguration"] = args ? args.proxyConfiguration : undefined;
            inputs["requiresCompatibilities"] = args ? args.requiresCompatibilities : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["taskRoleArn"] = args ? args.taskRoleArn : undefined;
            inputs["volumes"] = args ? args.volumes : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["revision"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(TaskDefinition.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TaskDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new TaskDefinition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TaskDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TaskDefinition.__pulumiType;
    }
}
exports.TaskDefinition = TaskDefinition;
/** @internal */
TaskDefinition.__pulumiType = 'aws:ecs/taskDefinition:TaskDefinition';
//# sourceMappingURL=taskDefinition.js.map