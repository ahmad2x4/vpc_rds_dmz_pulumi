import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mytopic = new aws.sns.Topic("mytopic", {});
 * const role = new aws.iam.Role("role", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "iot.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `,
 * });
 * const rule = new aws.iot.TopicRule("rule", {
 *     description: "Example rule",
 *     enabled: true,
 *     sns: {
 *         messageFormat: "RAW",
 *         roleArn: role.arn,
 *         targetArn: mytopic.arn,
 *     },
 *     sql: "SELECT * FROM 'topic/test'",
 *     sqlVersion: "2015-10-08",
 * });
 * const iamPolicyForLambda = new aws.iam.RolePolicy("iamPolicyForLambda", {
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *         "Effect": "Allow",
 *         "Action": [
 *             "sns:Publish"
 *         ],
 *         "Resource": "${mytopic.arn}"
 *     }
 *   ]
 * }
 * `,
 *     role: role.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iot_topic_rule.html.markdown.
 */
export declare class TopicRule extends pulumi.CustomResource {
    /**
     * Get an existing TopicRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicRuleState, opts?: pulumi.CustomResourceOptions): TopicRule;
    /**
     * Returns true if the given object is an instance of TopicRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TopicRule;
    /**
     * The ARN of the topic rule
     */
    readonly arn: pulumi.Output<string>;
    readonly cloudwatchAlarm: pulumi.Output<outputs.iot.TopicRuleCloudwatchAlarm | undefined>;
    readonly cloudwatchMetric: pulumi.Output<outputs.iot.TopicRuleCloudwatchMetric | undefined>;
    /**
     * The description of the rule.
     */
    readonly description: pulumi.Output<string | undefined>;
    readonly dynamodb: pulumi.Output<outputs.iot.TopicRuleDynamodb | undefined>;
    readonly elasticsearch: pulumi.Output<outputs.iot.TopicRuleElasticsearch | undefined>;
    /**
     * Specifies whether the rule is enabled.
     */
    readonly enabled: pulumi.Output<boolean>;
    readonly firehose: pulumi.Output<outputs.iot.TopicRuleFirehose | undefined>;
    readonly kinesis: pulumi.Output<outputs.iot.TopicRuleKinesis | undefined>;
    readonly lambda: pulumi.Output<outputs.iot.TopicRuleLambda | undefined>;
    /**
     * The name of the rule.
     */
    readonly name: pulumi.Output<string>;
    readonly republish: pulumi.Output<outputs.iot.TopicRuleRepublish | undefined>;
    readonly s3: pulumi.Output<outputs.iot.TopicRuleS3 | undefined>;
    readonly sns: pulumi.Output<outputs.iot.TopicRuleSns | undefined>;
    /**
     * The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
     */
    readonly sql: pulumi.Output<string>;
    /**
     * The version of the SQL rules engine to use when evaluating the rule.
     */
    readonly sqlVersion: pulumi.Output<string>;
    readonly sqs: pulumi.Output<outputs.iot.TopicRuleSqs | undefined>;
    /**
     * Create a TopicRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicRuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering TopicRule resources.
 */
export interface TopicRuleState {
    /**
     * The ARN of the topic rule
     */
    readonly arn?: pulumi.Input<string>;
    readonly cloudwatchAlarm?: pulumi.Input<inputs.iot.TopicRuleCloudwatchAlarm>;
    readonly cloudwatchMetric?: pulumi.Input<inputs.iot.TopicRuleCloudwatchMetric>;
    /**
     * The description of the rule.
     */
    readonly description?: pulumi.Input<string>;
    readonly dynamodb?: pulumi.Input<inputs.iot.TopicRuleDynamodb>;
    readonly elasticsearch?: pulumi.Input<inputs.iot.TopicRuleElasticsearch>;
    /**
     * Specifies whether the rule is enabled.
     */
    readonly enabled?: pulumi.Input<boolean>;
    readonly firehose?: pulumi.Input<inputs.iot.TopicRuleFirehose>;
    readonly kinesis?: pulumi.Input<inputs.iot.TopicRuleKinesis>;
    readonly lambda?: pulumi.Input<inputs.iot.TopicRuleLambda>;
    /**
     * The name of the rule.
     */
    readonly name?: pulumi.Input<string>;
    readonly republish?: pulumi.Input<inputs.iot.TopicRuleRepublish>;
    readonly s3?: pulumi.Input<inputs.iot.TopicRuleS3>;
    readonly sns?: pulumi.Input<inputs.iot.TopicRuleSns>;
    /**
     * The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
     */
    readonly sql?: pulumi.Input<string>;
    /**
     * The version of the SQL rules engine to use when evaluating the rule.
     */
    readonly sqlVersion?: pulumi.Input<string>;
    readonly sqs?: pulumi.Input<inputs.iot.TopicRuleSqs>;
}
/**
 * The set of arguments for constructing a TopicRule resource.
 */
export interface TopicRuleArgs {
    readonly cloudwatchAlarm?: pulumi.Input<inputs.iot.TopicRuleCloudwatchAlarm>;
    readonly cloudwatchMetric?: pulumi.Input<inputs.iot.TopicRuleCloudwatchMetric>;
    /**
     * The description of the rule.
     */
    readonly description?: pulumi.Input<string>;
    readonly dynamodb?: pulumi.Input<inputs.iot.TopicRuleDynamodb>;
    readonly elasticsearch?: pulumi.Input<inputs.iot.TopicRuleElasticsearch>;
    /**
     * Specifies whether the rule is enabled.
     */
    readonly enabled: pulumi.Input<boolean>;
    readonly firehose?: pulumi.Input<inputs.iot.TopicRuleFirehose>;
    readonly kinesis?: pulumi.Input<inputs.iot.TopicRuleKinesis>;
    readonly lambda?: pulumi.Input<inputs.iot.TopicRuleLambda>;
    /**
     * The name of the rule.
     */
    readonly name?: pulumi.Input<string>;
    readonly republish?: pulumi.Input<inputs.iot.TopicRuleRepublish>;
    readonly s3?: pulumi.Input<inputs.iot.TopicRuleS3>;
    readonly sns?: pulumi.Input<inputs.iot.TopicRuleSns>;
    /**
     * The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference (http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html#aws-iot-sql-reference) in the AWS IoT Developer Guide.
     */
    readonly sql: pulumi.Input<string>;
    /**
     * The version of the SQL rules engine to use when evaluating the rule.
     */
    readonly sqlVersion: pulumi.Input<string>;
    readonly sqs?: pulumi.Input<inputs.iot.TopicRuleSqs>;
}
