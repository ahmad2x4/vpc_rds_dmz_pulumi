"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource-based access control mechanism for a KMS customer master key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const key = new aws.kms.Key("a", {});
 * const role = new aws.iam.Role("a", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const grant = new aws.kms.Grant("a", {
 *     constraints: [{
 *         encryptionContextEquals: {
 *             Department: "Finance",
 *         },
 *     }],
 *     granteePrincipal: role.arn,
 *     keyId: key.keyId,
 *     operations: [
 *         "Encrypt",
 *         "Decrypt",
 *         "GenerateDataKey",
 *     ],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/kms_grant.html.markdown.
 */
class Grant extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["constraints"] = state ? state.constraints : undefined;
            inputs["grantCreationTokens"] = state ? state.grantCreationTokens : undefined;
            inputs["grantId"] = state ? state.grantId : undefined;
            inputs["grantToken"] = state ? state.grantToken : undefined;
            inputs["granteePrincipal"] = state ? state.granteePrincipal : undefined;
            inputs["keyId"] = state ? state.keyId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["operations"] = state ? state.operations : undefined;
            inputs["retireOnDelete"] = state ? state.retireOnDelete : undefined;
            inputs["retiringPrincipal"] = state ? state.retiringPrincipal : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.granteePrincipal === undefined) {
                throw new Error("Missing required property 'granteePrincipal'");
            }
            if (!args || args.keyId === undefined) {
                throw new Error("Missing required property 'keyId'");
            }
            if (!args || args.operations === undefined) {
                throw new Error("Missing required property 'operations'");
            }
            inputs["constraints"] = args ? args.constraints : undefined;
            inputs["grantCreationTokens"] = args ? args.grantCreationTokens : undefined;
            inputs["granteePrincipal"] = args ? args.granteePrincipal : undefined;
            inputs["keyId"] = args ? args.keyId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["operations"] = args ? args.operations : undefined;
            inputs["retireOnDelete"] = args ? args.retireOnDelete : undefined;
            inputs["retiringPrincipal"] = args ? args.retiringPrincipal : undefined;
            inputs["grantId"] = undefined /*out*/;
            inputs["grantToken"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Grant.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Grant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Grant(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Grant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Grant.__pulumiType;
    }
}
exports.Grant = Grant;
/** @internal */
Grant.__pulumiType = 'aws:kms/grant:Grant';
//# sourceMappingURL=grant.js.map