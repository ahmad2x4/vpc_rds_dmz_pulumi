import * as pulumi from "@pulumi/pulumi";
/**
 * The KMS ciphertext resource allows you to encrypt plaintext into ciphertext
 * by using an AWS KMS customer master key. The value returned by this resource
 * is stable across every apply. For a changing ciphertext value each apply, see
 * the [`aws.kms.Ciphertext` data source](https://www.terraform.io/docs/providers/aws/d/kms_ciphertext.html).
 *
 * > **Note:** All arguments including the plaintext be stored in the raw state as plain-text.
 * [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const oauthConfig = new aws.kms.Key("oauthConfig", {
 *     description: "oauth config",
 *     isEnabled: true,
 * });
 * const oauth = new aws.kms.Ciphertext("oauth", {
 *     keyId: oauthConfig.keyId,
 *     plaintext: `{
 *   "clientId": "e587dbae22222f55da22",
 *   "clientSecret": "8289575d00000ace55e1815ec13673955721b8a5"
 * }
 * `,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/kms_ciphertext.html.markdown.
 */
export declare class Ciphertext extends pulumi.CustomResource {
    /**
     * Get an existing Ciphertext resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiphertextState, opts?: pulumi.CustomResourceOptions): Ciphertext;
    /**
     * Returns true if the given object is an instance of Ciphertext.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Ciphertext;
    /**
     * Base64 encoded ciphertext
     */
    readonly ciphertextBlob: pulumi.Output<string>;
    /**
     * An optional mapping that makes up the encryption context.
     */
    readonly context: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Globally unique key ID for the customer master key.
     */
    readonly keyId: pulumi.Output<string>;
    /**
     * Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
     */
    readonly plaintext: pulumi.Output<string>;
    /**
     * Create a Ciphertext resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiphertextArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Ciphertext resources.
 */
export interface CiphertextState {
    /**
     * Base64 encoded ciphertext
     */
    readonly ciphertextBlob?: pulumi.Input<string>;
    /**
     * An optional mapping that makes up the encryption context.
     */
    readonly context?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Globally unique key ID for the customer master key.
     */
    readonly keyId?: pulumi.Input<string>;
    /**
     * Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
     */
    readonly plaintext?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Ciphertext resource.
 */
export interface CiphertextArgs {
    /**
     * An optional mapping that makes up the encryption context.
     */
    readonly context?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Globally unique key ID for the customer master key.
     */
    readonly keyId: pulumi.Input<string>;
    /**
     * Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
     */
    readonly plaintext: pulumi.Input<string>;
}
