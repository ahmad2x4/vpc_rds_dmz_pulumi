"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Log subscription for AWS Directory Service that pushes logs to cloudwatch.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("example", {
 *     retentionInDays: 14,
 * });
 * const ad_log_policyPolicyDocument = exampleLogGroup.arn.apply(arn => aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: [
 *             "logs:CreateLogStream",
 *             "logs:PutLogEvents",
 *         ],
 *         effect: "Allow",
 *         principals: [{
 *             identifiers: ["ds.amazonaws.com"],
 *             type: "Service",
 *         }],
 *         resources: [arn],
 *     }],
 * }));
 * const ad_log_policyLogResourcePolicy = new aws.cloudwatch.LogResourcePolicy("ad-log-policy", {
 *     policyDocument: ad_log_policyPolicyDocument.json,
 *     policyName: "ad-log-policy",
 * });
 * const exampleLogService = new aws.directoryservice.LogService("example", {
 *     directoryId: aws_directory_service_directory_example.id,
 *     logGroupName: exampleLogGroup.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/directory_service_log_subscription.html.markdown.
 */
class LogService extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["directoryId"] = state ? state.directoryId : undefined;
            inputs["logGroupName"] = state ? state.logGroupName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.directoryId === undefined) {
                throw new Error("Missing required property 'directoryId'");
            }
            if (!args || args.logGroupName === undefined) {
                throw new Error("Missing required property 'logGroupName'");
            }
            inputs["directoryId"] = args ? args.directoryId : undefined;
            inputs["logGroupName"] = args ? args.logGroupName : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LogService.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LogService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new LogService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogService.__pulumiType;
    }
}
exports.LogService = LogService;
/** @internal */
LogService.__pulumiType = 'aws:directoryservice/logService:LogService';
//# sourceMappingURL=logService.js.map