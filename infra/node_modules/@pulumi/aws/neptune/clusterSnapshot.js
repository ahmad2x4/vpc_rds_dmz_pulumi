"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Neptune database cluster snapshot.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.neptune.ClusterSnapshot("example", {
 *     dbClusterIdentifier: aws_neptune_cluster_example.id,
 *     dbClusterSnapshotIdentifier: "resourcetestsnapshot1234",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/neptune_cluster_snapshot.html.markdown.
 */
class ClusterSnapshot extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["dbClusterIdentifier"] = state ? state.dbClusterIdentifier : undefined;
            inputs["dbClusterSnapshotArn"] = state ? state.dbClusterSnapshotArn : undefined;
            inputs["dbClusterSnapshotIdentifier"] = state ? state.dbClusterSnapshotIdentifier : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["licenseModel"] = state ? state.licenseModel : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["snapshotType"] = state ? state.snapshotType : undefined;
            inputs["sourceDbClusterSnapshotArn"] = state ? state.sourceDbClusterSnapshotArn : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.dbClusterIdentifier === undefined) {
                throw new Error("Missing required property 'dbClusterIdentifier'");
            }
            if (!args || args.dbClusterSnapshotIdentifier === undefined) {
                throw new Error("Missing required property 'dbClusterSnapshotIdentifier'");
            }
            inputs["dbClusterIdentifier"] = args ? args.dbClusterIdentifier : undefined;
            inputs["dbClusterSnapshotIdentifier"] = args ? args.dbClusterSnapshotIdentifier : undefined;
            inputs["allocatedStorage"] = undefined /*out*/;
            inputs["availabilityZones"] = undefined /*out*/;
            inputs["dbClusterSnapshotArn"] = undefined /*out*/;
            inputs["engine"] = undefined /*out*/;
            inputs["engineVersion"] = undefined /*out*/;
            inputs["kmsKeyId"] = undefined /*out*/;
            inputs["licenseModel"] = undefined /*out*/;
            inputs["port"] = undefined /*out*/;
            inputs["snapshotType"] = undefined /*out*/;
            inputs["sourceDbClusterSnapshotArn"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["storageEncrypted"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ClusterSnapshot.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ClusterSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new ClusterSnapshot(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClusterSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterSnapshot.__pulumiType;
    }
}
exports.ClusterSnapshot = ClusterSnapshot;
/** @internal */
ClusterSnapshot.__pulumiType = 'aws:neptune/clusterSnapshot:ClusterSnapshot';
//# sourceMappingURL=clusterSnapshot.js.map