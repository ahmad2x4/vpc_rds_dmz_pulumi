"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an HTTP Method Integration for an API Gateway Integration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myDemoAPI = new aws.apigateway.RestApi("MyDemoAPI", {
 *     description: "This is my API for demonstration purposes",
 * });
 * const myDemoResource = new aws.apigateway.Resource("MyDemoResource", {
 *     parentId: myDemoAPI.rootResourceId,
 *     pathPart: "mydemoresource",
 *     restApi: myDemoAPI.id,
 * });
 * const myDemoMethod = new aws.apigateway.Method("MyDemoMethod", {
 *     authorization: "NONE",
 *     httpMethod: "GET",
 *     resourceId: myDemoResource.id,
 *     restApi: myDemoAPI.id,
 * });
 * const myDemoIntegration = new aws.apigateway.Integration("MyDemoIntegration", {
 *     cacheKeyParameters: ["method.request.path.param"],
 *     cacheNamespace: "foobar",
 *     httpMethod: myDemoMethod.httpMethod,
 *     requestParameters: {
 *         "integration.request.header.X-Authorization": "'static'",
 *     },
 *     // Transforms the incoming XML request to JSON
 *     requestTemplates: {
 *         "application/xml": `{
 *    "body" : $input.json('$')
 * }
 * `,
 *     },
 *     resourceId: myDemoResource.id,
 *     restApi: myDemoAPI.id,
 *     timeoutMilliseconds: 29000,
 *     type: "MOCK",
 * });
 * ```
 *
 * ## Lambda integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * // Variables
 * const myregion = config.require("myregion");
 * const accountId = config.require("accountId");
 *
 * // API Gateway
 * const api = new aws.apigateway.RestApi("api", {});
 * const resource = new aws.apigateway.Resource("resource", {
 *     parentId: api.rootResourceId,
 *     pathPart: "resource",
 *     restApi: api.id,
 * });
 * const method = new aws.apigateway.Method("method", {
 *     authorization: "NONE",
 *     httpMethod: "GET",
 *     resourceId: resource.id,
 *     restApi: api.id,
 * });
 * // IAM
 * const role = new aws.iam.Role("role", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const lambda = new aws.lambda.Function("lambda", {
 *     code: new pulumi.asset.FileArchive("lambda.zip"),
 *     handler: "lambda.lambda_handler",
 *     role: role.arn,
 *     runtime: "python2.7",
 * });
 * const integration = new aws.apigateway.Integration("integration", {
 *     httpMethod: method.httpMethod,
 *     integrationHttpMethod: "POST",
 *     resourceId: resource.id,
 *     restApi: api.id,
 *     type: "AWS_PROXY",
 *     uri: lambda.invokeArn,
 * });
 * // Lambda
 * const apigwLambda = new aws.lambda.Permission("apigwLambda", {
 *     action: "lambda:InvokeFunction",
 *     function: lambda.functionName,
 *     principal: "apigateway.amazonaws.com",
 *     sourceArn: pulumi.interpolate`arn:aws:execute-api:${myregion}:${accountId}:${api.id}/*&#47;${method.httpMethod}${resource.path}`,
 * });
 * ```
 *
 * ## VPC Link
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const name = config.require("name");
 * const subnetId = config.require("subnetId");
 *
 * const testLoadBalancer = new aws.lb.LoadBalancer("test", {
 *     internal: true,
 *     loadBalancerType: "network",
 *     subnets: [subnetId],
 * });
 * const testVpcLink = new aws.apigateway.VpcLink("test", {
 *     targetArn: testLoadBalancer.arn,
 * });
 * const testRestApi = new aws.apigateway.RestApi("test", {});
 * const testResource = new aws.apigateway.Resource("test", {
 *     parentId: testRestApi.rootResourceId,
 *     pathPart: "test",
 *     restApi: testRestApi.id,
 * });
 * const testMethod = new aws.apigateway.Method("test", {
 *     authorization: "NONE",
 *     httpMethod: "GET",
 *     requestModels: {
 *         "application/json": "Error",
 *     },
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 * });
 * const testIntegration = new aws.apigateway.Integration("test", {
 *     connectionId: testVpcLink.id,
 *     connectionType: "VPC_LINK",
 *     contentHandling: "CONVERT_TO_TEXT",
 *     httpMethod: testMethod.httpMethod,
 *     integrationHttpMethod: "GET",
 *     passthroughBehavior: "WHEN_NO_MATCH",
 *     requestParameters: {
 *         "integration.request.header.X-Authorization": "'static'",
 *         "integration.request.header.X-Foo": "'Bar'",
 *     },
 *     requestTemplates: {
 *         "application/json": "",
 *         "application/xml": `#set($inputRoot = $input.path('$'))
 * { }`,
 *     },
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 *     type: "HTTP",
 *     uri: "https://www.google.de",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_integration.html.markdown.
 */
class Integration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["cacheKeyParameters"] = state ? state.cacheKeyParameters : undefined;
            inputs["cacheNamespace"] = state ? state.cacheNamespace : undefined;
            inputs["connectionId"] = state ? state.connectionId : undefined;
            inputs["connectionType"] = state ? state.connectionType : undefined;
            inputs["contentHandling"] = state ? state.contentHandling : undefined;
            inputs["credentials"] = state ? state.credentials : undefined;
            inputs["httpMethod"] = state ? state.httpMethod : undefined;
            inputs["integrationHttpMethod"] = state ? state.integrationHttpMethod : undefined;
            inputs["passthroughBehavior"] = state ? state.passthroughBehavior : undefined;
            inputs["requestParameters"] = state ? state.requestParameters : undefined;
            inputs["requestTemplates"] = state ? state.requestTemplates : undefined;
            inputs["resourceId"] = state ? state.resourceId : undefined;
            inputs["restApi"] = state ? state.restApi : undefined;
            inputs["timeoutMilliseconds"] = state ? state.timeoutMilliseconds : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["uri"] = state ? state.uri : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.httpMethod === undefined) {
                throw new Error("Missing required property 'httpMethod'");
            }
            if (!args || args.resourceId === undefined) {
                throw new Error("Missing required property 'resourceId'");
            }
            if (!args || args.restApi === undefined) {
                throw new Error("Missing required property 'restApi'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["cacheKeyParameters"] = args ? args.cacheKeyParameters : undefined;
            inputs["cacheNamespace"] = args ? args.cacheNamespace : undefined;
            inputs["connectionId"] = args ? args.connectionId : undefined;
            inputs["connectionType"] = args ? args.connectionType : undefined;
            inputs["contentHandling"] = args ? args.contentHandling : undefined;
            inputs["credentials"] = args ? args.credentials : undefined;
            inputs["httpMethod"] = args ? args.httpMethod : undefined;
            inputs["integrationHttpMethod"] = args ? args.integrationHttpMethod : undefined;
            inputs["passthroughBehavior"] = args ? args.passthroughBehavior : undefined;
            inputs["requestParameters"] = args ? args.requestParameters : undefined;
            inputs["requestTemplates"] = args ? args.requestTemplates : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["restApi"] = args ? args.restApi : undefined;
            inputs["timeoutMilliseconds"] = args ? args.timeoutMilliseconds : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["uri"] = args ? args.uri : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Integration.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Integration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }
}
exports.Integration = Integration;
/** @internal */
Integration.__pulumiType = 'aws:apigateway/integration:Integration';
//# sourceMappingURL=integration.js.map