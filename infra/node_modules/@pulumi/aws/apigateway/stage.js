"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an API Gateway Stage.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testRestApi = new aws.apigateway.RestApi("test", {
 *     description: "This is my API for demonstration purposes",
 * });
 * const testResource = new aws.apigateway.Resource("test", {
 *     parentId: testRestApi.rootResourceId,
 *     pathPart: "mytestresource",
 *     restApi: testRestApi.id,
 * });
 * const testMethod = new aws.apigateway.Method("test", {
 *     authorization: "NONE",
 *     httpMethod: "GET",
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 * });
 * const testIntegration = new aws.apigateway.Integration("test", {
 *     httpMethod: testMethod.httpMethod,
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 *     type: "MOCK",
 * });
 * const testDeployment = new aws.apigateway.Deployment("test", {
 *     restApi: testRestApi.id,
 *     stageName: "dev",
 * }, {dependsOn: [testIntegration]});
 * const testStage = new aws.apigateway.Stage("test", {
 *     deployment: testDeployment.id,
 *     restApi: testRestApi.id,
 *     stageName: "prod",
 * });
 * const methodSettings = new aws.apigateway.MethodSettings("s", {
 *     methodPath: pulumi.interpolate`${testResource.pathPart}/${testMethod.httpMethod}`,
 *     restApi: testRestApi.id,
 *     settings: {
 *         loggingLevel: "INFO",
 *         metricsEnabled: true,
 *     },
 *     stageName: testStage.stageName,
 * });
 * ```
 *
 * ### Managing the API Logging CloudWatch Log Group
 *
 * API Gateway provides the ability to [enable CloudWatch API logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html). To manage the CloudWatch Log Group when this feature is enabled, the [`aws.cloudwatch.LogGroup` resource](https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_group.html) can be used where the name matches the API Gateway naming convention. If the CloudWatch Log Group previously exists, the [`aws.cloudwatch.LogGroup` resource can be imported ](https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_group.html#import) as a one time operation and recreation of the environment can occur without import.
 *
 * > The below configuration uses [`dependsOn`](https://www.terraform.io/docs/configuration/resources.html#depends_on-explicit-resource-dependencies) to prevent ordering issues with API Gateway automatically creating the log group first and a variable for naming consistency. Other ordering and naming methodologies may be more appropriate for your environment.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const stageName = config.get("stageName") || "example";
 *
 * const exampleRestApi = new aws.apigateway.RestApi("example", {});
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("example", {
 *     retentionInDays: 7,
 * });
 * const exampleStage = new aws.apigateway.Stage("example", {
 *     name: stageName,
 * }, {dependsOn: [exampleLogGroup]});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_stage.html.markdown.
 */
class Stage extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["accessLogSettings"] = state ? state.accessLogSettings : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["cacheClusterEnabled"] = state ? state.cacheClusterEnabled : undefined;
            inputs["cacheClusterSize"] = state ? state.cacheClusterSize : undefined;
            inputs["clientCertificateId"] = state ? state.clientCertificateId : undefined;
            inputs["deployment"] = state ? state.deployment : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["documentationVersion"] = state ? state.documentationVersion : undefined;
            inputs["executionArn"] = state ? state.executionArn : undefined;
            inputs["invokeUrl"] = state ? state.invokeUrl : undefined;
            inputs["restApi"] = state ? state.restApi : undefined;
            inputs["stageName"] = state ? state.stageName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["variables"] = state ? state.variables : undefined;
            inputs["xrayTracingEnabled"] = state ? state.xrayTracingEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.deployment === undefined) {
                throw new Error("Missing required property 'deployment'");
            }
            if (!args || args.restApi === undefined) {
                throw new Error("Missing required property 'restApi'");
            }
            if (!args || args.stageName === undefined) {
                throw new Error("Missing required property 'stageName'");
            }
            inputs["accessLogSettings"] = args ? args.accessLogSettings : undefined;
            inputs["cacheClusterEnabled"] = args ? args.cacheClusterEnabled : undefined;
            inputs["cacheClusterSize"] = args ? args.cacheClusterSize : undefined;
            inputs["clientCertificateId"] = args ? args.clientCertificateId : undefined;
            inputs["deployment"] = args ? args.deployment : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["documentationVersion"] = args ? args.documentationVersion : undefined;
            inputs["restApi"] = args ? args.restApi : undefined;
            inputs["stageName"] = args ? args.stageName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["variables"] = args ? args.variables : undefined;
            inputs["xrayTracingEnabled"] = args ? args.xrayTracingEnabled : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["executionArn"] = undefined /*out*/;
            inputs["invokeUrl"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Stage.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Stage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Stage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Stage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stage.__pulumiType;
    }
}
exports.Stage = Stage;
/** @internal */
Stage.__pulumiType = 'aws:apigateway/stage:Stage';
//# sourceMappingURL=stage.js.map