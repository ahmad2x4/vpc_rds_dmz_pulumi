import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
/**
 * Provides an API Gateway Usage Plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myapi = new aws.apigateway.RestApi("myapi", {});
 * const dev = new aws.apigateway.Deployment("dev", {
 *     restApi: myapi.id,
 *     stageName: "dev",
 * });
 * const prod = new aws.apigateway.Deployment("prod", {
 *     restApi: myapi.id,
 *     stageName: "prod",
 * });
 * const myUsagePlan = new aws.apigateway.UsagePlan("MyUsagePlan", {
 *     apiStages: [
 *         {
 *             apiId: myapi.id,
 *             stage: dev.stageName,
 *         },
 *         {
 *             apiId: myapi.id,
 *             stage: prod.stageName,
 *         },
 *     ],
 *     description: "my description",
 *     productCode: "MYCODE",
 *     quotaSettings: {
 *         limit: 20,
 *         offset: 2,
 *         period: "WEEK",
 *     },
 *     throttleSettings: {
 *         burstLimit: 5,
 *         rateLimit: 10,
 *     },
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_usage_plan.html.markdown.
 */
export declare class UsagePlan extends pulumi.CustomResource {
    /**
     * Get an existing UsagePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UsagePlanState, opts?: pulumi.CustomResourceOptions): UsagePlan;
    /**
     * Returns true if the given object is an instance of UsagePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is UsagePlan;
    /**
     * The associated API stages of the usage plan.
     */
    readonly apiStages: pulumi.Output<outputs.apigateway.UsagePlanApiStage[] | undefined>;
    /**
     * Amazon Resource Name (ARN)
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The description of a usage plan.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the usage plan.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
     */
    readonly productCode: pulumi.Output<string | undefined>;
    /**
     * The quota settings of the usage plan.
     */
    readonly quotaSettings: pulumi.Output<outputs.apigateway.UsagePlanQuotaSettings | undefined>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * The throttling limits of the usage plan.
     */
    readonly throttleSettings: pulumi.Output<outputs.apigateway.UsagePlanThrottleSettings | undefined>;
    /**
     * Create a UsagePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UsagePlanArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering UsagePlan resources.
 */
export interface UsagePlanState {
    /**
     * The associated API stages of the usage plan.
     */
    readonly apiStages?: pulumi.Input<pulumi.Input<inputs.apigateway.UsagePlanApiStage>[]>;
    /**
     * Amazon Resource Name (ARN)
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The description of a usage plan.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the usage plan.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
     */
    readonly productCode?: pulumi.Input<string>;
    /**
     * The quota settings of the usage plan.
     */
    readonly quotaSettings?: pulumi.Input<inputs.apigateway.UsagePlanQuotaSettings>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The throttling limits of the usage plan.
     */
    readonly throttleSettings?: pulumi.Input<inputs.apigateway.UsagePlanThrottleSettings>;
}
/**
 * The set of arguments for constructing a UsagePlan resource.
 */
export interface UsagePlanArgs {
    /**
     * The associated API stages of the usage plan.
     */
    readonly apiStages?: pulumi.Input<pulumi.Input<inputs.apigateway.UsagePlanApiStage>[]>;
    /**
     * The description of a usage plan.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The name of the usage plan.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The AWS Markeplace product identifier to associate with the usage plan as a SaaS product on AWS Marketplace.
     */
    readonly productCode?: pulumi.Input<string>;
    /**
     * The quota settings of the usage plan.
     */
    readonly quotaSettings?: pulumi.Input<inputs.apigateway.UsagePlanQuotaSettings>;
    /**
     * Key-value mapping of resource tags
     */
    readonly tags?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * The throttling limits of the usage plan.
     */
    readonly throttleSettings?: pulumi.Input<inputs.apigateway.UsagePlanThrottleSettings>;
}
