import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import { RestApi } from "./restApi";
/**
 * Provides an API Gateway Method Settings, e.g. logging or monitoring.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testRestApi = new aws.apigateway.RestApi("test", {
 *     description: "This is my API for demonstration purposes",
 * });
 * const testResource = new aws.apigateway.Resource("test", {
 *     parentId: testRestApi.rootResourceId,
 *     pathPart: "mytestresource",
 *     restApi: testRestApi.id,
 * });
 * const testMethod = new aws.apigateway.Method("test", {
 *     authorization: "NONE",
 *     httpMethod: "GET",
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 * });
 * const testIntegration = new aws.apigateway.Integration("test", {
 *     httpMethod: testMethod.httpMethod,
 *     requestTemplates: {
 *         "application/xml": `{
 *    "body" : $input.json('$')
 * }
 * `,
 *     },
 *     resourceId: testResource.id,
 *     restApi: testRestApi.id,
 *     type: "MOCK",
 * });
 * const testDeployment = new aws.apigateway.Deployment("test", {
 *     restApi: testRestApi.id,
 *     stageName: "dev",
 * }, {dependsOn: [testIntegration]});
 * const testStage = new aws.apigateway.Stage("test", {
 *     deployment: testDeployment.id,
 *     restApi: testRestApi.id,
 *     stageName: "prod",
 * });
 * const methodSettings = new aws.apigateway.MethodSettings("s", {
 *     methodPath: pulumi.interpolate`${testResource.pathPart}/${testMethod.httpMethod}`,
 *     restApi: testRestApi.id,
 *     settings: {
 *         loggingLevel: "INFO",
 *         metricsEnabled: true,
 *     },
 *     stageName: testStage.stageName,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_method_settings.html.markdown.
 */
export declare class MethodSettings extends pulumi.CustomResource {
    /**
     * Get an existing MethodSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MethodSettingsState, opts?: pulumi.CustomResourceOptions): MethodSettings;
    /**
     * Returns true if the given object is an instance of MethodSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is MethodSettings;
    /**
     * Method path defined as `{resource_path}/{http_method}` for an individual method override, or `*&#47;*` for overriding all methods in the stage.
     */
    readonly methodPath: pulumi.Output<string>;
    /**
     * The ID of the REST API
     */
    readonly restApi: pulumi.Output<RestApi>;
    /**
     * The settings block, see below.
     */
    readonly settings: pulumi.Output<outputs.apigateway.MethodSettingsSettings>;
    /**
     * The name of the stage
     */
    readonly stageName: pulumi.Output<string>;
    /**
     * Create a MethodSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MethodSettingsArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering MethodSettings resources.
 */
export interface MethodSettingsState {
    /**
     * Method path defined as `{resource_path}/{http_method}` for an individual method override, or `*&#47;*` for overriding all methods in the stage.
     */
    readonly methodPath?: pulumi.Input<string>;
    /**
     * The ID of the REST API
     */
    readonly restApi?: pulumi.Input<RestApi>;
    /**
     * The settings block, see below.
     */
    readonly settings?: pulumi.Input<inputs.apigateway.MethodSettingsSettings>;
    /**
     * The name of the stage
     */
    readonly stageName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a MethodSettings resource.
 */
export interface MethodSettingsArgs {
    /**
     * Method path defined as `{resource_path}/{http_method}` for an individual method override, or `*&#47;*` for overriding all methods in the stage.
     */
    readonly methodPath: pulumi.Input<string>;
    /**
     * The ID of the REST API
     */
    readonly restApi: pulumi.Input<RestApi>;
    /**
     * The settings block, see below.
     */
    readonly settings: pulumi.Input<inputs.apigateway.MethodSettingsSettings>;
    /**
     * The name of the stage
     */
    readonly stageName: pulumi.Input<string>;
}
