"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Connects a custom domain name registered via `aws.apigateway.DomainName`
 * with a deployed API so that its methods can be called via the
 * custom domain name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const exampleDeployment = new aws.apigateway.Deployment("example", {
 *     // See aws.apigateway.RestApi docs for how to create this
 *     restApi: aws_api_gateway_rest_api_MyDemoAPI.id,
 *     stageName: "live",
 * });
 * const exampleDomainName = new aws.apigateway.DomainName("example", {
 *     certificateBody: fs.readFileSync(`./example.com/example.crt`, "utf-8"),
 *     certificateChain: fs.readFileSync(`./example.com/ca.crt`, "utf-8"),
 *     certificateName: "example-api",
 *     certificatePrivateKey: fs.readFileSync(`./example.com/example.key`, "utf-8"),
 *     domainName: "example.com",
 * });
 * const test = new aws.apigateway.BasePathMapping("test", {
 *     restApi: aws_api_gateway_rest_api_MyDemoAPI.id,
 *     domainName: exampleDomainName.domainName,
 *     stageName: exampleDeployment.stageName,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_base_path_mapping.html.markdown.
 */
class BasePathMapping extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["restApi"] = state ? state.restApi : undefined;
            inputs["basePath"] = state ? state.basePath : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["stageName"] = state ? state.stageName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.restApi === undefined) {
                throw new Error("Missing required property 'restApi'");
            }
            if (!args || args.domainName === undefined) {
                throw new Error("Missing required property 'domainName'");
            }
            inputs["restApi"] = args ? args.restApi : undefined;
            inputs["basePath"] = args ? args.basePath : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["stageName"] = args ? args.stageName : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(BasePathMapping.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing BasePathMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new BasePathMapping(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of BasePathMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BasePathMapping.__pulumiType;
    }
}
exports.BasePathMapping = BasePathMapping;
/** @internal */
BasePathMapping.__pulumiType = 'aws:apigateway/basePathMapping:BasePathMapping';
//# sourceMappingURL=basePathMapping.js.map