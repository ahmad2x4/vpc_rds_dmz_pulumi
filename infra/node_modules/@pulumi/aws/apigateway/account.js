"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a settings of an API Gateway Account. Settings is applied region-wide per `provider` block.
 *
 * > **Note:** As there is no API method for deleting account settings or resetting it to defaults, destroying this resource will keep your account settings intact
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cloudwatchRole = new aws.iam.Role("cloudwatch", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "apigateway.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `,
 * });
 * const demo = new aws.apigateway.Account("demo", {
 *     cloudwatchRoleArn: cloudwatchRole.arn,
 * });
 * const cloudwatchRolePolicy = new aws.iam.RolePolicy("cloudwatch", {
 *     policy: `{
 *     "Version": "2012-10-17",
 *     "Statement": [
 *         {
 *             "Effect": "Allow",
 *             "Action": [
 *                 "logs:CreateLogGroup",
 *                 "logs:CreateLogStream",
 *                 "logs:DescribeLogGroups",
 *                 "logs:DescribeLogStreams",
 *                 "logs:PutLogEvents",
 *                 "logs:GetLogEvents",
 *                 "logs:FilterLogEvents"
 *             ],
 *             "Resource": "*"
 *         }
 *     ]
 * }
 * `,
 *     role: cloudwatchRole.id,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_account.html.markdown.
 */
class Account extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["cloudwatchRoleArn"] = state ? state.cloudwatchRoleArn : undefined;
            inputs["throttleSettings"] = state ? state.throttleSettings : undefined;
        }
        else {
            const args = argsOrState;
            inputs["cloudwatchRoleArn"] = args ? args.cloudwatchRoleArn : undefined;
            inputs["throttleSettings"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Account.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Account(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }
}
exports.Account = Account;
/** @internal */
Account.__pulumiType = 'aws:apigateway/account:Account';
//# sourceMappingURL=account.js.map