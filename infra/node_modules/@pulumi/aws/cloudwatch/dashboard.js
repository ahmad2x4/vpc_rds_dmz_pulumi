"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Dashboard resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = new aws.cloudwatch.Dashboard("main", {
 *     dashboardBody: ` {
 *    "widgets": [
 *        {
 *           "type":"metric",
 *           "x":0,
 *           "y":0,
 *           "width":12,
 *           "height":6,
 *           "properties":{
 *              "metrics":[
 *                 [
 *                    "AWS/EC2",
 *                    "CPUUtilization",
 *                    "InstanceId",
 *                    "i-012345"
 *                 ]
 *              ],
 *              "period":300,
 *              "stat":"Average",
 *              "region":"us-east-1",
 *              "title":"EC2 Instance CPU"
 *           }
 *        },
 *        {
 *           "type":"text",
 *           "x":0,
 *           "y":7,
 *           "width":3,
 *           "height":3,
 *           "properties":{
 *              "markdown":"Hello world"
 *           }
 *        }
 *    ]
 *  }
 *  `,
 *     dashboardName: "my-dashboard",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudwatch_dashboard.html.markdown.
 */
class Dashboard extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["dashboardArn"] = state ? state.dashboardArn : undefined;
            inputs["dashboardBody"] = state ? state.dashboardBody : undefined;
            inputs["dashboardName"] = state ? state.dashboardName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.dashboardBody === undefined) {
                throw new Error("Missing required property 'dashboardBody'");
            }
            if (!args || args.dashboardName === undefined) {
                throw new Error("Missing required property 'dashboardName'");
            }
            inputs["dashboardBody"] = args ? args.dashboardBody : undefined;
            inputs["dashboardName"] = args ? args.dashboardName : undefined;
            inputs["dashboardArn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Dashboard.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Dashboard(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }
}
exports.Dashboard = Dashboard;
/** @internal */
Dashboard.__pulumiType = 'aws:cloudwatch/dashboard:Dashboard';
//# sourceMappingURL=dashboard.js.map