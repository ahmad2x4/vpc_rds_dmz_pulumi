import * as pulumi from "@pulumi/pulumi";
import { LogGroup } from "./logGroup";
/**
 * Provides a CloudWatch Logs subscription filter resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testLambdafunctionLogfilter = new aws.cloudwatch.LogSubscriptionFilter("testLambdafunctionLogfilter", {
 *     destinationArn: aws_kinesis_stream_test_logstream.arn,
 *     distribution: "Random",
 *     filterPattern: "logtype test",
 *     logGroup: "/aws/lambda/example_lambda_name",
 *     roleArn: aws_iam_role_iam_for_lambda.arn,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudwatch_log_subscription_filter.html.markdown.
 */
export declare class LogSubscriptionFilter extends pulumi.CustomResource {
    /**
     * Get an existing LogSubscriptionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogSubscriptionFilterState, opts?: pulumi.CustomResourceOptions): LogSubscriptionFilter;
    /**
     * Returns true if the given object is an instance of LogSubscriptionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LogSubscriptionFilter;
    /**
     * The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
     */
    readonly destinationArn: pulumi.Output<string>;
    /**
     * The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
     */
    readonly distribution: pulumi.Output<string | undefined>;
    /**
     * A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
     */
    readonly filterPattern: pulumi.Output<string>;
    /**
     * The name of the log group to associate the subscription filter with
     */
    readonly logGroup: pulumi.Output<LogGroup>;
    /**
     * A name for the subscription filter
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws.lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
     */
    readonly roleArn: pulumi.Output<string>;
    /**
     * Create a LogSubscriptionFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogSubscriptionFilterArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LogSubscriptionFilter resources.
 */
export interface LogSubscriptionFilterState {
    /**
     * The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
     */
    readonly destinationArn?: pulumi.Input<string>;
    /**
     * The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
     */
    readonly distribution?: pulumi.Input<string>;
    /**
     * A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
     */
    readonly filterPattern?: pulumi.Input<string>;
    /**
     * The name of the log group to associate the subscription filter with
     */
    readonly logGroup?: pulumi.Input<LogGroup>;
    /**
     * A name for the subscription filter
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws.lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
     */
    readonly roleArn?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a LogSubscriptionFilter resource.
 */
export interface LogSubscriptionFilterArgs {
    /**
     * The ARN of the destination to deliver matching log events to. Kinesis stream or Lambda function ARN.
     */
    readonly destinationArn: pulumi.Input<string>;
    /**
     * The method used to distribute log data to the destination. By default log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream. Valid values are "Random" and "ByLogStream".
     */
    readonly distribution?: pulumi.Input<string>;
    /**
     * A valid CloudWatch Logs filter pattern for subscribing to a filtered stream of log events.
     */
    readonly filterPattern: pulumi.Input<string>;
    /**
     * The name of the log group to associate the subscription filter with
     */
    readonly logGroup: pulumi.Input<LogGroup>;
    /**
     * A name for the subscription filter
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ARN of an IAM role that grants Amazon CloudWatch Logs permissions to deliver ingested log events to the destination. If you use Lambda as a destination, you should skip this argument and use `aws.lambda.Permission` resource for granting access from CloudWatch logs to the destination Lambda function.
     */
    readonly roleArn?: pulumi.Input<string>;
}
