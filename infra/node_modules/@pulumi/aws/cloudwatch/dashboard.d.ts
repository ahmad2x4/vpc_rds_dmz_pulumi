import * as pulumi from "@pulumi/pulumi";
/**
 * Provides a CloudWatch Dashboard resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = new aws.cloudwatch.Dashboard("main", {
 *     dashboardBody: ` {
 *    "widgets": [
 *        {
 *           "type":"metric",
 *           "x":0,
 *           "y":0,
 *           "width":12,
 *           "height":6,
 *           "properties":{
 *              "metrics":[
 *                 [
 *                    "AWS/EC2",
 *                    "CPUUtilization",
 *                    "InstanceId",
 *                    "i-012345"
 *                 ]
 *              ],
 *              "period":300,
 *              "stat":"Average",
 *              "region":"us-east-1",
 *              "title":"EC2 Instance CPU"
 *           }
 *        },
 *        {
 *           "type":"text",
 *           "x":0,
 *           "y":7,
 *           "width":3,
 *           "height":3,
 *           "properties":{
 *              "markdown":"Hello world"
 *           }
 *        }
 *    ]
 *  }
 *  `,
 *     dashboardName: "my-dashboard",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudwatch_dashboard.html.markdown.
 */
export declare class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard;
    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Dashboard;
    /**
     * The Amazon Resource Name (ARN) of the dashboard.
     */
    readonly dashboardArn: pulumi.Output<string>;
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     */
    readonly dashboardBody: pulumi.Output<string>;
    /**
     * The name of the dashboard.
     */
    readonly dashboardName: pulumi.Output<string>;
    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * The Amazon Resource Name (ARN) of the dashboard.
     */
    readonly dashboardArn?: pulumi.Input<string>;
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     */
    readonly dashboardBody?: pulumi.Input<string>;
    /**
     * The name of the dashboard.
     */
    readonly dashboardName?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     */
    readonly dashboardBody: pulumi.Input<string>;
    /**
     * The name of the dashboard.
     */
    readonly dashboardName: pulumi.Input<string>;
}
