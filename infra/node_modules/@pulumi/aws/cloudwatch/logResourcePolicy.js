"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage a CloudWatch log resource policy.
 *
 * ## Example Usage
 *
 * ### Elasticsearch Log Publishing
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const elasticsearch_log_publishing_policyPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: [
 *             "logs:CreateLogStream",
 *             "logs:PutLogEvents",
 *             "logs:PutLogEventsBatch",
 *         ],
 *         principals: [{
 *             identifiers: ["es.amazonaws.com"],
 *             type: "Service",
 *         }],
 *         resources: ["arn:aws:logs:*"],
 *     }],
 * });
 * const elasticsearch_log_publishing_policyLogResourcePolicy = new aws.cloudwatch.LogResourcePolicy("elasticsearch-log-publishing-policy", {
 *     policyDocument: elasticsearch_log_publishing_policyPolicyDocument.json,
 *     policyName: "elasticsearch-log-publishing-policy",
 * });
 * ```
 *
 * ### Route53 Query Logging
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const route53_query_logging_policyPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: [
 *             "logs:CreateLogStream",
 *             "logs:PutLogEvents",
 *         ],
 *         principals: [{
 *             identifiers: ["route53.amazonaws.com"],
 *             type: "Service",
 *         }],
 *         resources: ["arn:aws:logs:*:*:log-group:/aws/route53/*"],
 *     }],
 * });
 * const route53_query_logging_policyLogResourcePolicy = new aws.cloudwatch.LogResourcePolicy("route53-query-logging-policy", {
 *     policyDocument: route53_query_logging_policyPolicyDocument.json,
 *     policyName: "route53-query-logging-policy",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/cloudwatch_log_resource_policy.html.markdown.
 */
class LogResourcePolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["policyDocument"] = state ? state.policyDocument : undefined;
            inputs["policyName"] = state ? state.policyName : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.policyDocument === undefined) {
                throw new Error("Missing required property 'policyDocument'");
            }
            if (!args || args.policyName === undefined) {
                throw new Error("Missing required property 'policyName'");
            }
            inputs["policyDocument"] = args ? args.policyDocument : undefined;
            inputs["policyName"] = args ? args.policyName : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LogResourcePolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LogResourcePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new LogResourcePolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogResourcePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogResourcePolicy.__pulumiType;
    }
}
exports.LogResourcePolicy = LogResourcePolicy;
/** @internal */
LogResourcePolicy.__pulumiType = 'aws:cloudwatch/logResourcePolicy:LogResourcePolicy';
//# sourceMappingURL=logResourcePolicy.js.map