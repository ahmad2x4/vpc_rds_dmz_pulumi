import * as pulumi from "@pulumi/pulumi";
import { ARN } from "../index";
import { Group } from "./group";
import { Role } from "./role";
import { User } from "./user";
/**
 * Attaches a Managed IAM Policy to user(s), role(s), and/or group(s)
 *
 * !> **WARNING:** The aws.iam.PolicyAttachment resource creates **exclusive** attachments of IAM policies. Across the entire AWS account, all of the users/roles/groups to which a single policy is attached must be declared by a single aws.iam.PolicyAttachment resource. This means that even any users/roles/groups that have the attached policy via any other mechanism (including other resources managed by this provider) will have that attached policy revoked by this resource. Consider `aws.iam.RolePolicyAttachment`, `aws.iam.UserPolicyAttachment`, or `aws.iam.GroupPolicyAttachment` instead. These resources do not enforce exclusive attachment of an IAM policy.
 *
 * > **NOTE:** The usage of this resource conflicts with the `aws.iam.GroupPolicyAttachment`, `aws.iam.RolePolicyAttachment`, and `aws.iam.UserPolicyAttachment` resources and will permanently show a difference if both are defined.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const user = new aws.iam.User("user", {});
 * const role = new aws.iam.Role("role", {
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "ec2.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const group = new aws.iam.Group("group", {});
 * const policy = new aws.iam.Policy("policy", {
 *     description: "A test policy",
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "ec2:Describe*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 * });
 * const testAttach = new aws.iam.PolicyAttachment("test-attach", {
 *     groups: [group.name],
 *     policyArn: policy.arn,
 *     roles: [role.name],
 *     users: [user.name],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_policy_attachment.html.markdown.
 */
export declare class PolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing PolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyAttachmentState, opts?: pulumi.CustomResourceOptions): PolicyAttachment;
    /**
     * Returns true if the given object is an instance of PolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PolicyAttachment;
    /**
     * The group(s) the policy should be applied to
     */
    readonly groups: pulumi.Output<string[] | undefined>;
    /**
     * The name of the attachment. This cannot be an empty string.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The ARN of the policy you want to apply
     */
    readonly policyArn: pulumi.Output<ARN>;
    /**
     * The role(s) the policy should be applied to
     */
    readonly roles: pulumi.Output<string[] | undefined>;
    /**
     * The user(s) the policy should be applied to
     */
    readonly users: pulumi.Output<string[] | undefined>;
    /**
     * Create a PolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering PolicyAttachment resources.
 */
export interface PolicyAttachmentState {
    /**
     * The group(s) the policy should be applied to
     */
    readonly groups?: pulumi.Input<pulumi.Input<string | Group>[]>;
    /**
     * The name of the attachment. This cannot be an empty string.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ARN of the policy you want to apply
     */
    readonly policyArn?: pulumi.Input<ARN>;
    /**
     * The role(s) the policy should be applied to
     */
    readonly roles?: pulumi.Input<pulumi.Input<string | Role>[]>;
    /**
     * The user(s) the policy should be applied to
     */
    readonly users?: pulumi.Input<pulumi.Input<string | User>[]>;
}
/**
 * The set of arguments for constructing a PolicyAttachment resource.
 */
export interface PolicyAttachmentArgs {
    /**
     * The group(s) the policy should be applied to
     */
    readonly groups?: pulumi.Input<pulumi.Input<string | Group>[]>;
    /**
     * The name of the attachment. This cannot be an empty string.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The ARN of the policy you want to apply
     */
    readonly policyArn: pulumi.Input<ARN>;
    /**
     * The role(s) the policy should be applied to
     */
    readonly roles?: pulumi.Input<pulumi.Input<string | Role>[]>;
    /**
     * The user(s) the policy should be applied to
     */
    readonly users?: pulumi.Input<pulumi.Input<string | User>[]>;
}
