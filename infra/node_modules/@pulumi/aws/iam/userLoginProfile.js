"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an IAM User Login Profile with limited support for password creation during this provider resource creation. Uses PGP to encrypt the password for safe transport to the user. PGP keys can be obtained from Keybase.
 *
 * > To reset an IAM User login password via this provider, you can use delete and recreate this resource or change any of the arguments.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleUser = new aws.iam.User("example", {
 *     forceDestroy: true,
 *     path: "/",
 * });
 * const exampleUserLoginProfile = new aws.iam.UserLoginProfile("example", {
 *     pgpKey: "keybase:some_person_that_exists",
 *     user: exampleUser.name,
 * });
 *
 * export const password = exampleUserLoginProfile.encryptedPassword;
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_user_login_profile.html.markdown.
 */
class UserLoginProfile extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["encryptedPassword"] = state ? state.encryptedPassword : undefined;
            inputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            inputs["passwordLength"] = state ? state.passwordLength : undefined;
            inputs["passwordResetRequired"] = state ? state.passwordResetRequired : undefined;
            inputs["pgpKey"] = state ? state.pgpKey : undefined;
            inputs["user"] = state ? state.user : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.pgpKey === undefined) {
                throw new Error("Missing required property 'pgpKey'");
            }
            if (!args || args.user === undefined) {
                throw new Error("Missing required property 'user'");
            }
            inputs["passwordLength"] = args ? args.passwordLength : undefined;
            inputs["passwordResetRequired"] = args ? args.passwordResetRequired : undefined;
            inputs["pgpKey"] = args ? args.pgpKey : undefined;
            inputs["user"] = args ? args.user : undefined;
            inputs["encryptedPassword"] = undefined /*out*/;
            inputs["keyFingerprint"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(UserLoginProfile.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing UserLoginProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new UserLoginProfile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserLoginProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserLoginProfile.__pulumiType;
    }
}
exports.UserLoginProfile = UserLoginProfile;
/** @internal */
UserLoginProfile.__pulumiType = 'aws:iam/userLoginProfile:UserLoginProfile';
//# sourceMappingURL=userLoginProfile.js.map