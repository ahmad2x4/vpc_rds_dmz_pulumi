import * as pulumi from "@pulumi/pulumi";
import { PolicyDocument } from "./documents";
/**
 * Provides an IAM policy attached to a user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const lbUser = new aws.iam.User("lb", {
 *     path: "/system/",
 * });
 * const lbRo = new aws.iam.UserPolicy("lbRo", {
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "ec2:Describe*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 *     user: lbUser.name,
 * });
 * const lbAccessKey = new aws.iam.AccessKey("lb", {
 *     user: lbUser.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_user_policy.html.markdown.
 */
export declare class UserPolicy extends pulumi.CustomResource {
    /**
     * Get an existing UserPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserPolicyState, opts?: pulumi.CustomResourceOptions): UserPolicy;
    /**
     * Returns true if the given object is an instance of UserPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is UserPolicy;
    /**
     * The name of the policy. If omitted, this provider will assign a random, unique name.
     */
    readonly name: pulumi.Output<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     */
    readonly namePrefix: pulumi.Output<string | undefined>;
    readonly policy: pulumi.Output<string>;
    /**
     * IAM user to which to attach this policy.
     */
    readonly user: pulumi.Output<string>;
    /**
     * Create a UserPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserPolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering UserPolicy resources.
 */
export interface UserPolicyState {
    /**
     * The name of the policy. If omitted, this provider will assign a random, unique name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    readonly policy?: pulumi.Input<string | PolicyDocument>;
    /**
     * IAM user to which to attach this policy.
     */
    readonly user?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a UserPolicy resource.
 */
export interface UserPolicyArgs {
    /**
     * The name of the policy. If omitted, this provider will assign a random, unique name.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Creates a unique name beginning with the specified prefix. Conflicts with `name`.
     */
    readonly namePrefix?: pulumi.Input<string>;
    readonly policy: pulumi.Input<string | PolicyDocument>;
    /**
     * IAM user to which to attach this policy.
     */
    readonly user: pulumi.Input<string>;
}
