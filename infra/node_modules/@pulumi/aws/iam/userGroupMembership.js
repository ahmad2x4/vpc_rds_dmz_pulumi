"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource for adding an [IAM User][2] to [IAM Groups][1]. This
 * resource can be used multiple times with the same user for non-overlapping
 * groups.
 *
 * To exclusively manage the users in a group, see the
 * [`aws.iam.GroupMembership` resource][3].
 *
 * ## Example usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const user1 = new aws.iam.User("user1", {});
 * const group1 = new aws.iam.Group("group1", {});
 * const group2 = new aws.iam.Group("group2", {});
 * const example1 = new aws.iam.UserGroupMembership("example1", {
 *     groups: [
 *         group1.name,
 *         group2.name,
 *     ],
 *     user: user1.name,
 * });
 * const group3 = new aws.iam.Group("group3", {});
 * const example2 = new aws.iam.UserGroupMembership("example2", {
 *     groups: [group3.name],
 *     user: user1.name,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/iam_user_group_membership.html.markdown.
 */
class UserGroupMembership extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["groups"] = state ? state.groups : undefined;
            inputs["user"] = state ? state.user : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.groups === undefined) {
                throw new Error("Missing required property 'groups'");
            }
            if (!args || args.user === undefined) {
                throw new Error("Missing required property 'user'");
            }
            inputs["groups"] = args ? args.groups : undefined;
            inputs["user"] = args ? args.user : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(UserGroupMembership.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing UserGroupMembership resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new UserGroupMembership(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserGroupMembership.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroupMembership.__pulumiType;
    }
}
exports.UserGroupMembership = UserGroupMembership;
/** @internal */
UserGroupMembership.__pulumiType = 'aws:iam/userGroupMembership:UserGroupMembership';
//# sourceMappingURL=userGroupMembership.js.map