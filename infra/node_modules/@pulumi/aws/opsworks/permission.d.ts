import * as pulumi from "@pulumi/pulumi";
/**
 * Provides an OpsWorks permission resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myStackPermission = new aws.opsworks.Permission("myStackPermission", {
 *     allowSsh: true,
 *     allowSudo: true,
 *     level: "iamOnly",
 *     stackId: aws_opsworks_stack_stack.id,
 *     userArn: aws_iam_user_user.arn,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_permission.html.markdown.
 */
export declare class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission;
    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Permission;
    /**
     * Whether the user is allowed to use SSH to communicate with the instance
     */
    readonly allowSsh: pulumi.Output<boolean>;
    /**
     * Whether the user is allowed to use sudo to elevate privileges
     */
    readonly allowSudo: pulumi.Output<boolean>;
    /**
     * The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
     */
    readonly level: pulumi.Output<string>;
    /**
     * The stack to set the permissions for
     */
    readonly stackId: pulumi.Output<string>;
    /**
     * The user's IAM ARN to set permissions for
     */
    readonly userArn: pulumi.Output<string>;
    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    /**
     * Whether the user is allowed to use SSH to communicate with the instance
     */
    readonly allowSsh?: pulumi.Input<boolean>;
    /**
     * Whether the user is allowed to use sudo to elevate privileges
     */
    readonly allowSudo?: pulumi.Input<boolean>;
    /**
     * The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
     */
    readonly level?: pulumi.Input<string>;
    /**
     * The stack to set the permissions for
     */
    readonly stackId?: pulumi.Input<string>;
    /**
     * The user's IAM ARN to set permissions for
     */
    readonly userArn?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * Whether the user is allowed to use SSH to communicate with the instance
     */
    readonly allowSsh?: pulumi.Input<boolean>;
    /**
     * Whether the user is allowed to use sudo to elevate privileges
     */
    readonly allowSudo?: pulumi.Input<boolean>;
    /**
     * The users permission level. Mus be one of `deny`, `show`, `deploy`, `manage`, `iamOnly`
     */
    readonly level?: pulumi.Input<string>;
    /**
     * The stack to set the permissions for
     */
    readonly stackId?: pulumi.Input<string>;
    /**
     * The user's IAM ARN to set permissions for
     */
    readonly userArn: pulumi.Input<string>;
}
