"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an OpsWorks application resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fs from "fs";
 *
 * const fooApp = new aws.opsworks.Application("foo-app", {
 *     appSources: [{
 *         revision: "master",
 *         type: "git",
 *         url: "https://github.com/example.git",
 *     }],
 *     autoBundleOnDeploy: "true",
 *     description: "This is a Rails application",
 *     documentRoot: "public",
 *     domains: [
 *         "example.com",
 *         "sub.example.com",
 *     ],
 *     enableSsl: true,
 *     environments: [{
 *         key: "key",
 *         secure: false,
 *         value: "value",
 *     }],
 *     railsEnv: "staging",
 *     shortName: "foobar",
 *     sslConfigurations: [{
 *         certificate: fs.readFileSync("./foobar.crt", "utf-8"),
 *         privateKey: fs.readFileSync("./foobar.key", "utf-8"),
 *     }],
 *     stackId: aws_opsworks_stack_main.id,
 *     type: "rails",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_application.html.markdown.
 */
class Application extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["appSources"] = state ? state.appSources : undefined;
            inputs["autoBundleOnDeploy"] = state ? state.autoBundleOnDeploy : undefined;
            inputs["awsFlowRubySettings"] = state ? state.awsFlowRubySettings : undefined;
            inputs["dataSourceArn"] = state ? state.dataSourceArn : undefined;
            inputs["dataSourceDatabaseName"] = state ? state.dataSourceDatabaseName : undefined;
            inputs["dataSourceType"] = state ? state.dataSourceType : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["documentRoot"] = state ? state.documentRoot : undefined;
            inputs["domains"] = state ? state.domains : undefined;
            inputs["enableSsl"] = state ? state.enableSsl : undefined;
            inputs["environments"] = state ? state.environments : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["railsEnv"] = state ? state.railsEnv : undefined;
            inputs["shortName"] = state ? state.shortName : undefined;
            inputs["sslConfigurations"] = state ? state.sslConfigurations : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.stackId === undefined) {
                throw new Error("Missing required property 'stackId'");
            }
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["appSources"] = args ? args.appSources : undefined;
            inputs["autoBundleOnDeploy"] = args ? args.autoBundleOnDeploy : undefined;
            inputs["awsFlowRubySettings"] = args ? args.awsFlowRubySettings : undefined;
            inputs["dataSourceArn"] = args ? args.dataSourceArn : undefined;
            inputs["dataSourceDatabaseName"] = args ? args.dataSourceDatabaseName : undefined;
            inputs["dataSourceType"] = args ? args.dataSourceType : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["documentRoot"] = args ? args.documentRoot : undefined;
            inputs["domains"] = args ? args.domains : undefined;
            inputs["enableSsl"] = args ? args.enableSsl : undefined;
            inputs["environments"] = args ? args.environments : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["railsEnv"] = args ? args.railsEnv : undefined;
            inputs["shortName"] = args ? args.shortName : undefined;
            inputs["sslConfigurations"] = args ? args.sslConfigurations : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Application.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Application(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'aws:opsworks/application:Application';
//# sourceMappingURL=application.js.map