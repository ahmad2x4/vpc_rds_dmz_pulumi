"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an OpsWorks instance resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myInstance = new aws.opsworks.Instance("my-instance", {
 *     instanceType: "t2.micro",
 *     layerIds: [aws_opsworks_custom_layer_my_layer.id],
 *     os: "Amazon Linux 2015.09",
 *     stackId: aws_opsworks_stack_main.id,
 *     state: "stopped",
 * });
 * ```
 *
 * ## Block devices
 *
 * Each of the `*_block_device` attributes controls a portion of the AWS
 * Instance's "Block Device Mapping". It's a good idea to familiarize yourself with [AWS's Block Device
 * Mapping docs](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
 * to understand the implications of using these attributes.
 *
 * The `rootBlockDevice` mapping supports the following:
 *
 * * `volumeType` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volumeSize` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volumeType` of `"io1"`.
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 *
 * Modifying any of the `rootBlockDevice` settings requires resource
 * replacement.
 *
 * Each `ebsBlockDevice` supports the following:
 *
 * * `deviceName` - The name of the device to mount.
 * * `snapshotId` - (Optional) The Snapshot ID to mount.
 * * `volumeType` - (Optional) The type of volume. Can be `"standard"`, `"gp2"`,
 *   or `"io1"`. (Default: `"standard"`).
 * * `volumeSize` - (Optional) The size of the volume in gigabytes.
 * * `iops` - (Optional) The amount of provisioned
 *   [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
 *   This must be set with a `volumeType` of `"io1"`.
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed
 *   on instance termination (Default: `true`).
 *
 * Modifying any `ebsBlockDevice` currently requires resource replacement.
 *
 * Each `ephemeralBlockDevice` supports the following:
 *
 * * `deviceName` - The name of the block device to mount on the instance.
 * * `virtualName` - The [Instance Store Device
 *   Name](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
 *   (e.g. `"ephemeral0"`)
 *
 * Each AWS Instance type has a different set of Instance Store block devices
 * available for attachment. AWS [publishes a
 * list](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes)
 * of which ephemeral devices are available on each type. The devices are always
 * identified by the `virtualName` in the format `"ephemeral{0..N}"`.
 *
 * > **NOTE:** Currently, changes to `*_block_device` configuration of _existing_
 * resources cannot be automatically detected by this provider. After making updates
 * to block device configuration, resource recreation can be manually triggered by
 * using the [`taint` command](https://www.terraform.io/docs/commands/taint.html).
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_instance.html.markdown.
 */
class Instance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["agentVersion"] = state ? state.agentVersion : undefined;
            inputs["amiId"] = state ? state.amiId : undefined;
            inputs["architecture"] = state ? state.architecture : undefined;
            inputs["autoScalingType"] = state ? state.autoScalingType : undefined;
            inputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["deleteEbs"] = state ? state.deleteEbs : undefined;
            inputs["deleteEip"] = state ? state.deleteEip : undefined;
            inputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            inputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            inputs["ec2InstanceId"] = state ? state.ec2InstanceId : undefined;
            inputs["ecsClusterArn"] = state ? state.ecsClusterArn : undefined;
            inputs["elasticIp"] = state ? state.elasticIp : undefined;
            inputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["infrastructureClass"] = state ? state.infrastructureClass : undefined;
            inputs["installUpdatesOnBoot"] = state ? state.installUpdatesOnBoot : undefined;
            inputs["instanceProfileArn"] = state ? state.instanceProfileArn : undefined;
            inputs["instanceType"] = state ? state.instanceType : undefined;
            inputs["lastServiceErrorId"] = state ? state.lastServiceErrorId : undefined;
            inputs["layerIds"] = state ? state.layerIds : undefined;
            inputs["os"] = state ? state.os : undefined;
            inputs["platform"] = state ? state.platform : undefined;
            inputs["privateDns"] = state ? state.privateDns : undefined;
            inputs["privateIp"] = state ? state.privateIp : undefined;
            inputs["publicDns"] = state ? state.publicDns : undefined;
            inputs["publicIp"] = state ? state.publicIp : undefined;
            inputs["registeredBy"] = state ? state.registeredBy : undefined;
            inputs["reportedAgentVersion"] = state ? state.reportedAgentVersion : undefined;
            inputs["reportedOsFamily"] = state ? state.reportedOsFamily : undefined;
            inputs["reportedOsName"] = state ? state.reportedOsName : undefined;
            inputs["reportedOsVersion"] = state ? state.reportedOsVersion : undefined;
            inputs["rootBlockDevices"] = state ? state.rootBlockDevices : undefined;
            inputs["rootDeviceType"] = state ? state.rootDeviceType : undefined;
            inputs["rootDeviceVolumeId"] = state ? state.rootDeviceVolumeId : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["sshHostDsaKeyFingerprint"] = state ? state.sshHostDsaKeyFingerprint : undefined;
            inputs["sshHostRsaKeyFingerprint"] = state ? state.sshHostRsaKeyFingerprint : undefined;
            inputs["sshKeyName"] = state ? state.sshKeyName : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["tenancy"] = state ? state.tenancy : undefined;
            inputs["virtualizationType"] = state ? state.virtualizationType : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.layerIds === undefined) {
                throw new Error("Missing required property 'layerIds'");
            }
            if (!args || args.stackId === undefined) {
                throw new Error("Missing required property 'stackId'");
            }
            inputs["agentVersion"] = args ? args.agentVersion : undefined;
            inputs["amiId"] = args ? args.amiId : undefined;
            inputs["architecture"] = args ? args.architecture : undefined;
            inputs["autoScalingType"] = args ? args.autoScalingType : undefined;
            inputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            inputs["createdAt"] = args ? args.createdAt : undefined;
            inputs["deleteEbs"] = args ? args.deleteEbs : undefined;
            inputs["deleteEip"] = args ? args.deleteEip : undefined;
            inputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            inputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            inputs["ecsClusterArn"] = args ? args.ecsClusterArn : undefined;
            inputs["elasticIp"] = args ? args.elasticIp : undefined;
            inputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["infrastructureClass"] = args ? args.infrastructureClass : undefined;
            inputs["installUpdatesOnBoot"] = args ? args.installUpdatesOnBoot : undefined;
            inputs["instanceProfileArn"] = args ? args.instanceProfileArn : undefined;
            inputs["instanceType"] = args ? args.instanceType : undefined;
            inputs["lastServiceErrorId"] = args ? args.lastServiceErrorId : undefined;
            inputs["layerIds"] = args ? args.layerIds : undefined;
            inputs["os"] = args ? args.os : undefined;
            inputs["platform"] = args ? args.platform : undefined;
            inputs["privateDns"] = args ? args.privateDns : undefined;
            inputs["privateIp"] = args ? args.privateIp : undefined;
            inputs["publicDns"] = args ? args.publicDns : undefined;
            inputs["publicIp"] = args ? args.publicIp : undefined;
            inputs["registeredBy"] = args ? args.registeredBy : undefined;
            inputs["reportedAgentVersion"] = args ? args.reportedAgentVersion : undefined;
            inputs["reportedOsFamily"] = args ? args.reportedOsFamily : undefined;
            inputs["reportedOsName"] = args ? args.reportedOsName : undefined;
            inputs["reportedOsVersion"] = args ? args.reportedOsVersion : undefined;
            inputs["rootBlockDevices"] = args ? args.rootBlockDevices : undefined;
            inputs["rootDeviceType"] = args ? args.rootDeviceType : undefined;
            inputs["rootDeviceVolumeId"] = args ? args.rootDeviceVolumeId : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["sshHostDsaKeyFingerprint"] = args ? args.sshHostDsaKeyFingerprint : undefined;
            inputs["sshHostRsaKeyFingerprint"] = args ? args.sshHostRsaKeyFingerprint : undefined;
            inputs["sshKeyName"] = args ? args.sshKeyName : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["tenancy"] = args ? args.tenancy : undefined;
            inputs["virtualizationType"] = args ? args.virtualizationType : undefined;
            inputs["ec2InstanceId"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Instance.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Instance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }
}
exports.Instance = Instance;
/** @internal */
Instance.__pulumiType = 'aws:opsworks/instance:Instance';
//# sourceMappingURL=instance.js.map