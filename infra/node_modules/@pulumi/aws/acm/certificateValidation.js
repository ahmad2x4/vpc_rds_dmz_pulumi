"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This resource represents a successful validation of an ACM certificate in concert
 * with other resources.
 *
 * Most commonly, this resource is used together with `aws.route53.Record` and
 * `aws.acm.Certificate` to request a DNS validated certificate,
 * deploy the required validation records and wait for validation to complete.
 *
 * > **WARNING:** This resource implements a part of the validation workflow. It does not represent a real-world entity in AWS, therefore changing or deleting this resource on its own has no immediate effect.
 *
 *
 * ## Example Usage
 *
 * ### DNS Validation with Route 53
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const certCertificate = new aws.acm.Certificate("cert", {
 *     domainName: "example.com",
 *     validationMethod: "DNS",
 * });
 * const zone = aws.route53.getZone({
 *     name: "example.com.",
 *     privateZone: false,
 * });
 * const certValidation = new aws.route53.Record("certValidation", {
 *     name: certCertificate.domainValidationOptions[0].resourceRecordName,
 *     records: [certCertificate.domainValidationOptions[0].resourceRecordValue],
 *     ttl: 60,
 *     type: certCertificate.domainValidationOptions[0].resourceRecordType,
 *     zoneId: zone.id,
 * });
 * const certCertificateValidation = new aws.acm.CertificateValidation("cert", {
 *     certificateArn: certCertificate.arn,
 *     validationRecordFqdns: [certValidation.fqdn],
 * });
 * const frontEnd = new aws.lb.Listener("frontEnd", {
 *     // [...]
 *     certificateArn: certCertificateValidation.certificateArn,
 * });
 * ```
 *
 * ### Alternative Domains DNS Validation with Route 53
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const certCertificate = new aws.acm.Certificate("cert", {
 *     domainName: "example.com",
 *     subjectAlternativeNames: [
 *         "www.example.com",
 *         "example.org",
 *     ],
 *     validationMethod: "DNS",
 * });
 * const zone = aws.route53.getZone({
 *     name: "example.com.",
 *     privateZone: false,
 * });
 * const zoneAlt = aws.route53.getZone({
 *     name: "example.org.",
 *     privateZone: false,
 * });
 * const certValidation = new aws.route53.Record("certValidation", {
 *     name: certCertificate.domainValidationOptions[0].resourceRecordName,
 *     records: [certCertificate.domainValidationOptions[0].resourceRecordValue],
 *     ttl: 60,
 *     type: certCertificate.domainValidationOptions[0].resourceRecordType,
 *     zoneId: zone.id,
 * });
 * const certValidationAlt1 = new aws.route53.Record("certValidationAlt1", {
 *     name: certCertificate.domainValidationOptions[1].resourceRecordName,
 *     records: [certCertificate.domainValidationOptions[1].resourceRecordValue],
 *     ttl: 60,
 *     type: certCertificate.domainValidationOptions[1].resourceRecordType,
 *     zoneId: zone.id,
 * });
 * const certValidationAlt2 = new aws.route53.Record("certValidationAlt2", {
 *     name: certCertificate.domainValidationOptions[2].resourceRecordName,
 *     records: [certCertificate.domainValidationOptions[2].resourceRecordValue],
 *     ttl: 60,
 *     type: certCertificate.domainValidationOptions[2].resourceRecordType,
 *     zoneId: zoneAlt.id,
 * });
 * const certCertificateValidation = new aws.acm.CertificateValidation("cert", {
 *     certificateArn: certCertificate.arn,
 *     validationRecordFqdns: [
 *         certValidation.fqdn,
 *         certValidationAlt1.fqdn,
 *         certValidationAlt2.fqdn,
 *     ],
 * });
 * const frontEnd = new aws.lb.Listener("frontEnd", {
 *     // [...]
 *     certificateArn: certCertificateValidation.certificateArn,
 * });
 * ```
 *
 * ### Email Validation
 *
 * In this situation, the resource is simply a waiter for manual email approval of ACM certificates.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const certCertificate = new aws.acm.Certificate("cert", {
 *     domainName: "example.com",
 *     validationMethod: "EMAIL",
 * });
 * const certCertificateValidation = new aws.acm.CertificateValidation("cert", {
 *     certificateArn: certCertificate.arn,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/acm_certificate_validation.html.markdown.
 */
class CertificateValidation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["certificateArn"] = state ? state.certificateArn : undefined;
            inputs["validationRecordFqdns"] = state ? state.validationRecordFqdns : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.certificateArn === undefined) {
                throw new Error("Missing required property 'certificateArn'");
            }
            inputs["certificateArn"] = args ? args.certificateArn : undefined;
            inputs["validationRecordFqdns"] = args ? args.validationRecordFqdns : undefined;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(CertificateValidation.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CertificateValidation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new CertificateValidation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CertificateValidation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateValidation.__pulumiType;
    }
}
exports.CertificateValidation = CertificateValidation;
/** @internal */
CertificateValidation.__pulumiType = 'aws:acm/certificateValidation:CertificateValidation';
//# sourceMappingURL=certificateValidation.js.map