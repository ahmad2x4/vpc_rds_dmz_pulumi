"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The ACM certificate resource allows requesting and management of certificates
 * from the Amazon Certificate Manager.
 *
 * It deals with requesting certificates and managing their attributes and life-cycle.
 * This resource does not deal with validation of a certificate but can provide inputs
 * for other resources implementing the validation. It does not wait for a certificate to be issued.
 * Use a `aws.acm.CertificateValidation` resource for this.
 *
 * Most commonly, this resource is used to together with `aws.route53.Record` and
 * `aws.acm.CertificateValidation` to request a DNS validated certificate,
 * deploy the required validation records and wait for validation to complete.
 *
 * Domain validation through E-Mail is also supported but should be avoided as it requires a manual step outside
 * of this provider.
 *
 * It's recommended to specify `createBeforeDestroy = true` in a [lifecycle][1] block to replace a certificate
 * which is currently in use (eg, by `aws.lb.Listener`).
 *
 * ## Example Usage
 *
 * ### Certificate creation
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cert = new aws.acm.Certificate("cert", {
 *     domainName: "example.com",
 *     tags: {
 *         Environment: "test",
 *     },
 *     validationMethod: "DNS",
 * });
 * ```
 *
 * ### Importing an existing certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as tls from "@pulumi/tls";
 *
 * const examplePrivateKey = new tls.PrivateKey("example", {
 *     algorithm: "RSA",
 * });
 * const exampleSelfSignedCert = new tls.SelfSignedCert("example", {
 *     allowedUses: [
 *         "keyEncipherment",
 *         "digitalSignature",
 *         "serverAuth",
 *     ],
 *     keyAlgorithm: "RSA",
 *     privateKeyPem: examplePrivateKey.privateKeyPem,
 *     subjects: [{
 *         commonName: "example.com",
 *         organization: "ACME Examples, Inc",
 *     }],
 *     validityPeriodHours: 12,
 * });
 * const cert = new aws.acm.Certificate("cert", {
 *     certificateBody: exampleSelfSignedCert.certPem,
 *     privateKey: examplePrivateKey.privateKeyPem,
 * });
 * ```
 *
 * ## options Configuration Block
 *
 * Supported nested arguments for the `options` configuration block:
 *
 * * `certificateTransparencyLoggingPreference` - (Optional) Specifies whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/acm_certificate.html.markdown.
 */
class Certificate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["certificateAuthorityArn"] = state ? state.certificateAuthorityArn : undefined;
            inputs["certificateBody"] = state ? state.certificateBody : undefined;
            inputs["certificateChain"] = state ? state.certificateChain : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["domainValidationOptions"] = state ? state.domainValidationOptions : undefined;
            inputs["options"] = state ? state.options : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["validationEmails"] = state ? state.validationEmails : undefined;
            inputs["validationMethod"] = state ? state.validationMethod : undefined;
        }
        else {
            const args = argsOrState;
            inputs["certificateAuthorityArn"] = args ? args.certificateAuthorityArn : undefined;
            inputs["certificateBody"] = args ? args.certificateBody : undefined;
            inputs["certificateChain"] = args ? args.certificateChain : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["options"] = args ? args.options : undefined;
            inputs["privateKey"] = args ? args.privateKey : undefined;
            inputs["subjectAlternativeNames"] = args ? args.subjectAlternativeNames : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["validationMethod"] = args ? args.validationMethod : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["domainValidationOptions"] = undefined /*out*/;
            inputs["validationEmails"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Certificate.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Certificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }
}
exports.Certificate = Certificate;
/** @internal */
Certificate.__pulumiType = 'aws:acm/certificate:Certificate';
//# sourceMappingURL=certificate.js.map