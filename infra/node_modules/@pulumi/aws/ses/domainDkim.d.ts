import * as pulumi from "@pulumi/pulumi";
/**
 * Provides an SES domain DKIM generation resource.
 *
 * Domain ownership needs to be confirmed first using [sesDomainIdentity Resource](https://www.terraform.io/docs/providers/aws/r/ses_domain_identity.html)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleDomainIdentity = new aws.ses.DomainIdentity("example", {
 *     domain: "example.com",
 * });
 * const exampleDomainDkim = new aws.ses.DomainDkim("example", {
 *     domain: exampleDomainIdentity.domain,
 * });
 * const exampleAmazonsesDkimRecord: aws.route53.Record[] = [];
 * for (let i = 0; i < 3; i++) {
 *     exampleAmazonsesDkimRecord.push(new aws.route53.Record(`example_amazonses_dkim_record-${i}`, {
 *         name: exampleDomainDkim.dkimTokens.apply(dkimTokens => `${dkimTokens[i]}._domainkey.example.com`),
 *         records: [exampleDomainDkim.dkimTokens.apply(dkimTokens => `${dkimTokens[i]}.dkim.amazonses.com`)],
 *         ttl: 600,
 *         type: "CNAME",
 *         zoneId: "ABCDEFGHIJ123",
 *     }));
 * }
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ses_domain_dkim.html.markdown.
 */
export declare class DomainDkim extends pulumi.CustomResource {
    /**
     * Get an existing DomainDkim resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainDkimState, opts?: pulumi.CustomResourceOptions): DomainDkim;
    /**
     * Returns true if the given object is an instance of DomainDkim.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is DomainDkim;
    /**
     * DKIM tokens generated by SES.
     * These tokens should be used to create CNAME records used to verify SES Easy DKIM.
     * See below for an example of how this might be achieved
     * when the domain is hosted in Route 53 and managed by this provider.
     * Find out more about verifying domains in Amazon SES
     * in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
     */
    readonly dkimTokens: pulumi.Output<string[]>;
    /**
     * Verified domain name to generate DKIM tokens for.
     */
    readonly domain: pulumi.Output<string>;
    /**
     * Create a DomainDkim resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainDkimArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering DomainDkim resources.
 */
export interface DomainDkimState {
    /**
     * DKIM tokens generated by SES.
     * These tokens should be used to create CNAME records used to verify SES Easy DKIM.
     * See below for an example of how this might be achieved
     * when the domain is hosted in Route 53 and managed by this provider.
     * Find out more about verifying domains in Amazon SES
     * in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).
     */
    readonly dkimTokens?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Verified domain name to generate DKIM tokens for.
     */
    readonly domain?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a DomainDkim resource.
 */
export interface DomainDkimArgs {
    /**
     * Verified domain name to generate DKIM tokens for.
     */
    readonly domain: pulumi.Input<string>;
}
