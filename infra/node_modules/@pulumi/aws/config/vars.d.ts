import { Region } from "../region";
/**
 * The access key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console.
 */
export declare let accessKey: string | undefined;
export declare let allowedAccountIds: string[] | undefined;
export declare let assumeRole: {
    externalId?: string;
    policy?: string;
    roleArn?: string;
    sessionName?: string;
} | undefined;
export declare let endpoints: {
    accessanalyzer?: string;
    acm?: string;
    acmpca?: string;
    amplify?: string;
    apigateway?: string;
    applicationautoscaling?: string;
    applicationinsights?: string;
    appmesh?: string;
    appstream?: string;
    appsync?: string;
    athena?: string;
    autoscaling?: string;
    autoscalingplans?: string;
    backup?: string;
    batch?: string;
    budgets?: string;
    cloud9?: string;
    cloudformation?: string;
    cloudfront?: string;
    cloudhsm?: string;
    cloudsearch?: string;
    cloudtrail?: string;
    cloudwatch?: string;
    cloudwatchevents?: string;
    cloudwatchlogs?: string;
    codebuild?: string;
    codecommit?: string;
    codedeploy?: string;
    codepipeline?: string;
    cognitoidentity?: string;
    cognitoidp?: string;
    configservice?: string;
    cur?: string;
    dataexchange?: string;
    datapipeline?: string;
    datasync?: string;
    dax?: string;
    devicefarm?: string;
    directconnect?: string;
    dlm?: string;
    dms?: string;
    docdb?: string;
    ds?: string;
    dynamodb?: string;
    ec2?: string;
    ecr?: string;
    ecs?: string;
    efs?: string;
    eks?: string;
    elasticache?: string;
    elasticbeanstalk?: string;
    elastictranscoder?: string;
    elb?: string;
    emr?: string;
    es?: string;
    firehose?: string;
    fms?: string;
    forecast?: string;
    fsx?: string;
    gamelift?: string;
    glacier?: string;
    globalaccelerator?: string;
    glue?: string;
    greengrass?: string;
    guardduty?: string;
    iam?: string;
    imagebuilder?: string;
    inspector?: string;
    iot?: string;
    iotanalytics?: string;
    iotevents?: string;
    kafka?: string;
    kinesis?: string;
    kinesisAnalytics?: string;
    kinesisanalytics?: string;
    kinesisvideo?: string;
    kms?: string;
    lakeformation?: string;
    lambda?: string;
    lexmodels?: string;
    licensemanager?: string;
    lightsail?: string;
    macie?: string;
    managedblockchain?: string;
    marketplacecatalog?: string;
    mediaconnect?: string;
    mediaconvert?: string;
    medialive?: string;
    mediapackage?: string;
    mediastore?: string;
    mediastoredata?: string;
    mq?: string;
    neptune?: string;
    opsworks?: string;
    organizations?: string;
    personalize?: string;
    pinpoint?: string;
    pricing?: string;
    qldb?: string;
    quicksight?: string;
    r53?: string;
    ram?: string;
    rds?: string;
    redshift?: string;
    resourcegroups?: string;
    route53?: string;
    route53resolver?: string;
    s3?: string;
    s3control?: string;
    sagemaker?: string;
    sdb?: string;
    secretsmanager?: string;
    securityhub?: string;
    serverlessrepo?: string;
    servicecatalog?: string;
    servicediscovery?: string;
    servicequotas?: string;
    ses?: string;
    shield?: string;
    sns?: string;
    sqs?: string;
    ssm?: string;
    stepfunctions?: string;
    storagegateway?: string;
    sts?: string;
    swf?: string;
    transfer?: string;
    waf?: string;
    wafregional?: string;
    wafv2?: string;
    worklink?: string;
    workmail?: string;
    workspaces?: string;
    xray?: string;
}[] | undefined;
export declare let forbiddenAccountIds: string[] | undefined;
/**
 * Resource tag key prefixes to ignore across all resources.
 */
export declare let ignoreTagPrefixes: string[] | undefined;
/**
 * Resource tag keys to ignore across all resources.
 */
export declare let ignoreTags: string[] | undefined;
/**
 * Explicitly allow the provider to perform "insecure" SSL requests. If omitted,default value is `false`
 */
export declare let insecure: boolean | undefined;
/**
 * The maximum number of times an AWS API request is being executed. If the API request still fails, an error is thrown.
 */
export declare let maxRetries: number | undefined;
/**
 * The profile for API operations. If not set, the default profile created with `aws configure` will be used.
 */
export declare let profile: string | undefined;
/**
 * The region where AWS operations will take place. Examples are us-east-1, us-west-2, etc.
 */
export declare let region: Region | undefined;
/**
 * Set this to true to force the request to use path-style addressing, i.e., http://s3.amazonaws.com/BUCKET/KEY. By
 * default, the S3 client will use virtual hosted bucket addressing when possible (http://BUCKET.s3.amazonaws.com/KEY).
 * Specific to the Amazon S3 service.
 */
export declare let s3ForcePathStyle: boolean | undefined;
/**
 * The secret key for API operations. You can retrieve this from the 'Security & Credentials' section of the AWS console.
 */
export declare let secretKey: string | undefined;
/**
 * The path to the shared credentials file. If not set this defaults to ~/.aws/credentials.
 */
export declare let sharedCredentialsFile: string | undefined;
/**
 * Skip the credentials validation via STS API. Used for AWS API implementations that do not have STS
 * available/implemented.
 */
export declare let skipCredentialsValidation: boolean | undefined;
/**
 * Skip getting the supported EC2 platforms. Used by users that don't have ec2:DescribeAccountAttributes permissions.
 */
export declare let skipGetEc2Platforms: boolean | undefined;
export declare let skipMetadataApiCheck: boolean | undefined;
/**
 * Skip static validation of region name. Used by users of alternative AWS-like APIs or users w/ access to regions that are
 * not public (yet).
 */
export declare let skipRegionValidation: boolean | undefined;
/**
 * Skip requesting the account ID. Used for AWS API implementations that do not have IAM/STS API and/or metadata API.
 */
export declare let skipRequestingAccountId: boolean | undefined;
/**
 * session token. A session token is only required if you are using temporary security credentials.
 */
export declare let token: string | undefined;
