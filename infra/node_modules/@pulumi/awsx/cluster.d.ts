import * as pulumi from "@pulumi/pulumi";
/**
 * @deprecated Usages of awsx.Cluster should be migrated to awsx.ecs.Cluster.
 */
export interface ClusterNetworkArgs {
    /**
     * The VPC id of the network for the cluster
     */
    vpcId: pulumi.Input<string>;
    /**
     * The network subnets for the clusters
     */
    subnetIds: pulumi.Input<string>[];
}
/**
 * Arguments bag for creating infrastructure for a new Cluster.
 * @deprecated Usages of awsx.Cluster should be migrated to awsx.ecs.Cluster.
 */
export interface ClusterArgs {
    /**
     * The network in which to create this cluster.
     */
    network: ClusterNetworkArgs;
    /**
     * Whether to create an EFS File System to manage volumes across the cluster.
     */
    addEFS: boolean;
    /**
     * The EC2 instance type to use for the Cluster.  Defaults to `t2.micro`.
     */
    instanceType?: string;
    /**
     * The policy to apply to the cluster instance role.
     *
     * The default is `["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
     * "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"]`.
     */
    instanceRolePolicyARNs?: string[];
    /**
     * The size (in GiB) of the EBS volume to attach to each instance as the root volume.
     *
     * The default is 8 GiB.
     */
    instanceRootVolumeSize?: number;
    /**
     * The size (in GiB) of the EBS volume to attach to each instance to use for Docker image and metadata storage.
     *
     * The default is 50 GiB.
     */
    instanceDockerImageVolumeSize?: number;
    /**
     * The size (in GiB) of the EBS volume to attach to each instance for swap space.
     *
     * The default is 5 GiB.
     */
    instanceSwapVolumeSize?: number;
    /**
     * The minimum size of the cluster. Defaults to 2.
     */
    minSize?: number;
    /**
     * The maximum size of the cluster. Setting to 0 will prevent an EC2 AutoScalingGroup from being created. Defaults
     * to 100.
     */
    maxSize?: number;
    /**
     * Public key material for SSH access. See allowed formats at:
     * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
     * If not provided, no SSH access is enabled on VMs.
     */
    publicKey?: string;
    /**
     * The name of the ECS-optimzed AMI to use for the Container Instances in this cluster, e.g.
     * "amzn-ami-2017.09.l-amazon-ecs-optimized". Defaults to using the latest recommended ECS Optimized AMI, which may
     * change over time and cause recreation of EC2 instances when new versions are release. To control when these
     * changes are adopted, set this parameter explicitly to the version you would like to use.
     *
     * See http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html for valid values.
     */
    ecsOptimizedAMIName?: string;
}
/**
 * A Cluster is a general purpose ECS cluster configured to run in a provided
 * Network.
 *
 * @deprecated Usages of awsx.Cluster should be migrated to awsx.ecs.Cluster.
 */
export declare class Cluster extends pulumi.ComponentResource {
    /**
     * The network in which to create this cluster.
     */
    readonly network: ClusterNetworkArgs;
    /**
     * The ECS Cluster ARN.
     */
    readonly ecsClusterARN: pulumi.Output<string>;
    /**
     * The ECS Cluster's Security Group ID.
     */
    readonly securityGroupId?: pulumi.Output<string>;
    /**
     * The auto-scaling group that ECS Service's should add to their
     * `dependsOn`.
     */
    readonly autoScalingGroupStack?: pulumi.Resource;
    /**
     * The EFS host mount path if EFS is enabled on this Cluster.
     */
    readonly efsMountPath?: string;
    constructor(name: string, args: ClusterArgs, opts?: pulumi.ComponentResourceOptions);
}
