"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages the lifecycle of a Docker container.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * // Find the latest Ubuntu precise image.
 * const ubuntuRemoteImage = new docker.RemoteImage("ubuntu", {
 *     name: "ubuntu:precise",
 * });
 * // Start a container
 * const ubuntuContainer = new docker.Container("ubuntu", {
 *     image: ubuntuRemoteImage.latest,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-docker/blob/master/website/docs/r/container.html.markdown.
 */
class Container extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["attach"] = state ? state.attach : undefined;
            inputs["bridge"] = state ? state.bridge : undefined;
            inputs["capabilities"] = state ? state.capabilities : undefined;
            inputs["command"] = state ? state.command : undefined;
            inputs["containerLogs"] = state ? state.containerLogs : undefined;
            inputs["cpuSet"] = state ? state.cpuSet : undefined;
            inputs["cpuShares"] = state ? state.cpuShares : undefined;
            inputs["destroyGraceSeconds"] = state ? state.destroyGraceSeconds : undefined;
            inputs["devices"] = state ? state.devices : undefined;
            inputs["dns"] = state ? state.dns : undefined;
            inputs["dnsOpts"] = state ? state.dnsOpts : undefined;
            inputs["dnsSearches"] = state ? state.dnsSearches : undefined;
            inputs["domainname"] = state ? state.domainname : undefined;
            inputs["entrypoints"] = state ? state.entrypoints : undefined;
            inputs["envs"] = state ? state.envs : undefined;
            inputs["exitCode"] = state ? state.exitCode : undefined;
            inputs["gateway"] = state ? state.gateway : undefined;
            inputs["healthcheck"] = state ? state.healthcheck : undefined;
            inputs["hosts"] = state ? state.hosts : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["image"] = state ? state.image : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["ipPrefixLength"] = state ? state.ipPrefixLength : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["links"] = state ? state.links : undefined;
            inputs["logDriver"] = state ? state.logDriver : undefined;
            inputs["logOpts"] = state ? state.logOpts : undefined;
            inputs["logs"] = state ? state.logs : undefined;
            inputs["maxRetryCount"] = state ? state.maxRetryCount : undefined;
            inputs["memory"] = state ? state.memory : undefined;
            inputs["memorySwap"] = state ? state.memorySwap : undefined;
            inputs["mounts"] = state ? state.mounts : undefined;
            inputs["mustRun"] = state ? state.mustRun : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkAliases"] = state ? state.networkAliases : undefined;
            inputs["networkDatas"] = state ? state.networkDatas : undefined;
            inputs["networkMode"] = state ? state.networkMode : undefined;
            inputs["networks"] = state ? state.networks : undefined;
            inputs["networksAdvanced"] = state ? state.networksAdvanced : undefined;
            inputs["pidMode"] = state ? state.pidMode : undefined;
            inputs["ports"] = state ? state.ports : undefined;
            inputs["privileged"] = state ? state.privileged : undefined;
            inputs["publishAllPorts"] = state ? state.publishAllPorts : undefined;
            inputs["restart"] = state ? state.restart : undefined;
            inputs["rm"] = state ? state.rm : undefined;
            inputs["start"] = state ? state.start : undefined;
            inputs["sysctls"] = state ? state.sysctls : undefined;
            inputs["tmpfs"] = state ? state.tmpfs : undefined;
            inputs["ulimits"] = state ? state.ulimits : undefined;
            inputs["uploads"] = state ? state.uploads : undefined;
            inputs["user"] = state ? state.user : undefined;
            inputs["usernsMode"] = state ? state.usernsMode : undefined;
            inputs["volumes"] = state ? state.volumes : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.image === undefined) {
                throw new Error("Missing required property 'image'");
            }
            inputs["attach"] = args ? args.attach : undefined;
            inputs["capabilities"] = args ? args.capabilities : undefined;
            inputs["command"] = args ? args.command : undefined;
            inputs["cpuSet"] = args ? args.cpuSet : undefined;
            inputs["cpuShares"] = args ? args.cpuShares : undefined;
            inputs["destroyGraceSeconds"] = args ? args.destroyGraceSeconds : undefined;
            inputs["devices"] = args ? args.devices : undefined;
            inputs["dns"] = args ? args.dns : undefined;
            inputs["dnsOpts"] = args ? args.dnsOpts : undefined;
            inputs["dnsSearches"] = args ? args.dnsSearches : undefined;
            inputs["domainname"] = args ? args.domainname : undefined;
            inputs["entrypoints"] = args ? args.entrypoints : undefined;
            inputs["envs"] = args ? args.envs : undefined;
            inputs["healthcheck"] = args ? args.healthcheck : undefined;
            inputs["hosts"] = args ? args.hosts : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["image"] = args ? args.image : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["links"] = args ? args.links : undefined;
            inputs["logDriver"] = args ? args.logDriver : undefined;
            inputs["logOpts"] = args ? args.logOpts : undefined;
            inputs["logs"] = args ? args.logs : undefined;
            inputs["maxRetryCount"] = args ? args.maxRetryCount : undefined;
            inputs["memory"] = args ? args.memory : undefined;
            inputs["memorySwap"] = args ? args.memorySwap : undefined;
            inputs["mounts"] = args ? args.mounts : undefined;
            inputs["mustRun"] = args ? args.mustRun : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkAliases"] = args ? args.networkAliases : undefined;
            inputs["networkMode"] = args ? args.networkMode : undefined;
            inputs["networks"] = args ? args.networks : undefined;
            inputs["networksAdvanced"] = args ? args.networksAdvanced : undefined;
            inputs["pidMode"] = args ? args.pidMode : undefined;
            inputs["ports"] = args ? args.ports : undefined;
            inputs["privileged"] = args ? args.privileged : undefined;
            inputs["publishAllPorts"] = args ? args.publishAllPorts : undefined;
            inputs["restart"] = args ? args.restart : undefined;
            inputs["rm"] = args ? args.rm : undefined;
            inputs["start"] = args ? args.start : undefined;
            inputs["sysctls"] = args ? args.sysctls : undefined;
            inputs["tmpfs"] = args ? args.tmpfs : undefined;
            inputs["ulimits"] = args ? args.ulimits : undefined;
            inputs["uploads"] = args ? args.uploads : undefined;
            inputs["user"] = args ? args.user : undefined;
            inputs["usernsMode"] = args ? args.usernsMode : undefined;
            inputs["volumes"] = args ? args.volumes : undefined;
            inputs["bridge"] = undefined /*out*/;
            inputs["containerLogs"] = undefined /*out*/;
            inputs["exitCode"] = undefined /*out*/;
            inputs["gateway"] = undefined /*out*/;
            inputs["ipAddress"] = undefined /*out*/;
            inputs["ipPrefixLength"] = undefined /*out*/;
            inputs["networkDatas"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Container.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Container(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Container.__pulumiType;
    }
}
exports.Container = Container;
/** @internal */
Container.__pulumiType = 'docker:index/container:Container';
//# sourceMappingURL=container.js.map