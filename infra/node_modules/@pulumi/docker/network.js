"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a Docker Network. This can be used alongside
 * [docker\_container](https://www.terraform.io/docs/providers/docker/r/container.html)
 * to create virtual networks within the docker environment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * // Create a new docker network
 * const privateNetwork = new docker.Network("privateNetwork", {});
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-docker/blob/master/website/docs/r/network.html.markdown.
 */
class Network extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["attachable"] = state ? state.attachable : undefined;
            inputs["checkDuplicate"] = state ? state.checkDuplicate : undefined;
            inputs["driver"] = state ? state.driver : undefined;
            inputs["ingress"] = state ? state.ingress : undefined;
            inputs["internal"] = state ? state.internal : undefined;
            inputs["ipamConfigs"] = state ? state.ipamConfigs : undefined;
            inputs["ipamDriver"] = state ? state.ipamDriver : undefined;
            inputs["ipv6"] = state ? state.ipv6 : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["options"] = state ? state.options : undefined;
            inputs["scope"] = state ? state.scope : undefined;
        }
        else {
            const args = argsOrState;
            inputs["attachable"] = args ? args.attachable : undefined;
            inputs["checkDuplicate"] = args ? args.checkDuplicate : undefined;
            inputs["driver"] = args ? args.driver : undefined;
            inputs["ingress"] = args ? args.ingress : undefined;
            inputs["internal"] = args ? args.internal : undefined;
            inputs["ipamConfigs"] = args ? args.ipamConfigs : undefined;
            inputs["ipamDriver"] = args ? args.ipamDriver : undefined;
            inputs["ipv6"] = args ? args.ipv6 : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["options"] = args ? args.options : undefined;
            inputs["scope"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Network.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new Network(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }
}
exports.Network = Network;
/** @internal */
Network.__pulumiType = 'docker:index/network:Network';
//# sourceMappingURL=network.js.map