import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * Manages the lifecycle of a Docker container.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * // Find the latest Ubuntu precise image.
 * const ubuntuRemoteImage = new docker.RemoteImage("ubuntu", {
 *     name: "ubuntu:precise",
 * });
 * // Start a container
 * const ubuntuContainer = new docker.Container("ubuntu", {
 *     image: ubuntuRemoteImage.latest,
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-docker/blob/master/website/docs/r/container.html.markdown.
 */
export declare class Container extends pulumi.CustomResource {
    /**
     * Get an existing Container resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerState, opts?: pulumi.CustomResourceOptions): Container;
    /**
     * Returns true if the given object is an instance of Container.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Container;
    /**
     * If true attach to the container after its creation and waits the end of his execution.
     */
    readonly attach: pulumi.Output<boolean | undefined>;
    /**
     * The network bridge of the container as read from its NetworkSettings.
     */
    readonly bridge: pulumi.Output<string>;
    /**
     * See Capabilities below for details.
     */
    readonly capabilities: pulumi.Output<outputs.ContainerCapabilities | undefined>;
    /**
     * The command to use to start the
     * container. For example, to run `/usr/bin/myprogram -f baz.conf` set the
     * command to be `["/usr/bin/myprogram", "-f", "baz.conf"]`.
     */
    readonly command: pulumi.Output<string[] | undefined>;
    /**
     * The logs of the container if its execution is done (`attach` must be disabled).
     */
    readonly containerLogs: pulumi.Output<string>;
    /**
     * A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
     */
    readonly cpuSet: pulumi.Output<string | undefined>;
    /**
     * CPU shares (relative weight) for the container.
     */
    readonly cpuShares: pulumi.Output<number | undefined>;
    /**
     * If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
     */
    readonly destroyGraceSeconds: pulumi.Output<number | undefined>;
    /**
     * See Devices below for details.
     */
    readonly devices: pulumi.Output<outputs.ContainerDevice[] | undefined>;
    /**
     * Set of DNS servers.
     */
    readonly dns: pulumi.Output<string[] | undefined>;
    /**
     * Set of DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
     */
    readonly dnsOpts: pulumi.Output<string[] | undefined>;
    /**
     * Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.
     */
    readonly dnsSearches: pulumi.Output<string[] | undefined>;
    /**
     * Domain name of the container.
     */
    readonly domainname: pulumi.Output<string | undefined>;
    /**
     * The command to use as the
     * Entrypoint for the container. The Entrypoint allows you to configure a
     * container to run as an executable. For example, to run `/usr/bin/myprogram`
     * when starting a container, set the entrypoint to be
     * `["/usr/bin/myprogram"]`.
     */
    readonly entrypoints: pulumi.Output<string[] | undefined>;
    /**
     * Environment variables to set.
     */
    readonly envs: pulumi.Output<string[] | undefined>;
    /**
     * The exit code of the container if its execution is done (`mustRun` must be disabled).
     */
    readonly exitCode: pulumi.Output<number>;
    /**
     * *Deprecated:* Use `networkData` instead. The network gateway of the container as read from its
     * NetworkSettings.
     */
    readonly gateway: pulumi.Output<string>;
    /**
     * See Healthcheck below for details.
     */
    readonly healthcheck: pulumi.Output<outputs.ContainerHealthcheck | undefined>;
    /**
     * Hostname to add.
     */
    readonly hosts: pulumi.Output<outputs.ContainerHost[] | undefined>;
    /**
     * Hostname of the container.
     */
    readonly hostname: pulumi.Output<string | undefined>;
    /**
     * The ID of the image to back this container.
     * The easiest way to get this value is to use the `docker..RemoteImage` resource
     * as is shown in the example above.
     */
    readonly image: pulumi.Output<string>;
    /**
     * *Deprecated:* Use `networkData` instead. The IP address of the container's first network it.
     */
    readonly ipAddress: pulumi.Output<string>;
    /**
     * *Deprecated:* Use `networkData` instead. The IP prefix length of the container as read from its
     * NetworkSettings.
     */
    readonly ipPrefixLength: pulumi.Output<number>;
    /**
     * Adding labels.
     */
    readonly labels: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Set of links for link based
     * connectivity between containers that are running on the same host.
     */
    readonly links: pulumi.Output<string[] | undefined>;
    /**
     * The logging driver to use for the container.
     * Defaults to "json-file".
     */
    readonly logDriver: pulumi.Output<string | undefined>;
    /**
     * Key/value pairs to use as options for
     * the logging driver.
     */
    readonly logOpts: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * Save the container logs (`attach` must be enabled).
     */
    readonly logs: pulumi.Output<boolean | undefined>;
    /**
     * The maximum amount of times to an attempt
     * a restart when `restart` is set to "on-failure"
     */
    readonly maxRetryCount: pulumi.Output<number | undefined>;
    /**
     * The memory limit for the container in MBs.
     */
    readonly memory: pulumi.Output<number | undefined>;
    readonly memorySwap: pulumi.Output<number | undefined>;
    /**
     * See Mounts below for details.
     */
    readonly mounts: pulumi.Output<outputs.ContainerMount[] | undefined>;
    readonly mustRun: pulumi.Output<boolean | undefined>;
    readonly name: pulumi.Output<string>;
    /**
     * Network aliases of the container for user-defined networks only. *Deprecated:* use `networksAdvanced` instead.
     */
    readonly networkAliases: pulumi.Output<string[] | undefined>;
    /**
     * (Map of a block) The IP addresses of the container on each
     * network. Key are the network names, values are the IP addresses.
     */
    readonly networkDatas: pulumi.Output<outputs.ContainerNetworkData[]>;
    /**
     * Network mode of the container.
     */
    readonly networkMode: pulumi.Output<string | undefined>;
    /**
     * Id of the networks in which the
     * container is. *Deprecated:* use `networksAdvanced` instead.
     */
    readonly networks: pulumi.Output<string[] | undefined>;
    /**
     * See Networks Advanced below for details. If this block has priority to the deprecated `networkAlias` and `network` properties.
     */
    readonly networksAdvanced: pulumi.Output<outputs.ContainerNetworksAdvanced[] | undefined>;
    /**
     * The PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
     */
    readonly pidMode: pulumi.Output<string | undefined>;
    /**
     * See Ports below for details.
     */
    readonly ports: pulumi.Output<outputs.ContainerPort[] | undefined>;
    /**
     * Run container in privileged mode.
     */
    readonly privileged: pulumi.Output<boolean | undefined>;
    /**
     * Publish all ports of the container.
     */
    readonly publishAllPorts: pulumi.Output<boolean | undefined>;
    /**
     * The restart policy for the container. Must be
     * one of "no", "on-failure", "always", "unless-stopped".
     */
    readonly restart: pulumi.Output<string | undefined>;
    readonly rm: pulumi.Output<boolean | undefined>;
    /**
     * If true, then the Docker container will be
     * started after creation. If false, then the container is only created.
     */
    readonly start: pulumi.Output<boolean | undefined>;
    /**
     * A map of kernel parameters (sysctls) to set in the container.
     */
    readonly sysctls: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
     */
    readonly tmpfs: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    /**
     * See Ulimits below for
     * details.
     */
    readonly ulimits: pulumi.Output<outputs.ContainerUlimit[] | undefined>;
    /**
     * See File Upload below for details.
     */
    readonly uploads: pulumi.Output<outputs.ContainerUpload[] | undefined>;
    /**
     * User used for run the first process. Format is
     * `user` or `user:group` which user and group can be passed literraly or
     * by name.
     */
    readonly user: pulumi.Output<string | undefined>;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     */
    readonly usernsMode: pulumi.Output<string | undefined>;
    /**
     * See Volumes below for details.
     */
    readonly volumes: pulumi.Output<outputs.ContainerVolume[] | undefined>;
    /**
     * Create a Container resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Container resources.
 */
export interface ContainerState {
    /**
     * If true attach to the container after its creation and waits the end of his execution.
     */
    readonly attach?: pulumi.Input<boolean>;
    /**
     * The network bridge of the container as read from its NetworkSettings.
     */
    readonly bridge?: pulumi.Input<string>;
    /**
     * See Capabilities below for details.
     */
    readonly capabilities?: pulumi.Input<inputs.ContainerCapabilities>;
    /**
     * The command to use to start the
     * container. For example, to run `/usr/bin/myprogram -f baz.conf` set the
     * command to be `["/usr/bin/myprogram", "-f", "baz.conf"]`.
     */
    readonly command?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The logs of the container if its execution is done (`attach` must be disabled).
     */
    readonly containerLogs?: pulumi.Input<string>;
    /**
     * A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
     */
    readonly cpuSet?: pulumi.Input<string>;
    /**
     * CPU shares (relative weight) for the container.
     */
    readonly cpuShares?: pulumi.Input<number>;
    /**
     * If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
     */
    readonly destroyGraceSeconds?: pulumi.Input<number>;
    /**
     * See Devices below for details.
     */
    readonly devices?: pulumi.Input<pulumi.Input<inputs.ContainerDevice>[]>;
    /**
     * Set of DNS servers.
     */
    readonly dns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
     */
    readonly dnsOpts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.
     */
    readonly dnsSearches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name of the container.
     */
    readonly domainname?: pulumi.Input<string>;
    /**
     * The command to use as the
     * Entrypoint for the container. The Entrypoint allows you to configure a
     * container to run as an executable. For example, to run `/usr/bin/myprogram`
     * when starting a container, set the entrypoint to be
     * `["/usr/bin/myprogram"]`.
     */
    readonly entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Environment variables to set.
     */
    readonly envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The exit code of the container if its execution is done (`mustRun` must be disabled).
     */
    readonly exitCode?: pulumi.Input<number>;
    /**
     * *Deprecated:* Use `networkData` instead. The network gateway of the container as read from its
     * NetworkSettings.
     */
    readonly gateway?: pulumi.Input<string>;
    /**
     * See Healthcheck below for details.
     */
    readonly healthcheck?: pulumi.Input<inputs.ContainerHealthcheck>;
    /**
     * Hostname to add.
     */
    readonly hosts?: pulumi.Input<pulumi.Input<inputs.ContainerHost>[]>;
    /**
     * Hostname of the container.
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * The ID of the image to back this container.
     * The easiest way to get this value is to use the `docker..RemoteImage` resource
     * as is shown in the example above.
     */
    readonly image?: pulumi.Input<string>;
    /**
     * *Deprecated:* Use `networkData` instead. The IP address of the container's first network it.
     */
    readonly ipAddress?: pulumi.Input<string>;
    /**
     * *Deprecated:* Use `networkData` instead. The IP prefix length of the container as read from its
     * NetworkSettings.
     */
    readonly ipPrefixLength?: pulumi.Input<number>;
    /**
     * Adding labels.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Set of links for link based
     * connectivity between containers that are running on the same host.
     */
    readonly links?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The logging driver to use for the container.
     * Defaults to "json-file".
     */
    readonly logDriver?: pulumi.Input<string>;
    /**
     * Key/value pairs to use as options for
     * the logging driver.
     */
    readonly logOpts?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Save the container logs (`attach` must be enabled).
     */
    readonly logs?: pulumi.Input<boolean>;
    /**
     * The maximum amount of times to an attempt
     * a restart when `restart` is set to "on-failure"
     */
    readonly maxRetryCount?: pulumi.Input<number>;
    /**
     * The memory limit for the container in MBs.
     */
    readonly memory?: pulumi.Input<number>;
    readonly memorySwap?: pulumi.Input<number>;
    /**
     * See Mounts below for details.
     */
    readonly mounts?: pulumi.Input<pulumi.Input<inputs.ContainerMount>[]>;
    readonly mustRun?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    /**
     * Network aliases of the container for user-defined networks only. *Deprecated:* use `networksAdvanced` instead.
     */
    readonly networkAliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Map of a block) The IP addresses of the container on each
     * network. Key are the network names, values are the IP addresses.
     */
    readonly networkDatas?: pulumi.Input<pulumi.Input<inputs.ContainerNetworkData>[]>;
    /**
     * Network mode of the container.
     */
    readonly networkMode?: pulumi.Input<string>;
    /**
     * Id of the networks in which the
     * container is. *Deprecated:* use `networksAdvanced` instead.
     */
    readonly networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * See Networks Advanced below for details. If this block has priority to the deprecated `networkAlias` and `network` properties.
     */
    readonly networksAdvanced?: pulumi.Input<pulumi.Input<inputs.ContainerNetworksAdvanced>[]>;
    /**
     * The PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
     */
    readonly pidMode?: pulumi.Input<string>;
    /**
     * See Ports below for details.
     */
    readonly ports?: pulumi.Input<pulumi.Input<inputs.ContainerPort>[]>;
    /**
     * Run container in privileged mode.
     */
    readonly privileged?: pulumi.Input<boolean>;
    /**
     * Publish all ports of the container.
     */
    readonly publishAllPorts?: pulumi.Input<boolean>;
    /**
     * The restart policy for the container. Must be
     * one of "no", "on-failure", "always", "unless-stopped".
     */
    readonly restart?: pulumi.Input<string>;
    readonly rm?: pulumi.Input<boolean>;
    /**
     * If true, then the Docker container will be
     * started after creation. If false, then the container is only created.
     */
    readonly start?: pulumi.Input<boolean>;
    /**
     * A map of kernel parameters (sysctls) to set in the container.
     */
    readonly sysctls?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
     */
    readonly tmpfs?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * See Ulimits below for
     * details.
     */
    readonly ulimits?: pulumi.Input<pulumi.Input<inputs.ContainerUlimit>[]>;
    /**
     * See File Upload below for details.
     */
    readonly uploads?: pulumi.Input<pulumi.Input<inputs.ContainerUpload>[]>;
    /**
     * User used for run the first process. Format is
     * `user` or `user:group` which user and group can be passed literraly or
     * by name.
     */
    readonly user?: pulumi.Input<string>;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     */
    readonly usernsMode?: pulumi.Input<string>;
    /**
     * See Volumes below for details.
     */
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ContainerVolume>[]>;
}
/**
 * The set of arguments for constructing a Container resource.
 */
export interface ContainerArgs {
    /**
     * If true attach to the container after its creation and waits the end of his execution.
     */
    readonly attach?: pulumi.Input<boolean>;
    /**
     * See Capabilities below for details.
     */
    readonly capabilities?: pulumi.Input<inputs.ContainerCapabilities>;
    /**
     * The command to use to start the
     * container. For example, to run `/usr/bin/myprogram -f baz.conf` set the
     * command to be `["/usr/bin/myprogram", "-f", "baz.conf"]`.
     */
    readonly command?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma-separated list or hyphen-separated range of CPUs a container can use, e.g. `0-1`.
     */
    readonly cpuSet?: pulumi.Input<string>;
    /**
     * CPU shares (relative weight) for the container.
     */
    readonly cpuShares?: pulumi.Input<number>;
    /**
     * If defined will attempt to stop the container before destroying. Container will be destroyed after `n` seconds or on successful stop.
     */
    readonly destroyGraceSeconds?: pulumi.Input<number>;
    /**
     * See Devices below for details.
     */
    readonly devices?: pulumi.Input<pulumi.Input<inputs.ContainerDevice>[]>;
    /**
     * Set of DNS servers.
     */
    readonly dns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of DNS options used by the DNS provider(s), see `resolv.conf` documentation for valid list of options.
     */
    readonly dnsOpts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of DNS search domains that are used when bare unqualified hostnames are used inside of the container.
     */
    readonly dnsSearches?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name of the container.
     */
    readonly domainname?: pulumi.Input<string>;
    /**
     * The command to use as the
     * Entrypoint for the container. The Entrypoint allows you to configure a
     * container to run as an executable. For example, to run `/usr/bin/myprogram`
     * when starting a container, set the entrypoint to be
     * `["/usr/bin/myprogram"]`.
     */
    readonly entrypoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Environment variables to set.
     */
    readonly envs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * See Healthcheck below for details.
     */
    readonly healthcheck?: pulumi.Input<inputs.ContainerHealthcheck>;
    /**
     * Hostname to add.
     */
    readonly hosts?: pulumi.Input<pulumi.Input<inputs.ContainerHost>[]>;
    /**
     * Hostname of the container.
     */
    readonly hostname?: pulumi.Input<string>;
    /**
     * The ID of the image to back this container.
     * The easiest way to get this value is to use the `docker..RemoteImage` resource
     * as is shown in the example above.
     */
    readonly image: pulumi.Input<string>;
    /**
     * Adding labels.
     */
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Set of links for link based
     * connectivity between containers that are running on the same host.
     */
    readonly links?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The logging driver to use for the container.
     * Defaults to "json-file".
     */
    readonly logDriver?: pulumi.Input<string>;
    /**
     * Key/value pairs to use as options for
     * the logging driver.
     */
    readonly logOpts?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * Save the container logs (`attach` must be enabled).
     */
    readonly logs?: pulumi.Input<boolean>;
    /**
     * The maximum amount of times to an attempt
     * a restart when `restart` is set to "on-failure"
     */
    readonly maxRetryCount?: pulumi.Input<number>;
    /**
     * The memory limit for the container in MBs.
     */
    readonly memory?: pulumi.Input<number>;
    readonly memorySwap?: pulumi.Input<number>;
    /**
     * See Mounts below for details.
     */
    readonly mounts?: pulumi.Input<pulumi.Input<inputs.ContainerMount>[]>;
    readonly mustRun?: pulumi.Input<boolean>;
    readonly name?: pulumi.Input<string>;
    /**
     * Network aliases of the container for user-defined networks only. *Deprecated:* use `networksAdvanced` instead.
     */
    readonly networkAliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network mode of the container.
     */
    readonly networkMode?: pulumi.Input<string>;
    /**
     * Id of the networks in which the
     * container is. *Deprecated:* use `networksAdvanced` instead.
     */
    readonly networks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * See Networks Advanced below for details. If this block has priority to the deprecated `networkAlias` and `network` properties.
     */
    readonly networksAdvanced?: pulumi.Input<pulumi.Input<inputs.ContainerNetworksAdvanced>[]>;
    /**
     * The PID (Process) Namespace mode for the container. Either `container:<name|id>` or `host`.
     */
    readonly pidMode?: pulumi.Input<string>;
    /**
     * See Ports below for details.
     */
    readonly ports?: pulumi.Input<pulumi.Input<inputs.ContainerPort>[]>;
    /**
     * Run container in privileged mode.
     */
    readonly privileged?: pulumi.Input<boolean>;
    /**
     * Publish all ports of the container.
     */
    readonly publishAllPorts?: pulumi.Input<boolean>;
    /**
     * The restart policy for the container. Must be
     * one of "no", "on-failure", "always", "unless-stopped".
     */
    readonly restart?: pulumi.Input<string>;
    readonly rm?: pulumi.Input<boolean>;
    /**
     * If true, then the Docker container will be
     * started after creation. If false, then the container is only created.
     */
    readonly start?: pulumi.Input<boolean>;
    /**
     * A map of kernel parameters (sysctls) to set in the container.
     */
    readonly sysctls?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * A map of container directories which should be replaced by `tmpfs mounts`, and their corresponding mount options.
     */
    readonly tmpfs?: pulumi.Input<{
        [key: string]: any;
    }>;
    /**
     * See Ulimits below for
     * details.
     */
    readonly ulimits?: pulumi.Input<pulumi.Input<inputs.ContainerUlimit>[]>;
    /**
     * See File Upload below for details.
     */
    readonly uploads?: pulumi.Input<pulumi.Input<inputs.ContainerUpload>[]>;
    /**
     * User used for run the first process. Format is
     * `user` or `user:group` which user and group can be passed literraly or
     * by name.
     */
    readonly user?: pulumi.Input<string>;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     */
    readonly usernsMode?: pulumi.Input<string>;
    /**
     * See Volumes below for details.
     */
    readonly volumes?: pulumi.Input<pulumi.Input<inputs.ContainerVolume>[]>;
}
