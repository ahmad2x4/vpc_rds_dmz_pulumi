"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Pulls a Docker image to a given Docker host from a Docker Registry.
 *
 * This resource will *not* pull new layers of the image automatically unless used in
 * conjunction with [`docker..getRegistryImage`](https://www.terraform.io/docs/providers/docker/d/registry_image.html)
 * data source to update the `pullTriggers` field.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * // Find the latest Ubuntu precise image.
 * const ubuntu = new docker.RemoteImage("ubuntu", {
 *     name: "ubuntu:precise",
 * });
 * ```
 *
 * ### Dynamic image
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const ubuntuRegistryImage = docker.getRegistryImage({
 *     name: "ubuntu:precise",
 * });
 * const ubuntuRemoteImage = new docker.RemoteImage("ubuntu", {
 *     name: ubuntuRegistryImage.name,
 *     pullTriggers: [ubuntuRegistryImage.sha256Digest],
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-docker/blob/master/website/docs/r/image.html.markdown.
 */
class RemoteImage extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        if (opts && opts.id) {
            const state = argsOrState;
            inputs["keepLocally"] = state ? state.keepLocally : undefined;
            inputs["latest"] = state ? state.latest : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pullTrigger"] = state ? state.pullTrigger : undefined;
            inputs["pullTriggers"] = state ? state.pullTriggers : undefined;
        }
        else {
            const args = argsOrState;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["keepLocally"] = args ? args.keepLocally : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pullTrigger"] = args ? args.pullTrigger : undefined;
            inputs["pullTriggers"] = args ? args.pullTriggers : undefined;
            inputs["latest"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(RemoteImage.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RemoteImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name, id, state, opts) {
        return new RemoteImage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RemoteImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteImage.__pulumiType;
    }
}
exports.RemoteImage = RemoteImage;
/** @internal */
RemoteImage.__pulumiType = 'docker:index/remoteImage:RemoteImage';
//# sourceMappingURL=remoteImage.js.map